// Code generated by ent, DO NOT EDIT.

package repositories

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/omiga-group/omiga/src/exchange/shared/models"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/exchange"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/ticker"
)

// Ticker is the model entity for the Ticker schema.
type Ticker struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Base holds the value of the "base" field.
	Base string `json:"base,omitempty"`
	// BaseCoinID holds the value of the "base_coin_id" field.
	BaseCoinID string `json:"base_coin_id,omitempty"`
	// Counter holds the value of the "counter" field.
	Counter string `json:"counter,omitempty"`
	// CounterCoinID holds the value of the "counter_coin_id" field.
	CounterCoinID string `json:"counter_coin_id,omitempty"`
	// Market holds the value of the "market" field.
	Market models.Market `json:"market,omitempty"`
	// Last holds the value of the "last" field.
	Last float64 `json:"last,omitempty"`
	// Volume holds the value of the "volume" field.
	Volume float64 `json:"volume,omitempty"`
	// ConvertedLast holds the value of the "converted_last" field.
	ConvertedLast models.ConvertedDetails `json:"converted_last,omitempty"`
	// ConvertedVolume holds the value of the "converted_volume" field.
	ConvertedVolume models.ConvertedDetails `json:"converted_volume,omitempty"`
	// TrustScore holds the value of the "trust_score" field.
	TrustScore string `json:"trust_score,omitempty"`
	// BidAskSpreadPercentage holds the value of the "bid_ask_spread_percentage" field.
	BidAskSpreadPercentage float64 `json:"bid_ask_spread_percentage,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// LastTradedAt holds the value of the "last_traded_at" field.
	LastTradedAt time.Time `json:"last_traded_at,omitempty"`
	// LastFetchAt holds the value of the "last_fetch_at" field.
	LastFetchAt time.Time `json:"last_fetch_at,omitempty"`
	// IsAnomaly holds the value of the "is_anomaly" field.
	IsAnomaly bool `json:"is_anomaly,omitempty"`
	// IsStale holds the value of the "is_stale" field.
	IsStale bool `json:"is_stale,omitempty"`
	// TradeURL holds the value of the "trade_url" field.
	TradeURL string `json:"trade_url,omitempty"`
	// TokenInfoURL holds the value of the "token_info_url" field.
	TokenInfoURL string `json:"token_info_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TickerQuery when eager-loading is set.
	Edges           TickerEdges `json:"edges"`
	exchange_ticker *int
}

// TickerEdges holds the relations/edges for other nodes in the graph.
type TickerEdges struct {
	// Exchange holds the value of the exchange edge.
	Exchange *Exchange `json:"exchange,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// ExchangeOrErr returns the Exchange value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TickerEdges) ExchangeOrErr() (*Exchange, error) {
	if e.loadedTypes[0] {
		if e.Exchange == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exchange.Label}
		}
		return e.Exchange, nil
	}
	return nil, &NotLoadedError{edge: "exchange"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ticker) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ticker.FieldMarket, ticker.FieldConvertedLast, ticker.FieldConvertedVolume:
			values[i] = new([]byte)
		case ticker.FieldIsAnomaly, ticker.FieldIsStale:
			values[i] = new(sql.NullBool)
		case ticker.FieldLast, ticker.FieldVolume, ticker.FieldBidAskSpreadPercentage:
			values[i] = new(sql.NullFloat64)
		case ticker.FieldID:
			values[i] = new(sql.NullInt64)
		case ticker.FieldBase, ticker.FieldBaseCoinID, ticker.FieldCounter, ticker.FieldCounterCoinID, ticker.FieldTrustScore, ticker.FieldTradeURL, ticker.FieldTokenInfoURL:
			values[i] = new(sql.NullString)
		case ticker.FieldTimestamp, ticker.FieldLastTradedAt, ticker.FieldLastFetchAt:
			values[i] = new(sql.NullTime)
		case ticker.ForeignKeys[0]: // exchange_ticker
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Ticker", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ticker fields.
func (t *Ticker) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ticker.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case ticker.FieldBase:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field base", values[i])
			} else if value.Valid {
				t.Base = value.String
			}
		case ticker.FieldBaseCoinID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field base_coin_id", values[i])
			} else if value.Valid {
				t.BaseCoinID = value.String
			}
		case ticker.FieldCounter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field counter", values[i])
			} else if value.Valid {
				t.Counter = value.String
			}
		case ticker.FieldCounterCoinID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field counter_coin_id", values[i])
			} else if value.Valid {
				t.CounterCoinID = value.String
			}
		case ticker.FieldMarket:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field market", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Market); err != nil {
					return fmt.Errorf("unmarshal field market: %w", err)
				}
			}
		case ticker.FieldLast:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field last", values[i])
			} else if value.Valid {
				t.Last = value.Float64
			}
		case ticker.FieldVolume:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field volume", values[i])
			} else if value.Valid {
				t.Volume = value.Float64
			}
		case ticker.FieldConvertedLast:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field converted_last", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.ConvertedLast); err != nil {
					return fmt.Errorf("unmarshal field converted_last: %w", err)
				}
			}
		case ticker.FieldConvertedVolume:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field converted_volume", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.ConvertedVolume); err != nil {
					return fmt.Errorf("unmarshal field converted_volume: %w", err)
				}
			}
		case ticker.FieldTrustScore:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trust_score", values[i])
			} else if value.Valid {
				t.TrustScore = value.String
			}
		case ticker.FieldBidAskSpreadPercentage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bid_ask_spread_percentage", values[i])
			} else if value.Valid {
				t.BidAskSpreadPercentage = value.Float64
			}
		case ticker.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				t.Timestamp = value.Time
			}
		case ticker.FieldLastTradedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_traded_at", values[i])
			} else if value.Valid {
				t.LastTradedAt = value.Time
			}
		case ticker.FieldLastFetchAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_fetch_at", values[i])
			} else if value.Valid {
				t.LastFetchAt = value.Time
			}
		case ticker.FieldIsAnomaly:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_anomaly", values[i])
			} else if value.Valid {
				t.IsAnomaly = value.Bool
			}
		case ticker.FieldIsStale:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_stale", values[i])
			} else if value.Valid {
				t.IsStale = value.Bool
			}
		case ticker.FieldTradeURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trade_url", values[i])
			} else if value.Valid {
				t.TradeURL = value.String
			}
		case ticker.FieldTokenInfoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_info_url", values[i])
			} else if value.Valid {
				t.TokenInfoURL = value.String
			}
		case ticker.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exchange_ticker", value)
			} else if value.Valid {
				t.exchange_ticker = new(int)
				*t.exchange_ticker = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryExchange queries the "exchange" edge of the Ticker entity.
func (t *Ticker) QueryExchange() *ExchangeQuery {
	return (&TickerClient{config: t.config}).QueryExchange(t)
}

// Update returns a builder for updating this Ticker.
// Note that you need to call Ticker.Unwrap() before calling this method if this Ticker
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Ticker) Update() *TickerUpdateOne {
	return (&TickerClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Ticker entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Ticker) Unwrap() *Ticker {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("repositories: Ticker is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Ticker) String() string {
	var builder strings.Builder
	builder.WriteString("Ticker(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("base=")
	builder.WriteString(t.Base)
	builder.WriteString(", ")
	builder.WriteString("base_coin_id=")
	builder.WriteString(t.BaseCoinID)
	builder.WriteString(", ")
	builder.WriteString("counter=")
	builder.WriteString(t.Counter)
	builder.WriteString(", ")
	builder.WriteString("counter_coin_id=")
	builder.WriteString(t.CounterCoinID)
	builder.WriteString(", ")
	builder.WriteString("market=")
	builder.WriteString(fmt.Sprintf("%v", t.Market))
	builder.WriteString(", ")
	builder.WriteString("last=")
	builder.WriteString(fmt.Sprintf("%v", t.Last))
	builder.WriteString(", ")
	builder.WriteString("volume=")
	builder.WriteString(fmt.Sprintf("%v", t.Volume))
	builder.WriteString(", ")
	builder.WriteString("converted_last=")
	builder.WriteString(fmt.Sprintf("%v", t.ConvertedLast))
	builder.WriteString(", ")
	builder.WriteString("converted_volume=")
	builder.WriteString(fmt.Sprintf("%v", t.ConvertedVolume))
	builder.WriteString(", ")
	builder.WriteString("trust_score=")
	builder.WriteString(t.TrustScore)
	builder.WriteString(", ")
	builder.WriteString("bid_ask_spread_percentage=")
	builder.WriteString(fmt.Sprintf("%v", t.BidAskSpreadPercentage))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(t.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_traded_at=")
	builder.WriteString(t.LastTradedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_fetch_at=")
	builder.WriteString(t.LastFetchAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_anomaly=")
	builder.WriteString(fmt.Sprintf("%v", t.IsAnomaly))
	builder.WriteString(", ")
	builder.WriteString("is_stale=")
	builder.WriteString(fmt.Sprintf("%v", t.IsStale))
	builder.WriteString(", ")
	builder.WriteString("trade_url=")
	builder.WriteString(t.TradeURL)
	builder.WriteString(", ")
	builder.WriteString("token_info_url=")
	builder.WriteString(t.TokenInfoURL)
	builder.WriteByte(')')
	return builder.String()
}

// Tickers is a parsable slice of Ticker.
type Tickers []*Ticker

func (t Tickers) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
