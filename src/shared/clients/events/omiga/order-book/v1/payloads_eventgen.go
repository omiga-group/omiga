
// Code generated by go-connectilly-event-template, DO NOT EDIT.

package orderbookv1

import (
    
      "encoding/json"
      "fmt"
    
      "time"
    
      "github.com/google/uuid"
    )
    
    // OrderBookEvent represents a OrderBookEvent model.
type OrderBookEvent struct {
  Metadata Metadata `json:"metadata"` 
  Data OrderBook `json:"data"` 
}
    
    
    // Metadata represents a Metadata model.
type Metadata struct {
  Id uuid.UUID `json:"id"`  // The unique message ID
  Source string `json:"source"` 
  ReservedType ReservedType `json:"type"` 
  Subject string `json:"subject"` 
  Time time.Time `json:"time"` 
  CorrelationId uuid.UUID `json:"correlationId"` 
  Actor string `json:"actor"` 
}
    
    
    // ReservedType represents an enum of ReservedType.
type ReservedType uint

const (
  ReservedTypeOrderBookUpdated ReservedType = iota
)

// Value returns the value of the enum.
func (op ReservedType) Value() any {
	if op >= ReservedType(len(ReservedTypeValues)) {
		return nil
	}
	return ReservedTypeValues[op]
}

var ReservedTypeValues = []any{"orderBookUpdated"}
var ValuesToReservedType = map[any]ReservedType{
  ReservedTypeValues[ReservedTypeOrderBookUpdated]: ReservedTypeOrderBookUpdated,
}

    
    
    // OrderBook represents a OrderBook model.
type OrderBook struct {
  ExchangeId string `json:"exchangeId"`  // The unique ID of the exchange
  BaseCurrency Currency `json:"baseCurrency"` 
  CounterCurrency Currency `json:"counterCurrency"` 
  Bids []OrderBookEntry `json:"bids"` 
  Asks []OrderBookEntry `json:"asks"` 
  AdditionalProperties *map[string]interface{} `json:"additionalProperties,omitempty"` 
}
    
    
    // Currency represents a Currency model.
type Currency struct {
  Code string `json:"code"` 
  Name string `json:"name"` 
  MaxPrecision int32 `json:"maxPrecision"` 
  Digital bool `json:"digital"` 
}
    
    
    // OrderBookEntry represents a OrderBookEntry model.
type OrderBookEntry struct {
  Time time.Time `json:"time"`  // The order book entry timestamp
  Quantity Quantity `json:"quantity"` 
  Price Quantity `json:"price"` 
}
    
    
    // Quantity represents a Quantity model.
type Quantity struct {
  Amount int64 `json:"amount"` 
  Scale int32 `json:"scale"` 
}
    
func (enumVal ReservedType) MarshalJSON() ([]byte, error) {
  return json.Marshal(enumVal.String())
}

func (enumVal ReservedType) String() string {
  return fmt.Sprintf("%v", ReservedTypeValues[int(enumVal)])
}

func (enumVal *ReservedType) UnmarshalJSON(buffer []byte) error {
  var str string
  if err := json.Unmarshal(buffer, &str); err != nil {
    return err
  }

  var tmpEnumVal ReservedType
  var ok bool

  if tmpEnumVal, ok = ValuesToReservedType[str]; !ok {
    return fmt.Errorf("unknown %s", str)
  }

  *enumVal = tmpEnumVal

  return nil
}
