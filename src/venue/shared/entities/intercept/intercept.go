// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/omiga-group/omiga/src/venue/shared/entities"
	"github.com/omiga-group/omiga/src/venue/shared/entities/predicate"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...entities.OrderFunc)
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next entities.Querier) entities.Querier {
	return entities.QuerierFunc(func(ctx context.Context, q entities.Query) (entities.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next entities.Querier) entities.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q entities.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The CurrencyFunc type is an adapter to allow the use of ordinary function as a Querier.
type CurrencyFunc func(context.Context, *entities.CurrencyQuery) (entities.Value, error)

// Query calls f(ctx, q).
func (f CurrencyFunc) Query(ctx context.Context, q entities.Query) (entities.Value, error) {
	if q, ok := q.(*entities.CurrencyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *entities.CurrencyQuery", q)
}

// The TraverseCurrency type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCurrency func(context.Context, *entities.CurrencyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCurrency) Intercept(next entities.Querier) entities.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCurrency) Traverse(ctx context.Context, q entities.Query) error {
	if q, ok := q.(*entities.CurrencyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *entities.CurrencyQuery", q)
}

// The MarketFunc type is an adapter to allow the use of ordinary function as a Querier.
type MarketFunc func(context.Context, *entities.MarketQuery) (entities.Value, error)

// Query calls f(ctx, q).
func (f MarketFunc) Query(ctx context.Context, q entities.Query) (entities.Value, error) {
	if q, ok := q.(*entities.MarketQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *entities.MarketQuery", q)
}

// The TraverseMarket type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMarket func(context.Context, *entities.MarketQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMarket) Intercept(next entities.Querier) entities.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMarket) Traverse(ctx context.Context, q entities.Query) error {
	if q, ok := q.(*entities.MarketQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *entities.MarketQuery", q)
}

// The OutboxFunc type is an adapter to allow the use of ordinary function as a Querier.
type OutboxFunc func(context.Context, *entities.OutboxQuery) (entities.Value, error)

// Query calls f(ctx, q).
func (f OutboxFunc) Query(ctx context.Context, q entities.Query) (entities.Value, error) {
	if q, ok := q.(*entities.OutboxQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *entities.OutboxQuery", q)
}

// The TraverseOutbox type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOutbox func(context.Context, *entities.OutboxQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOutbox) Intercept(next entities.Querier) entities.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOutbox) Traverse(ctx context.Context, q entities.Query) error {
	if q, ok := q.(*entities.OutboxQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *entities.OutboxQuery", q)
}

// The TickerFunc type is an adapter to allow the use of ordinary function as a Querier.
type TickerFunc func(context.Context, *entities.TickerQuery) (entities.Value, error)

// Query calls f(ctx, q).
func (f TickerFunc) Query(ctx context.Context, q entities.Query) (entities.Value, error) {
	if q, ok := q.(*entities.TickerQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *entities.TickerQuery", q)
}

// The TraverseTicker type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTicker func(context.Context, *entities.TickerQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTicker) Intercept(next entities.Querier) entities.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTicker) Traverse(ctx context.Context, q entities.Query) error {
	if q, ok := q.(*entities.TickerQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *entities.TickerQuery", q)
}

// The TradingPairFunc type is an adapter to allow the use of ordinary function as a Querier.
type TradingPairFunc func(context.Context, *entities.TradingPairQuery) (entities.Value, error)

// Query calls f(ctx, q).
func (f TradingPairFunc) Query(ctx context.Context, q entities.Query) (entities.Value, error) {
	if q, ok := q.(*entities.TradingPairQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *entities.TradingPairQuery", q)
}

// The TraverseTradingPair type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTradingPair func(context.Context, *entities.TradingPairQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTradingPair) Intercept(next entities.Querier) entities.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTradingPair) Traverse(ctx context.Context, q entities.Query) error {
	if q, ok := q.(*entities.TradingPairQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *entities.TradingPairQuery", q)
}

// The VenueFunc type is an adapter to allow the use of ordinary function as a Querier.
type VenueFunc func(context.Context, *entities.VenueQuery) (entities.Value, error)

// Query calls f(ctx, q).
func (f VenueFunc) Query(ctx context.Context, q entities.Query) (entities.Value, error) {
	if q, ok := q.(*entities.VenueQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *entities.VenueQuery", q)
}

// The TraverseVenue type is an adapter to allow the use of ordinary function as Traverser.
type TraverseVenue func(context.Context, *entities.VenueQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseVenue) Intercept(next entities.Querier) entities.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseVenue) Traverse(ctx context.Context, q entities.Query) error {
	if q, ok := q.(*entities.VenueQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *entities.VenueQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q entities.Query) (Query, error) {
	switch q := q.(type) {
	case *entities.CurrencyQuery:
		return &query[*entities.CurrencyQuery, predicate.Currency]{typ: entities.TypeCurrency, tq: q}, nil
	case *entities.MarketQuery:
		return &query[*entities.MarketQuery, predicate.Market]{typ: entities.TypeMarket, tq: q}, nil
	case *entities.OutboxQuery:
		return &query[*entities.OutboxQuery, predicate.Outbox]{typ: entities.TypeOutbox, tq: q}, nil
	case *entities.TickerQuery:
		return &query[*entities.TickerQuery, predicate.Ticker]{typ: entities.TypeTicker, tq: q}, nil
	case *entities.TradingPairQuery:
		return &query[*entities.TradingPairQuery, predicate.TradingPair]{typ: entities.TypeTradingPair, tq: q}, nil
	case *entities.VenueQuery:
		return &query[*entities.VenueQuery, predicate.Venue]{typ: entities.TypeVenue, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...entities.OrderFunc) T
		Where(...P) T
	}
}

func (q query[T, P]) Type() string {
	return q.typ
}

func (q query[T, P]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P]) Order(orders ...entities.OrderFunc) {
	q.tq.Order(orders...)
}

func (q query[T, P]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
