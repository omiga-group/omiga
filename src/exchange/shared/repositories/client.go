// Code generated by ent, DO NOT EDIT.

package repositories

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/omiga-group/omiga/src/exchange/shared/repositories/migrate"

	"github.com/omiga-group/omiga/src/exchange/shared/repositories/exchange"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/outbox"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/ticker"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Exchange is the client for interacting with the Exchange builders.
	Exchange *ExchangeClient
	// Outbox is the client for interacting with the Outbox builders.
	Outbox *OutboxClient
	// Ticker is the client for interacting with the Ticker builders.
	Ticker *TickerClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Exchange = NewExchangeClient(c.config)
	c.Outbox = NewOutboxClient(c.config)
	c.Ticker = NewTickerClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("repositories: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("repositories: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Exchange: NewExchangeClient(cfg),
		Outbox:   NewOutboxClient(cfg),
		Ticker:   NewTickerClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Exchange: NewExchangeClient(cfg),
		Outbox:   NewOutboxClient(cfg),
		Ticker:   NewTickerClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Exchange.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Exchange.Use(hooks...)
	c.Outbox.Use(hooks...)
	c.Ticker.Use(hooks...)
}

// ExchangeClient is a client for the Exchange schema.
type ExchangeClient struct {
	config
}

// NewExchangeClient returns a client for the Exchange from the given config.
func NewExchangeClient(c config) *ExchangeClient {
	return &ExchangeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exchange.Hooks(f(g(h())))`.
func (c *ExchangeClient) Use(hooks ...Hook) {
	c.hooks.Exchange = append(c.hooks.Exchange, hooks...)
}

// Create returns a builder for creating a Exchange entity.
func (c *ExchangeClient) Create() *ExchangeCreate {
	mutation := newExchangeMutation(c.config, OpCreate)
	return &ExchangeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exchange entities.
func (c *ExchangeClient) CreateBulk(builders ...*ExchangeCreate) *ExchangeCreateBulk {
	return &ExchangeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exchange.
func (c *ExchangeClient) Update() *ExchangeUpdate {
	mutation := newExchangeMutation(c.config, OpUpdate)
	return &ExchangeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExchangeClient) UpdateOne(e *Exchange) *ExchangeUpdateOne {
	mutation := newExchangeMutation(c.config, OpUpdateOne, withExchange(e))
	return &ExchangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExchangeClient) UpdateOneID(id int) *ExchangeUpdateOne {
	mutation := newExchangeMutation(c.config, OpUpdateOne, withExchangeID(id))
	return &ExchangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exchange.
func (c *ExchangeClient) Delete() *ExchangeDelete {
	mutation := newExchangeMutation(c.config, OpDelete)
	return &ExchangeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExchangeClient) DeleteOne(e *Exchange) *ExchangeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ExchangeClient) DeleteOneID(id int) *ExchangeDeleteOne {
	builder := c.Delete().Where(exchange.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExchangeDeleteOne{builder}
}

// Query returns a query builder for Exchange.
func (c *ExchangeClient) Query() *ExchangeQuery {
	return &ExchangeQuery{
		config: c.config,
	}
}

// Get returns a Exchange entity by its id.
func (c *ExchangeClient) Get(ctx context.Context, id int) (*Exchange, error) {
	return c.Query().Where(exchange.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExchangeClient) GetX(ctx context.Context, id int) *Exchange {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTicker queries the ticker edge of a Exchange.
func (c *ExchangeClient) QueryTicker(e *Exchange) *TickerQuery {
	query := &TickerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exchange.Table, exchange.FieldID, id),
			sqlgraph.To(ticker.Table, ticker.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exchange.TickerTable, exchange.TickerColumn),
		)
		schemaConfig := e.schemaConfig
		step.To.Schema = schemaConfig.Ticker
		step.Edge.Schema = schemaConfig.Ticker
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExchangeClient) Hooks() []Hook {
	return c.hooks.Exchange
}

// OutboxClient is a client for the Outbox schema.
type OutboxClient struct {
	config
}

// NewOutboxClient returns a client for the Outbox from the given config.
func NewOutboxClient(c config) *OutboxClient {
	return &OutboxClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `outbox.Hooks(f(g(h())))`.
func (c *OutboxClient) Use(hooks ...Hook) {
	c.hooks.Outbox = append(c.hooks.Outbox, hooks...)
}

// Create returns a builder for creating a Outbox entity.
func (c *OutboxClient) Create() *OutboxCreate {
	mutation := newOutboxMutation(c.config, OpCreate)
	return &OutboxCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Outbox entities.
func (c *OutboxClient) CreateBulk(builders ...*OutboxCreate) *OutboxCreateBulk {
	return &OutboxCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Outbox.
func (c *OutboxClient) Update() *OutboxUpdate {
	mutation := newOutboxMutation(c.config, OpUpdate)
	return &OutboxUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OutboxClient) UpdateOne(o *Outbox) *OutboxUpdateOne {
	mutation := newOutboxMutation(c.config, OpUpdateOne, withOutbox(o))
	return &OutboxUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OutboxClient) UpdateOneID(id int) *OutboxUpdateOne {
	mutation := newOutboxMutation(c.config, OpUpdateOne, withOutboxID(id))
	return &OutboxUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Outbox.
func (c *OutboxClient) Delete() *OutboxDelete {
	mutation := newOutboxMutation(c.config, OpDelete)
	return &OutboxDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OutboxClient) DeleteOne(o *Outbox) *OutboxDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OutboxClient) DeleteOneID(id int) *OutboxDeleteOne {
	builder := c.Delete().Where(outbox.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OutboxDeleteOne{builder}
}

// Query returns a query builder for Outbox.
func (c *OutboxClient) Query() *OutboxQuery {
	return &OutboxQuery{
		config: c.config,
	}
}

// Get returns a Outbox entity by its id.
func (c *OutboxClient) Get(ctx context.Context, id int) (*Outbox, error) {
	return c.Query().Where(outbox.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OutboxClient) GetX(ctx context.Context, id int) *Outbox {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OutboxClient) Hooks() []Hook {
	return c.hooks.Outbox
}

// TickerClient is a client for the Ticker schema.
type TickerClient struct {
	config
}

// NewTickerClient returns a client for the Ticker from the given config.
func NewTickerClient(c config) *TickerClient {
	return &TickerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ticker.Hooks(f(g(h())))`.
func (c *TickerClient) Use(hooks ...Hook) {
	c.hooks.Ticker = append(c.hooks.Ticker, hooks...)
}

// Create returns a builder for creating a Ticker entity.
func (c *TickerClient) Create() *TickerCreate {
	mutation := newTickerMutation(c.config, OpCreate)
	return &TickerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ticker entities.
func (c *TickerClient) CreateBulk(builders ...*TickerCreate) *TickerCreateBulk {
	return &TickerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ticker.
func (c *TickerClient) Update() *TickerUpdate {
	mutation := newTickerMutation(c.config, OpUpdate)
	return &TickerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TickerClient) UpdateOne(t *Ticker) *TickerUpdateOne {
	mutation := newTickerMutation(c.config, OpUpdateOne, withTicker(t))
	return &TickerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TickerClient) UpdateOneID(id int) *TickerUpdateOne {
	mutation := newTickerMutation(c.config, OpUpdateOne, withTickerID(id))
	return &TickerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ticker.
func (c *TickerClient) Delete() *TickerDelete {
	mutation := newTickerMutation(c.config, OpDelete)
	return &TickerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TickerClient) DeleteOne(t *Ticker) *TickerDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TickerClient) DeleteOneID(id int) *TickerDeleteOne {
	builder := c.Delete().Where(ticker.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TickerDeleteOne{builder}
}

// Query returns a query builder for Ticker.
func (c *TickerClient) Query() *TickerQuery {
	return &TickerQuery{
		config: c.config,
	}
}

// Get returns a Ticker entity by its id.
func (c *TickerClient) Get(ctx context.Context, id int) (*Ticker, error) {
	return c.Query().Where(ticker.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TickerClient) GetX(ctx context.Context, id int) *Ticker {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExchange queries the exchange edge of a Ticker.
func (c *TickerClient) QueryExchange(t *Ticker) *ExchangeQuery {
	query := &ExchangeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ticker.Table, ticker.FieldID, id),
			sqlgraph.To(exchange.Table, exchange.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ticker.ExchangeTable, ticker.ExchangeColumn),
		)
		schemaConfig := t.schemaConfig
		step.To.Schema = schemaConfig.Exchange
		step.Edge.Schema = schemaConfig.Ticker
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TickerClient) Hooks() []Hook {
	return c.hooks.Ticker
}
