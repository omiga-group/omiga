// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package appsetup

import (
	"context"
	"github.com/omiga-group/omiga/src/exchange/coingecko-processor/configuration"
	"github.com/omiga-group/omiga/src/exchange/coingecko-processor/repositories"
	"github.com/omiga-group/omiga/src/exchange/coingecko-processor/subscribers"
	"github.com/omiga-group/omiga/src/exchange/shared/entities"
	"github.com/omiga-group/omiga/src/shared/enterprise/cron"
	"github.com/omiga-group/omiga/src/shared/enterprise/database/postgres"
	"github.com/omiga-group/omiga/src/shared/enterprise/time"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func NewCronService(logger *zap.SugaredLogger) (cron.CronService, error) {
	timeHelper, err := time.NewTimeHelper()
	if err != nil {
		return nil, err
	}
	cronService, err := cron.NewCronService(logger, timeHelper)
	if err != nil {
		return nil, err
	}
	return cronService, nil
}

func NewTimeHelper() (time.TimeHelper, error) {
	timeHelper, err := time.NewTimeHelper()
	if err != nil {
		return nil, err
	}
	return timeHelper, nil
}

func NewCoingeckoExchangeSubscriber(ctx context.Context, logger *zap.SugaredLogger, cronService cron.CronService, coingeckoConfig configuration.CoingeckoConfig, exchanges map[string]configuration.Exchange, postgresConfig postgres.PostgresConfig) (subscribers.CoingeckoExchangeSubscriber, error) {
	database, err := postgres.NewPostgres(logger, postgresConfig)
	if err != nil {
		return nil, err
	}
	entgoClient, err := entities.NewEntgoClient(logger, database)
	if err != nil {
		return nil, err
	}
	timeHelper, err := time.NewTimeHelper()
	if err != nil {
		return nil, err
	}
	exchangeRepository, err := repositories.NewExchangeRepository(logger, entgoClient)
	if err != nil {
		return nil, err
	}
	coingeckoExchangeSubscriber, err := subscribers.NewCoingeckoExchangeSubscriber(ctx, logger, cronService, coingeckoConfig, exchanges, entgoClient, timeHelper, exchangeRepository)
	if err != nil {
		return nil, err
	}
	return coingeckoExchangeSubscriber, nil
}

func NewCoingeckoCoinSubscriber(ctx context.Context, logger *zap.SugaredLogger, cronService cron.CronService, coingeckoConfig configuration.CoingeckoConfig, exchanges map[string]configuration.Exchange, postgresConfig postgres.PostgresConfig) (subscribers.CoingeckoCoinSubscriber, error) {
	database, err := postgres.NewPostgres(logger, postgresConfig)
	if err != nil {
		return nil, err
	}
	entgoClient, err := entities.NewEntgoClient(logger, database)
	if err != nil {
		return nil, err
	}
	timeHelper, err := time.NewTimeHelper()
	if err != nil {
		return nil, err
	}
	coinRepository, err := repositories.NewCoinRepository(logger, entgoClient)
	if err != nil {
		return nil, err
	}
	coingeckoCoinSubscriber, err := subscribers.NewCoingeckoCoinSubscriber(ctx, logger, cronService, coingeckoConfig, exchanges, entgoClient, timeHelper, coinRepository)
	if err != nil {
		return nil, err
	}
	return coingeckoCoinSubscriber, nil
}
