// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/currency"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/internal"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/market"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/predicate"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/tradingpair"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/venue"
)

// TradingPairUpdate is the builder for updating TradingPair entities.
type TradingPairUpdate struct {
	config
	hooks     []Hook
	mutation  *TradingPairMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TradingPairUpdate builder.
func (tpu *TradingPairUpdate) Where(ps ...predicate.TradingPair) *TradingPairUpdate {
	tpu.mutation.Where(ps...)
	return tpu
}

// SetSymbol sets the "symbol" field.
func (tpu *TradingPairUpdate) SetSymbol(s string) *TradingPairUpdate {
	tpu.mutation.SetSymbol(s)
	return tpu
}

// SetBasePriceMinPrecision sets the "base_price_min_precision" field.
func (tpu *TradingPairUpdate) SetBasePriceMinPrecision(i int) *TradingPairUpdate {
	tpu.mutation.ResetBasePriceMinPrecision()
	tpu.mutation.SetBasePriceMinPrecision(i)
	return tpu
}

// SetNillableBasePriceMinPrecision sets the "base_price_min_precision" field if the given value is not nil.
func (tpu *TradingPairUpdate) SetNillableBasePriceMinPrecision(i *int) *TradingPairUpdate {
	if i != nil {
		tpu.SetBasePriceMinPrecision(*i)
	}
	return tpu
}

// AddBasePriceMinPrecision adds i to the "base_price_min_precision" field.
func (tpu *TradingPairUpdate) AddBasePriceMinPrecision(i int) *TradingPairUpdate {
	tpu.mutation.AddBasePriceMinPrecision(i)
	return tpu
}

// ClearBasePriceMinPrecision clears the value of the "base_price_min_precision" field.
func (tpu *TradingPairUpdate) ClearBasePriceMinPrecision() *TradingPairUpdate {
	tpu.mutation.ClearBasePriceMinPrecision()
	return tpu
}

// SetBasePriceMaxPrecision sets the "base_price_max_precision" field.
func (tpu *TradingPairUpdate) SetBasePriceMaxPrecision(i int) *TradingPairUpdate {
	tpu.mutation.ResetBasePriceMaxPrecision()
	tpu.mutation.SetBasePriceMaxPrecision(i)
	return tpu
}

// SetNillableBasePriceMaxPrecision sets the "base_price_max_precision" field if the given value is not nil.
func (tpu *TradingPairUpdate) SetNillableBasePriceMaxPrecision(i *int) *TradingPairUpdate {
	if i != nil {
		tpu.SetBasePriceMaxPrecision(*i)
	}
	return tpu
}

// AddBasePriceMaxPrecision adds i to the "base_price_max_precision" field.
func (tpu *TradingPairUpdate) AddBasePriceMaxPrecision(i int) *TradingPairUpdate {
	tpu.mutation.AddBasePriceMaxPrecision(i)
	return tpu
}

// ClearBasePriceMaxPrecision clears the value of the "base_price_max_precision" field.
func (tpu *TradingPairUpdate) ClearBasePriceMaxPrecision() *TradingPairUpdate {
	tpu.mutation.ClearBasePriceMaxPrecision()
	return tpu
}

// SetBaseQuantityMinPrecision sets the "base_quantity_min_precision" field.
func (tpu *TradingPairUpdate) SetBaseQuantityMinPrecision(i int) *TradingPairUpdate {
	tpu.mutation.ResetBaseQuantityMinPrecision()
	tpu.mutation.SetBaseQuantityMinPrecision(i)
	return tpu
}

// SetNillableBaseQuantityMinPrecision sets the "base_quantity_min_precision" field if the given value is not nil.
func (tpu *TradingPairUpdate) SetNillableBaseQuantityMinPrecision(i *int) *TradingPairUpdate {
	if i != nil {
		tpu.SetBaseQuantityMinPrecision(*i)
	}
	return tpu
}

// AddBaseQuantityMinPrecision adds i to the "base_quantity_min_precision" field.
func (tpu *TradingPairUpdate) AddBaseQuantityMinPrecision(i int) *TradingPairUpdate {
	tpu.mutation.AddBaseQuantityMinPrecision(i)
	return tpu
}

// ClearBaseQuantityMinPrecision clears the value of the "base_quantity_min_precision" field.
func (tpu *TradingPairUpdate) ClearBaseQuantityMinPrecision() *TradingPairUpdate {
	tpu.mutation.ClearBaseQuantityMinPrecision()
	return tpu
}

// SetBaseQuantityMaxPrecision sets the "base_quantity_max_precision" field.
func (tpu *TradingPairUpdate) SetBaseQuantityMaxPrecision(i int) *TradingPairUpdate {
	tpu.mutation.ResetBaseQuantityMaxPrecision()
	tpu.mutation.SetBaseQuantityMaxPrecision(i)
	return tpu
}

// SetNillableBaseQuantityMaxPrecision sets the "base_quantity_max_precision" field if the given value is not nil.
func (tpu *TradingPairUpdate) SetNillableBaseQuantityMaxPrecision(i *int) *TradingPairUpdate {
	if i != nil {
		tpu.SetBaseQuantityMaxPrecision(*i)
	}
	return tpu
}

// AddBaseQuantityMaxPrecision adds i to the "base_quantity_max_precision" field.
func (tpu *TradingPairUpdate) AddBaseQuantityMaxPrecision(i int) *TradingPairUpdate {
	tpu.mutation.AddBaseQuantityMaxPrecision(i)
	return tpu
}

// ClearBaseQuantityMaxPrecision clears the value of the "base_quantity_max_precision" field.
func (tpu *TradingPairUpdate) ClearBaseQuantityMaxPrecision() *TradingPairUpdate {
	tpu.mutation.ClearBaseQuantityMaxPrecision()
	return tpu
}

// SetCounterPriceMinPrecision sets the "counter_price_min_precision" field.
func (tpu *TradingPairUpdate) SetCounterPriceMinPrecision(i int) *TradingPairUpdate {
	tpu.mutation.ResetCounterPriceMinPrecision()
	tpu.mutation.SetCounterPriceMinPrecision(i)
	return tpu
}

// SetNillableCounterPriceMinPrecision sets the "counter_price_min_precision" field if the given value is not nil.
func (tpu *TradingPairUpdate) SetNillableCounterPriceMinPrecision(i *int) *TradingPairUpdate {
	if i != nil {
		tpu.SetCounterPriceMinPrecision(*i)
	}
	return tpu
}

// AddCounterPriceMinPrecision adds i to the "counter_price_min_precision" field.
func (tpu *TradingPairUpdate) AddCounterPriceMinPrecision(i int) *TradingPairUpdate {
	tpu.mutation.AddCounterPriceMinPrecision(i)
	return tpu
}

// ClearCounterPriceMinPrecision clears the value of the "counter_price_min_precision" field.
func (tpu *TradingPairUpdate) ClearCounterPriceMinPrecision() *TradingPairUpdate {
	tpu.mutation.ClearCounterPriceMinPrecision()
	return tpu
}

// SetCounterPriceMaxPrecision sets the "counter_price_max_precision" field.
func (tpu *TradingPairUpdate) SetCounterPriceMaxPrecision(i int) *TradingPairUpdate {
	tpu.mutation.ResetCounterPriceMaxPrecision()
	tpu.mutation.SetCounterPriceMaxPrecision(i)
	return tpu
}

// SetNillableCounterPriceMaxPrecision sets the "counter_price_max_precision" field if the given value is not nil.
func (tpu *TradingPairUpdate) SetNillableCounterPriceMaxPrecision(i *int) *TradingPairUpdate {
	if i != nil {
		tpu.SetCounterPriceMaxPrecision(*i)
	}
	return tpu
}

// AddCounterPriceMaxPrecision adds i to the "counter_price_max_precision" field.
func (tpu *TradingPairUpdate) AddCounterPriceMaxPrecision(i int) *TradingPairUpdate {
	tpu.mutation.AddCounterPriceMaxPrecision(i)
	return tpu
}

// ClearCounterPriceMaxPrecision clears the value of the "counter_price_max_precision" field.
func (tpu *TradingPairUpdate) ClearCounterPriceMaxPrecision() *TradingPairUpdate {
	tpu.mutation.ClearCounterPriceMaxPrecision()
	return tpu
}

// SetCounterQuantityMinPrecision sets the "counter_quantity_min_precision" field.
func (tpu *TradingPairUpdate) SetCounterQuantityMinPrecision(i int) *TradingPairUpdate {
	tpu.mutation.ResetCounterQuantityMinPrecision()
	tpu.mutation.SetCounterQuantityMinPrecision(i)
	return tpu
}

// SetNillableCounterQuantityMinPrecision sets the "counter_quantity_min_precision" field if the given value is not nil.
func (tpu *TradingPairUpdate) SetNillableCounterQuantityMinPrecision(i *int) *TradingPairUpdate {
	if i != nil {
		tpu.SetCounterQuantityMinPrecision(*i)
	}
	return tpu
}

// AddCounterQuantityMinPrecision adds i to the "counter_quantity_min_precision" field.
func (tpu *TradingPairUpdate) AddCounterQuantityMinPrecision(i int) *TradingPairUpdate {
	tpu.mutation.AddCounterQuantityMinPrecision(i)
	return tpu
}

// ClearCounterQuantityMinPrecision clears the value of the "counter_quantity_min_precision" field.
func (tpu *TradingPairUpdate) ClearCounterQuantityMinPrecision() *TradingPairUpdate {
	tpu.mutation.ClearCounterQuantityMinPrecision()
	return tpu
}

// SetCounterQuantityMaxPrecision sets the "counter_quantity_max_precision" field.
func (tpu *TradingPairUpdate) SetCounterQuantityMaxPrecision(i int) *TradingPairUpdate {
	tpu.mutation.ResetCounterQuantityMaxPrecision()
	tpu.mutation.SetCounterQuantityMaxPrecision(i)
	return tpu
}

// SetNillableCounterQuantityMaxPrecision sets the "counter_quantity_max_precision" field if the given value is not nil.
func (tpu *TradingPairUpdate) SetNillableCounterQuantityMaxPrecision(i *int) *TradingPairUpdate {
	if i != nil {
		tpu.SetCounterQuantityMaxPrecision(*i)
	}
	return tpu
}

// AddCounterQuantityMaxPrecision adds i to the "counter_quantity_max_precision" field.
func (tpu *TradingPairUpdate) AddCounterQuantityMaxPrecision(i int) *TradingPairUpdate {
	tpu.mutation.AddCounterQuantityMaxPrecision(i)
	return tpu
}

// ClearCounterQuantityMaxPrecision clears the value of the "counter_quantity_max_precision" field.
func (tpu *TradingPairUpdate) ClearCounterQuantityMaxPrecision() *TradingPairUpdate {
	tpu.mutation.ClearCounterQuantityMaxPrecision()
	return tpu
}

// SetVenueID sets the "venue" edge to the Venue entity by ID.
func (tpu *TradingPairUpdate) SetVenueID(id int) *TradingPairUpdate {
	tpu.mutation.SetVenueID(id)
	return tpu
}

// SetVenue sets the "venue" edge to the Venue entity.
func (tpu *TradingPairUpdate) SetVenue(v *Venue) *TradingPairUpdate {
	return tpu.SetVenueID(v.ID)
}

// SetBaseID sets the "base" edge to the Currency entity by ID.
func (tpu *TradingPairUpdate) SetBaseID(id int) *TradingPairUpdate {
	tpu.mutation.SetBaseID(id)
	return tpu
}

// SetBase sets the "base" edge to the Currency entity.
func (tpu *TradingPairUpdate) SetBase(c *Currency) *TradingPairUpdate {
	return tpu.SetBaseID(c.ID)
}

// SetCounterID sets the "counter" edge to the Currency entity by ID.
func (tpu *TradingPairUpdate) SetCounterID(id int) *TradingPairUpdate {
	tpu.mutation.SetCounterID(id)
	return tpu
}

// SetCounter sets the "counter" edge to the Currency entity.
func (tpu *TradingPairUpdate) SetCounter(c *Currency) *TradingPairUpdate {
	return tpu.SetCounterID(c.ID)
}

// AddMarketIDs adds the "market" edge to the Market entity by IDs.
func (tpu *TradingPairUpdate) AddMarketIDs(ids ...int) *TradingPairUpdate {
	tpu.mutation.AddMarketIDs(ids...)
	return tpu
}

// AddMarket adds the "market" edges to the Market entity.
func (tpu *TradingPairUpdate) AddMarket(m ...*Market) *TradingPairUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tpu.AddMarketIDs(ids...)
}

// Mutation returns the TradingPairMutation object of the builder.
func (tpu *TradingPairUpdate) Mutation() *TradingPairMutation {
	return tpu.mutation
}

// ClearVenue clears the "venue" edge to the Venue entity.
func (tpu *TradingPairUpdate) ClearVenue() *TradingPairUpdate {
	tpu.mutation.ClearVenue()
	return tpu
}

// ClearBase clears the "base" edge to the Currency entity.
func (tpu *TradingPairUpdate) ClearBase() *TradingPairUpdate {
	tpu.mutation.ClearBase()
	return tpu
}

// ClearCounter clears the "counter" edge to the Currency entity.
func (tpu *TradingPairUpdate) ClearCounter() *TradingPairUpdate {
	tpu.mutation.ClearCounter()
	return tpu
}

// ClearMarket clears all "market" edges to the Market entity.
func (tpu *TradingPairUpdate) ClearMarket() *TradingPairUpdate {
	tpu.mutation.ClearMarket()
	return tpu
}

// RemoveMarketIDs removes the "market" edge to Market entities by IDs.
func (tpu *TradingPairUpdate) RemoveMarketIDs(ids ...int) *TradingPairUpdate {
	tpu.mutation.RemoveMarketIDs(ids...)
	return tpu
}

// RemoveMarket removes "market" edges to Market entities.
func (tpu *TradingPairUpdate) RemoveMarket(m ...*Market) *TradingPairUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tpu.RemoveMarketIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tpu *TradingPairUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tpu.hooks) == 0 {
		if err = tpu.check(); err != nil {
			return 0, err
		}
		affected, err = tpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TradingPairMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tpu.check(); err != nil {
				return 0, err
			}
			tpu.mutation = mutation
			affected, err = tpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tpu.hooks) - 1; i >= 0; i-- {
			if tpu.hooks[i] == nil {
				return 0, fmt.Errorf("entities: uninitialized hook (forgotten import entities/runtime?)")
			}
			mut = tpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpu *TradingPairUpdate) SaveX(ctx context.Context) int {
	affected, err := tpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpu *TradingPairUpdate) Exec(ctx context.Context) error {
	_, err := tpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpu *TradingPairUpdate) ExecX(ctx context.Context) {
	if err := tpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpu *TradingPairUpdate) check() error {
	if _, ok := tpu.mutation.VenueID(); tpu.mutation.VenueCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "TradingPair.venue"`)
	}
	if _, ok := tpu.mutation.BaseID(); tpu.mutation.BaseCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "TradingPair.base"`)
	}
	if _, ok := tpu.mutation.CounterID(); tpu.mutation.CounterCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "TradingPair.counter"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tpu *TradingPairUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TradingPairUpdate {
	tpu.modifiers = append(tpu.modifiers, modifiers...)
	return tpu
}

func (tpu *TradingPairUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tradingpair.Table,
			Columns: tradingpair.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tradingpair.FieldID,
			},
		},
	}
	if ps := tpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpu.mutation.Symbol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tradingpair.FieldSymbol,
		})
	}
	if value, ok := tpu.mutation.BasePriceMinPrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBasePriceMinPrecision,
		})
	}
	if value, ok := tpu.mutation.AddedBasePriceMinPrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBasePriceMinPrecision,
		})
	}
	if tpu.mutation.BasePriceMinPrecisionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tradingpair.FieldBasePriceMinPrecision,
		})
	}
	if value, ok := tpu.mutation.BasePriceMaxPrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBasePriceMaxPrecision,
		})
	}
	if value, ok := tpu.mutation.AddedBasePriceMaxPrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBasePriceMaxPrecision,
		})
	}
	if tpu.mutation.BasePriceMaxPrecisionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tradingpair.FieldBasePriceMaxPrecision,
		})
	}
	if value, ok := tpu.mutation.BaseQuantityMinPrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBaseQuantityMinPrecision,
		})
	}
	if value, ok := tpu.mutation.AddedBaseQuantityMinPrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBaseQuantityMinPrecision,
		})
	}
	if tpu.mutation.BaseQuantityMinPrecisionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tradingpair.FieldBaseQuantityMinPrecision,
		})
	}
	if value, ok := tpu.mutation.BaseQuantityMaxPrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBaseQuantityMaxPrecision,
		})
	}
	if value, ok := tpu.mutation.AddedBaseQuantityMaxPrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBaseQuantityMaxPrecision,
		})
	}
	if tpu.mutation.BaseQuantityMaxPrecisionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tradingpair.FieldBaseQuantityMaxPrecision,
		})
	}
	if value, ok := tpu.mutation.CounterPriceMinPrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterPriceMinPrecision,
		})
	}
	if value, ok := tpu.mutation.AddedCounterPriceMinPrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterPriceMinPrecision,
		})
	}
	if tpu.mutation.CounterPriceMinPrecisionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tradingpair.FieldCounterPriceMinPrecision,
		})
	}
	if value, ok := tpu.mutation.CounterPriceMaxPrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterPriceMaxPrecision,
		})
	}
	if value, ok := tpu.mutation.AddedCounterPriceMaxPrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterPriceMaxPrecision,
		})
	}
	if tpu.mutation.CounterPriceMaxPrecisionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tradingpair.FieldCounterPriceMaxPrecision,
		})
	}
	if value, ok := tpu.mutation.CounterQuantityMinPrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterQuantityMinPrecision,
		})
	}
	if value, ok := tpu.mutation.AddedCounterQuantityMinPrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterQuantityMinPrecision,
		})
	}
	if tpu.mutation.CounterQuantityMinPrecisionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tradingpair.FieldCounterQuantityMinPrecision,
		})
	}
	if value, ok := tpu.mutation.CounterQuantityMaxPrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterQuantityMaxPrecision,
		})
	}
	if value, ok := tpu.mutation.AddedCounterQuantityMaxPrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterQuantityMaxPrecision,
		})
	}
	if tpu.mutation.CounterQuantityMaxPrecisionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tradingpair.FieldCounterQuantityMaxPrecision,
		})
	}
	if tpu.mutation.VenueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.VenueTable,
			Columns: []string{tradingpair.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: venue.FieldID,
				},
			},
		}
		edge.Schema = tpu.schemaConfig.TradingPair
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.VenueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.VenueTable,
			Columns: []string{tradingpair.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: venue.FieldID,
				},
			},
		}
		edge.Schema = tpu.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.BaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.BaseTable,
			Columns: []string{tradingpair.BaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: currency.FieldID,
				},
			},
		}
		edge.Schema = tpu.schemaConfig.TradingPair
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.BaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.BaseTable,
			Columns: []string{tradingpair.BaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: currency.FieldID,
				},
			},
		}
		edge.Schema = tpu.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.CounterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.CounterTable,
			Columns: []string{tradingpair.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: currency.FieldID,
				},
			},
		}
		edge.Schema = tpu.schemaConfig.TradingPair
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.CounterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.CounterTable,
			Columns: []string{tradingpair.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: currency.FieldID,
				},
			},
		}
		edge.Schema = tpu.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.MarketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tradingpair.MarketTable,
			Columns: tradingpair.MarketPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: market.FieldID,
				},
			},
		}
		edge.Schema = tpu.schemaConfig.MarketTradingPair
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.RemovedMarketIDs(); len(nodes) > 0 && !tpu.mutation.MarketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tradingpair.MarketTable,
			Columns: tradingpair.MarketPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: market.FieldID,
				},
			},
		}
		edge.Schema = tpu.schemaConfig.MarketTradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.MarketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tradingpair.MarketTable,
			Columns: tradingpair.MarketPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: market.FieldID,
				},
			},
		}
		edge.Schema = tpu.schemaConfig.MarketTradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tpu.schemaConfig.TradingPair
	ctx = internal.NewSchemaConfigContext(ctx, tpu.schemaConfig)
	_spec.Modifiers = tpu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, tpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tradingpair.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TradingPairUpdateOne is the builder for updating a single TradingPair entity.
type TradingPairUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TradingPairMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetSymbol sets the "symbol" field.
func (tpuo *TradingPairUpdateOne) SetSymbol(s string) *TradingPairUpdateOne {
	tpuo.mutation.SetSymbol(s)
	return tpuo
}

// SetBasePriceMinPrecision sets the "base_price_min_precision" field.
func (tpuo *TradingPairUpdateOne) SetBasePriceMinPrecision(i int) *TradingPairUpdateOne {
	tpuo.mutation.ResetBasePriceMinPrecision()
	tpuo.mutation.SetBasePriceMinPrecision(i)
	return tpuo
}

// SetNillableBasePriceMinPrecision sets the "base_price_min_precision" field if the given value is not nil.
func (tpuo *TradingPairUpdateOne) SetNillableBasePriceMinPrecision(i *int) *TradingPairUpdateOne {
	if i != nil {
		tpuo.SetBasePriceMinPrecision(*i)
	}
	return tpuo
}

// AddBasePriceMinPrecision adds i to the "base_price_min_precision" field.
func (tpuo *TradingPairUpdateOne) AddBasePriceMinPrecision(i int) *TradingPairUpdateOne {
	tpuo.mutation.AddBasePriceMinPrecision(i)
	return tpuo
}

// ClearBasePriceMinPrecision clears the value of the "base_price_min_precision" field.
func (tpuo *TradingPairUpdateOne) ClearBasePriceMinPrecision() *TradingPairUpdateOne {
	tpuo.mutation.ClearBasePriceMinPrecision()
	return tpuo
}

// SetBasePriceMaxPrecision sets the "base_price_max_precision" field.
func (tpuo *TradingPairUpdateOne) SetBasePriceMaxPrecision(i int) *TradingPairUpdateOne {
	tpuo.mutation.ResetBasePriceMaxPrecision()
	tpuo.mutation.SetBasePriceMaxPrecision(i)
	return tpuo
}

// SetNillableBasePriceMaxPrecision sets the "base_price_max_precision" field if the given value is not nil.
func (tpuo *TradingPairUpdateOne) SetNillableBasePriceMaxPrecision(i *int) *TradingPairUpdateOne {
	if i != nil {
		tpuo.SetBasePriceMaxPrecision(*i)
	}
	return tpuo
}

// AddBasePriceMaxPrecision adds i to the "base_price_max_precision" field.
func (tpuo *TradingPairUpdateOne) AddBasePriceMaxPrecision(i int) *TradingPairUpdateOne {
	tpuo.mutation.AddBasePriceMaxPrecision(i)
	return tpuo
}

// ClearBasePriceMaxPrecision clears the value of the "base_price_max_precision" field.
func (tpuo *TradingPairUpdateOne) ClearBasePriceMaxPrecision() *TradingPairUpdateOne {
	tpuo.mutation.ClearBasePriceMaxPrecision()
	return tpuo
}

// SetBaseQuantityMinPrecision sets the "base_quantity_min_precision" field.
func (tpuo *TradingPairUpdateOne) SetBaseQuantityMinPrecision(i int) *TradingPairUpdateOne {
	tpuo.mutation.ResetBaseQuantityMinPrecision()
	tpuo.mutation.SetBaseQuantityMinPrecision(i)
	return tpuo
}

// SetNillableBaseQuantityMinPrecision sets the "base_quantity_min_precision" field if the given value is not nil.
func (tpuo *TradingPairUpdateOne) SetNillableBaseQuantityMinPrecision(i *int) *TradingPairUpdateOne {
	if i != nil {
		tpuo.SetBaseQuantityMinPrecision(*i)
	}
	return tpuo
}

// AddBaseQuantityMinPrecision adds i to the "base_quantity_min_precision" field.
func (tpuo *TradingPairUpdateOne) AddBaseQuantityMinPrecision(i int) *TradingPairUpdateOne {
	tpuo.mutation.AddBaseQuantityMinPrecision(i)
	return tpuo
}

// ClearBaseQuantityMinPrecision clears the value of the "base_quantity_min_precision" field.
func (tpuo *TradingPairUpdateOne) ClearBaseQuantityMinPrecision() *TradingPairUpdateOne {
	tpuo.mutation.ClearBaseQuantityMinPrecision()
	return tpuo
}

// SetBaseQuantityMaxPrecision sets the "base_quantity_max_precision" field.
func (tpuo *TradingPairUpdateOne) SetBaseQuantityMaxPrecision(i int) *TradingPairUpdateOne {
	tpuo.mutation.ResetBaseQuantityMaxPrecision()
	tpuo.mutation.SetBaseQuantityMaxPrecision(i)
	return tpuo
}

// SetNillableBaseQuantityMaxPrecision sets the "base_quantity_max_precision" field if the given value is not nil.
func (tpuo *TradingPairUpdateOne) SetNillableBaseQuantityMaxPrecision(i *int) *TradingPairUpdateOne {
	if i != nil {
		tpuo.SetBaseQuantityMaxPrecision(*i)
	}
	return tpuo
}

// AddBaseQuantityMaxPrecision adds i to the "base_quantity_max_precision" field.
func (tpuo *TradingPairUpdateOne) AddBaseQuantityMaxPrecision(i int) *TradingPairUpdateOne {
	tpuo.mutation.AddBaseQuantityMaxPrecision(i)
	return tpuo
}

// ClearBaseQuantityMaxPrecision clears the value of the "base_quantity_max_precision" field.
func (tpuo *TradingPairUpdateOne) ClearBaseQuantityMaxPrecision() *TradingPairUpdateOne {
	tpuo.mutation.ClearBaseQuantityMaxPrecision()
	return tpuo
}

// SetCounterPriceMinPrecision sets the "counter_price_min_precision" field.
func (tpuo *TradingPairUpdateOne) SetCounterPriceMinPrecision(i int) *TradingPairUpdateOne {
	tpuo.mutation.ResetCounterPriceMinPrecision()
	tpuo.mutation.SetCounterPriceMinPrecision(i)
	return tpuo
}

// SetNillableCounterPriceMinPrecision sets the "counter_price_min_precision" field if the given value is not nil.
func (tpuo *TradingPairUpdateOne) SetNillableCounterPriceMinPrecision(i *int) *TradingPairUpdateOne {
	if i != nil {
		tpuo.SetCounterPriceMinPrecision(*i)
	}
	return tpuo
}

// AddCounterPriceMinPrecision adds i to the "counter_price_min_precision" field.
func (tpuo *TradingPairUpdateOne) AddCounterPriceMinPrecision(i int) *TradingPairUpdateOne {
	tpuo.mutation.AddCounterPriceMinPrecision(i)
	return tpuo
}

// ClearCounterPriceMinPrecision clears the value of the "counter_price_min_precision" field.
func (tpuo *TradingPairUpdateOne) ClearCounterPriceMinPrecision() *TradingPairUpdateOne {
	tpuo.mutation.ClearCounterPriceMinPrecision()
	return tpuo
}

// SetCounterPriceMaxPrecision sets the "counter_price_max_precision" field.
func (tpuo *TradingPairUpdateOne) SetCounterPriceMaxPrecision(i int) *TradingPairUpdateOne {
	tpuo.mutation.ResetCounterPriceMaxPrecision()
	tpuo.mutation.SetCounterPriceMaxPrecision(i)
	return tpuo
}

// SetNillableCounterPriceMaxPrecision sets the "counter_price_max_precision" field if the given value is not nil.
func (tpuo *TradingPairUpdateOne) SetNillableCounterPriceMaxPrecision(i *int) *TradingPairUpdateOne {
	if i != nil {
		tpuo.SetCounterPriceMaxPrecision(*i)
	}
	return tpuo
}

// AddCounterPriceMaxPrecision adds i to the "counter_price_max_precision" field.
func (tpuo *TradingPairUpdateOne) AddCounterPriceMaxPrecision(i int) *TradingPairUpdateOne {
	tpuo.mutation.AddCounterPriceMaxPrecision(i)
	return tpuo
}

// ClearCounterPriceMaxPrecision clears the value of the "counter_price_max_precision" field.
func (tpuo *TradingPairUpdateOne) ClearCounterPriceMaxPrecision() *TradingPairUpdateOne {
	tpuo.mutation.ClearCounterPriceMaxPrecision()
	return tpuo
}

// SetCounterQuantityMinPrecision sets the "counter_quantity_min_precision" field.
func (tpuo *TradingPairUpdateOne) SetCounterQuantityMinPrecision(i int) *TradingPairUpdateOne {
	tpuo.mutation.ResetCounterQuantityMinPrecision()
	tpuo.mutation.SetCounterQuantityMinPrecision(i)
	return tpuo
}

// SetNillableCounterQuantityMinPrecision sets the "counter_quantity_min_precision" field if the given value is not nil.
func (tpuo *TradingPairUpdateOne) SetNillableCounterQuantityMinPrecision(i *int) *TradingPairUpdateOne {
	if i != nil {
		tpuo.SetCounterQuantityMinPrecision(*i)
	}
	return tpuo
}

// AddCounterQuantityMinPrecision adds i to the "counter_quantity_min_precision" field.
func (tpuo *TradingPairUpdateOne) AddCounterQuantityMinPrecision(i int) *TradingPairUpdateOne {
	tpuo.mutation.AddCounterQuantityMinPrecision(i)
	return tpuo
}

// ClearCounterQuantityMinPrecision clears the value of the "counter_quantity_min_precision" field.
func (tpuo *TradingPairUpdateOne) ClearCounterQuantityMinPrecision() *TradingPairUpdateOne {
	tpuo.mutation.ClearCounterQuantityMinPrecision()
	return tpuo
}

// SetCounterQuantityMaxPrecision sets the "counter_quantity_max_precision" field.
func (tpuo *TradingPairUpdateOne) SetCounterQuantityMaxPrecision(i int) *TradingPairUpdateOne {
	tpuo.mutation.ResetCounterQuantityMaxPrecision()
	tpuo.mutation.SetCounterQuantityMaxPrecision(i)
	return tpuo
}

// SetNillableCounterQuantityMaxPrecision sets the "counter_quantity_max_precision" field if the given value is not nil.
func (tpuo *TradingPairUpdateOne) SetNillableCounterQuantityMaxPrecision(i *int) *TradingPairUpdateOne {
	if i != nil {
		tpuo.SetCounterQuantityMaxPrecision(*i)
	}
	return tpuo
}

// AddCounterQuantityMaxPrecision adds i to the "counter_quantity_max_precision" field.
func (tpuo *TradingPairUpdateOne) AddCounterQuantityMaxPrecision(i int) *TradingPairUpdateOne {
	tpuo.mutation.AddCounterQuantityMaxPrecision(i)
	return tpuo
}

// ClearCounterQuantityMaxPrecision clears the value of the "counter_quantity_max_precision" field.
func (tpuo *TradingPairUpdateOne) ClearCounterQuantityMaxPrecision() *TradingPairUpdateOne {
	tpuo.mutation.ClearCounterQuantityMaxPrecision()
	return tpuo
}

// SetVenueID sets the "venue" edge to the Venue entity by ID.
func (tpuo *TradingPairUpdateOne) SetVenueID(id int) *TradingPairUpdateOne {
	tpuo.mutation.SetVenueID(id)
	return tpuo
}

// SetVenue sets the "venue" edge to the Venue entity.
func (tpuo *TradingPairUpdateOne) SetVenue(v *Venue) *TradingPairUpdateOne {
	return tpuo.SetVenueID(v.ID)
}

// SetBaseID sets the "base" edge to the Currency entity by ID.
func (tpuo *TradingPairUpdateOne) SetBaseID(id int) *TradingPairUpdateOne {
	tpuo.mutation.SetBaseID(id)
	return tpuo
}

// SetBase sets the "base" edge to the Currency entity.
func (tpuo *TradingPairUpdateOne) SetBase(c *Currency) *TradingPairUpdateOne {
	return tpuo.SetBaseID(c.ID)
}

// SetCounterID sets the "counter" edge to the Currency entity by ID.
func (tpuo *TradingPairUpdateOne) SetCounterID(id int) *TradingPairUpdateOne {
	tpuo.mutation.SetCounterID(id)
	return tpuo
}

// SetCounter sets the "counter" edge to the Currency entity.
func (tpuo *TradingPairUpdateOne) SetCounter(c *Currency) *TradingPairUpdateOne {
	return tpuo.SetCounterID(c.ID)
}

// AddMarketIDs adds the "market" edge to the Market entity by IDs.
func (tpuo *TradingPairUpdateOne) AddMarketIDs(ids ...int) *TradingPairUpdateOne {
	tpuo.mutation.AddMarketIDs(ids...)
	return tpuo
}

// AddMarket adds the "market" edges to the Market entity.
func (tpuo *TradingPairUpdateOne) AddMarket(m ...*Market) *TradingPairUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tpuo.AddMarketIDs(ids...)
}

// Mutation returns the TradingPairMutation object of the builder.
func (tpuo *TradingPairUpdateOne) Mutation() *TradingPairMutation {
	return tpuo.mutation
}

// ClearVenue clears the "venue" edge to the Venue entity.
func (tpuo *TradingPairUpdateOne) ClearVenue() *TradingPairUpdateOne {
	tpuo.mutation.ClearVenue()
	return tpuo
}

// ClearBase clears the "base" edge to the Currency entity.
func (tpuo *TradingPairUpdateOne) ClearBase() *TradingPairUpdateOne {
	tpuo.mutation.ClearBase()
	return tpuo
}

// ClearCounter clears the "counter" edge to the Currency entity.
func (tpuo *TradingPairUpdateOne) ClearCounter() *TradingPairUpdateOne {
	tpuo.mutation.ClearCounter()
	return tpuo
}

// ClearMarket clears all "market" edges to the Market entity.
func (tpuo *TradingPairUpdateOne) ClearMarket() *TradingPairUpdateOne {
	tpuo.mutation.ClearMarket()
	return tpuo
}

// RemoveMarketIDs removes the "market" edge to Market entities by IDs.
func (tpuo *TradingPairUpdateOne) RemoveMarketIDs(ids ...int) *TradingPairUpdateOne {
	tpuo.mutation.RemoveMarketIDs(ids...)
	return tpuo
}

// RemoveMarket removes "market" edges to Market entities.
func (tpuo *TradingPairUpdateOne) RemoveMarket(m ...*Market) *TradingPairUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tpuo.RemoveMarketIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tpuo *TradingPairUpdateOne) Select(field string, fields ...string) *TradingPairUpdateOne {
	tpuo.fields = append([]string{field}, fields...)
	return tpuo
}

// Save executes the query and returns the updated TradingPair entity.
func (tpuo *TradingPairUpdateOne) Save(ctx context.Context) (*TradingPair, error) {
	var (
		err  error
		node *TradingPair
	)
	if len(tpuo.hooks) == 0 {
		if err = tpuo.check(); err != nil {
			return nil, err
		}
		node, err = tpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TradingPairMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tpuo.check(); err != nil {
				return nil, err
			}
			tpuo.mutation = mutation
			node, err = tpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tpuo.hooks) - 1; i >= 0; i-- {
			if tpuo.hooks[i] == nil {
				return nil, fmt.Errorf("entities: uninitialized hook (forgotten import entities/runtime?)")
			}
			mut = tpuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tpuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TradingPair)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TradingPairMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpuo *TradingPairUpdateOne) SaveX(ctx context.Context) *TradingPair {
	node, err := tpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tpuo *TradingPairUpdateOne) Exec(ctx context.Context) error {
	_, err := tpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpuo *TradingPairUpdateOne) ExecX(ctx context.Context) {
	if err := tpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpuo *TradingPairUpdateOne) check() error {
	if _, ok := tpuo.mutation.VenueID(); tpuo.mutation.VenueCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "TradingPair.venue"`)
	}
	if _, ok := tpuo.mutation.BaseID(); tpuo.mutation.BaseCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "TradingPair.base"`)
	}
	if _, ok := tpuo.mutation.CounterID(); tpuo.mutation.CounterCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "TradingPair.counter"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tpuo *TradingPairUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TradingPairUpdateOne {
	tpuo.modifiers = append(tpuo.modifiers, modifiers...)
	return tpuo
}

func (tpuo *TradingPairUpdateOne) sqlSave(ctx context.Context) (_node *TradingPair, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tradingpair.Table,
			Columns: tradingpair.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tradingpair.FieldID,
			},
		},
	}
	id, ok := tpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entities: missing "TradingPair.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tradingpair.FieldID)
		for _, f := range fields {
			if !tradingpair.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
			}
			if f != tradingpair.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpuo.mutation.Symbol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tradingpair.FieldSymbol,
		})
	}
	if value, ok := tpuo.mutation.BasePriceMinPrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBasePriceMinPrecision,
		})
	}
	if value, ok := tpuo.mutation.AddedBasePriceMinPrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBasePriceMinPrecision,
		})
	}
	if tpuo.mutation.BasePriceMinPrecisionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tradingpair.FieldBasePriceMinPrecision,
		})
	}
	if value, ok := tpuo.mutation.BasePriceMaxPrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBasePriceMaxPrecision,
		})
	}
	if value, ok := tpuo.mutation.AddedBasePriceMaxPrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBasePriceMaxPrecision,
		})
	}
	if tpuo.mutation.BasePriceMaxPrecisionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tradingpair.FieldBasePriceMaxPrecision,
		})
	}
	if value, ok := tpuo.mutation.BaseQuantityMinPrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBaseQuantityMinPrecision,
		})
	}
	if value, ok := tpuo.mutation.AddedBaseQuantityMinPrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBaseQuantityMinPrecision,
		})
	}
	if tpuo.mutation.BaseQuantityMinPrecisionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tradingpair.FieldBaseQuantityMinPrecision,
		})
	}
	if value, ok := tpuo.mutation.BaseQuantityMaxPrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBaseQuantityMaxPrecision,
		})
	}
	if value, ok := tpuo.mutation.AddedBaseQuantityMaxPrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBaseQuantityMaxPrecision,
		})
	}
	if tpuo.mutation.BaseQuantityMaxPrecisionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tradingpair.FieldBaseQuantityMaxPrecision,
		})
	}
	if value, ok := tpuo.mutation.CounterPriceMinPrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterPriceMinPrecision,
		})
	}
	if value, ok := tpuo.mutation.AddedCounterPriceMinPrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterPriceMinPrecision,
		})
	}
	if tpuo.mutation.CounterPriceMinPrecisionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tradingpair.FieldCounterPriceMinPrecision,
		})
	}
	if value, ok := tpuo.mutation.CounterPriceMaxPrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterPriceMaxPrecision,
		})
	}
	if value, ok := tpuo.mutation.AddedCounterPriceMaxPrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterPriceMaxPrecision,
		})
	}
	if tpuo.mutation.CounterPriceMaxPrecisionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tradingpair.FieldCounterPriceMaxPrecision,
		})
	}
	if value, ok := tpuo.mutation.CounterQuantityMinPrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterQuantityMinPrecision,
		})
	}
	if value, ok := tpuo.mutation.AddedCounterQuantityMinPrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterQuantityMinPrecision,
		})
	}
	if tpuo.mutation.CounterQuantityMinPrecisionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tradingpair.FieldCounterQuantityMinPrecision,
		})
	}
	if value, ok := tpuo.mutation.CounterQuantityMaxPrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterQuantityMaxPrecision,
		})
	}
	if value, ok := tpuo.mutation.AddedCounterQuantityMaxPrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterQuantityMaxPrecision,
		})
	}
	if tpuo.mutation.CounterQuantityMaxPrecisionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: tradingpair.FieldCounterQuantityMaxPrecision,
		})
	}
	if tpuo.mutation.VenueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.VenueTable,
			Columns: []string{tradingpair.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: venue.FieldID,
				},
			},
		}
		edge.Schema = tpuo.schemaConfig.TradingPair
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.VenueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.VenueTable,
			Columns: []string{tradingpair.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: venue.FieldID,
				},
			},
		}
		edge.Schema = tpuo.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.BaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.BaseTable,
			Columns: []string{tradingpair.BaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: currency.FieldID,
				},
			},
		}
		edge.Schema = tpuo.schemaConfig.TradingPair
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.BaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.BaseTable,
			Columns: []string{tradingpair.BaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: currency.FieldID,
				},
			},
		}
		edge.Schema = tpuo.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.CounterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.CounterTable,
			Columns: []string{tradingpair.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: currency.FieldID,
				},
			},
		}
		edge.Schema = tpuo.schemaConfig.TradingPair
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.CounterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.CounterTable,
			Columns: []string{tradingpair.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: currency.FieldID,
				},
			},
		}
		edge.Schema = tpuo.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.MarketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tradingpair.MarketTable,
			Columns: tradingpair.MarketPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: market.FieldID,
				},
			},
		}
		edge.Schema = tpuo.schemaConfig.MarketTradingPair
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.RemovedMarketIDs(); len(nodes) > 0 && !tpuo.mutation.MarketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tradingpair.MarketTable,
			Columns: tradingpair.MarketPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: market.FieldID,
				},
			},
		}
		edge.Schema = tpuo.schemaConfig.MarketTradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.MarketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tradingpair.MarketTable,
			Columns: tradingpair.MarketPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: market.FieldID,
				},
			},
		}
		edge.Schema = tpuo.schemaConfig.MarketTradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tpuo.schemaConfig.TradingPair
	ctx = internal.NewSchemaConfigContext(ctx, tpuo.schemaConfig)
	_spec.Modifiers = tpuo.modifiers
	_node = &TradingPair{config: tpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tradingpair.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
