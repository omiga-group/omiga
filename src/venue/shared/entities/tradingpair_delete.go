// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omiga-group/omiga/src/venue/shared/entities/internal"
	"github.com/omiga-group/omiga/src/venue/shared/entities/predicate"
	"github.com/omiga-group/omiga/src/venue/shared/entities/tradingpair"
)

// TradingPairDelete is the builder for deleting a TradingPair entity.
type TradingPairDelete struct {
	config
	hooks    []Hook
	mutation *TradingPairMutation
}

// Where appends a list predicates to the TradingPairDelete builder.
func (tpd *TradingPairDelete) Where(ps ...predicate.TradingPair) *TradingPairDelete {
	tpd.mutation.Where(ps...)
	return tpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tpd *TradingPairDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, TradingPairMutation](ctx, tpd.sqlExec, tpd.mutation, tpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tpd *TradingPairDelete) ExecX(ctx context.Context) int {
	n, err := tpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tpd *TradingPairDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: tradingpair.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tradingpair.FieldID,
			},
		},
	}
	_spec.Node.Schema = tpd.schemaConfig.TradingPair
	ctx = internal.NewSchemaConfigContext(ctx, tpd.schemaConfig)
	if ps := tpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tpd.mutation.done = true
	return affected, err
}

// TradingPairDeleteOne is the builder for deleting a single TradingPair entity.
type TradingPairDeleteOne struct {
	tpd *TradingPairDelete
}

// Where appends a list predicates to the TradingPairDelete builder.
func (tpdo *TradingPairDeleteOne) Where(ps ...predicate.TradingPair) *TradingPairDeleteOne {
	tpdo.tpd.mutation.Where(ps...)
	return tpdo
}

// Exec executes the deletion query.
func (tpdo *TradingPairDeleteOne) Exec(ctx context.Context) error {
	n, err := tpdo.tpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{tradingpair.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tpdo *TradingPairDeleteOne) ExecX(ctx context.Context) {
	if err := tpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
