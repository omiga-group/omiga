schema {
  query: Query
  mutation: Mutation
}
scalar Cursor
scalar Time
scalar UUID
type Exchange implements Node {
  id: ID!
}
"A connection to a list of items."
type ExchangeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ExchangeEdge]
  "Total number of exchanges"
  totalCount: Int
}
"An edge in a connection."
type ExchangeEdge {
  "The item at the end of the edge"
  node: Exchange
  "A cursor for use in pagination"
  cursor: Cursor!
}
type Mutation {
  submitOrder(input: SubmitOrderInput!): OrderPayload
  cancelOrder(input: CancelOrderInput!): OrderPayload
}
type Order implements Node {
  id: ID!
}
"A connection to a list of items."
type OrderConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [OrderEdge]
  "Total number of orders"
  totalCount: Int
}
"An edge in a connection."
type OrderEdge {
  "The item at the end of the edge"
  node: Order
  "A cursor for use in pagination"
  cursor: Cursor!
}
type OrderPayload {
  clientMutationId: String
  order: Order
}
"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: Cursor
  "When paginating forwards, the cursor to continue."
  endCursor: Cursor
}
type Query {
  exchange(
    "ID"
    id: ID!
  ): Exchange
  exchanges(
    "Returns the items in the list that come after the specified cursor."
    after: Cursor,
    "Returns the first n items from the list."
    first: Int,
    "Returns the items in the list that come before the specified cursor."
    before: Cursor,
    "Returns the last n items from the list."
    last: Int,where: ExchangeWhereInput  ): ExchangeConnection
  order(
    "ID"
    id: ID!
  ): Order
  orders(
    "Returns the items in the list that come after the specified cursor."
    after: Cursor,
    "Returns the first n items from the list."
    first: Int,
    "Returns the items in the list that come before the specified cursor."
    before: Cursor,
    "Returns the last n items from the list."
    last: Int,where: OrderWhereInput  ): OrderConnection
}
"An object with an ID"
interface Node {
  "The id of the object."
  id: ID
}
enum OrderSide {
  BID
  ASK
}
enum OrderType {
  INSTANT
  MARKET
  LIMIT
  STOP
  TRAILING_STOP
}
enum OutboxStatus {
  PENDING
  SUCCEEDED
  FAILED
}
input CancelOrderInput {
  clientMutationId: String
  id: ID!
}
input CurrencyInput {
  name: String!
  code: String!
  maxPrecision: Int!
  digital: Boolean!
}
input ExchangeInput {
  id: String!
}
"""
ExchangeWhereInput is used for filtering Exchange objects.
Input was generated by ent.
"""
input ExchangeWhereInput {
  not: ExchangeWhereInput
  and: [ExchangeWhereInput!]
  or: [ExchangeWhereInput!]
  "id field predicates"
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
}
input MoneyInput {
  amount: Int!
  scale: Int!
  currency: CurrencyInput!
}
"""
OrderBookWhereInput is used for filtering OrderBook objects.
Input was generated by ent.
"""
input OrderBookWhereInput {
  not: OrderBookWhereInput
  and: [OrderBookWhereInput!]
  or: [OrderBookWhereInput!]
  "id field predicates"
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  "exchange_id field predicates"
  exchangeID: String
  exchangeIDNEQ: String
  exchangeIDIn: [String!]
  exchangeIDNotIn: [String!]
  exchangeIDGT: String
  exchangeIDGTE: String
  exchangeIDLT: String
  exchangeIDLTE: String
  exchangeIDContains: String
  exchangeIDHasPrefix: String
  exchangeIDHasSuffix: String
  exchangeIDEqualFold: String
  exchangeIDContainsFold: String
  "last_updated field predicates"
  lastUpdated: Time
  lastUpdatedNEQ: Time
  lastUpdatedIn: [Time!]
  lastUpdatedNotIn: [Time!]
  lastUpdatedGT: Time
  lastUpdatedGTE: Time
  lastUpdatedLT: Time
  lastUpdatedLTE: Time
}
input OrderDetailsInput {
  baseCurrency: CurrencyInput!
  counterCurrency: CurrencyInput!
  type: OrderType!
  side: OrderSide!
  quantity: MoneyInput!
  price: MoneyInput!
}
"""
OrderWhereInput is used for filtering Order objects.
Input was generated by ent.
"""
input OrderWhereInput {
  not: OrderWhereInput
  and: [OrderWhereInput!]
  or: [OrderWhereInput!]
  "id field predicates"
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
}
"""
OutboxWhereInput is used for filtering Outbox objects.
Input was generated by ent.
"""
input OutboxWhereInput {
  not: OutboxWhereInput
  and: [OutboxWhereInput!]
  or: [OutboxWhereInput!]
  "id field predicates"
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  "timestamp field predicates"
  timestamp: Time
  timestampNEQ: Time
  timestampIn: [Time!]
  timestampNotIn: [Time!]
  timestampGT: Time
  timestampGTE: Time
  timestampLT: Time
  timestampLTE: Time
  "topic field predicates"
  topic: String
  topicNEQ: String
  topicIn: [String!]
  topicNotIn: [String!]
  topicGT: String
  topicGTE: String
  topicLT: String
  topicLTE: String
  topicContains: String
  topicHasPrefix: String
  topicHasSuffix: String
  topicEqualFold: String
  topicContainsFold: String
  "key field predicates"
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyEqualFold: String
  keyContainsFold: String
  "retry_count field predicates"
  retryCount: Int
  retryCountNEQ: Int
  retryCountIn: [Int!]
  retryCountNotIn: [Int!]
  retryCountGT: Int
  retryCountGTE: Int
  retryCountLT: Int
  retryCountLTE: Int
  "status field predicates"
  status: OutboxStatus
  statusNEQ: OutboxStatus
  statusIn: [OutboxStatus!]
  statusNotIn: [OutboxStatus!]
  "last_retry field predicates"
  lastRetry: Time
  lastRetryNEQ: Time
  lastRetryIn: [Time!]
  lastRetryNotIn: [Time!]
  lastRetryGT: Time
  lastRetryGTE: Time
  lastRetryLT: Time
  lastRetryLTE: Time
  lastRetryIsNil: Boolean
  lastRetryNotNil: Boolean
}
input SubmitOrderInput {
  clientMutationId: String
  orderDetails: OrderDetailsInput!
  preferredExchanges: [ExchangeInput!]
}
"Exposes a URL that specifies the behavior of this scalar."
directive @specifiedBy(
    "The URL that specifies the behavior of this scalar."
    url: String!
  ) on SCALAR
