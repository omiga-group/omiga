// Code generated by MockGen. DO NOT EDIT.
// Source: tradingpairs-repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/omiga-group/omiga/src/exchange/shared/models"
)

// MockTradingPairsRepository is a mock of TradingPairsRepository interface.
type MockTradingPairsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTradingPairsRepositoryMockRecorder
}

// MockTradingPairsRepositoryMockRecorder is the mock recorder for MockTradingPairsRepository.
type MockTradingPairsRepositoryMockRecorder struct {
	mock *MockTradingPairsRepository
}

// NewMockTradingPairsRepository creates a new mock instance.
func NewMockTradingPairsRepository(ctrl *gomock.Controller) *MockTradingPairsRepository {
	mock := &MockTradingPairsRepository{ctrl: ctrl}
	mock.recorder = &MockTradingPairsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradingPairsRepository) EXPECT() *MockTradingPairsRepositoryMockRecorder {
	return m.recorder
}

// CreateTradingPairs mocks base method.
func (m *MockTradingPairsRepository) CreateTradingPairs(ctx context.Context, exchangeId string, tradingPairs []models.TradingPairs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTradingPairs", ctx, exchangeId, tradingPairs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTradingPairs indicates an expected call of CreateTradingPairs.
func (mr *MockTradingPairsRepositoryMockRecorder) CreateTradingPairs(ctx, exchangeId, tradingPairs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTradingPairs", reflect.TypeOf((*MockTradingPairsRepository)(nil).CreateTradingPairs), ctx, exchangeId, tradingPairs)
}
