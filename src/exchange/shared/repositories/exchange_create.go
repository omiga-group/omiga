// Code generated by ent, DO NOT EDIT.

package repositories

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/exchange"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/ticker"
)

// ExchangeCreate is the builder for creating a Exchange entity.
type ExchangeCreate struct {
	config
	mutation *ExchangeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetExchangeID sets the "exchange_id" field.
func (ec *ExchangeCreate) SetExchangeID(s string) *ExchangeCreate {
	ec.mutation.SetExchangeID(s)
	return ec
}

// SetName sets the "name" field.
func (ec *ExchangeCreate) SetName(s string) *ExchangeCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableName(s *string) *ExchangeCreate {
	if s != nil {
		ec.SetName(*s)
	}
	return ec
}

// SetYearEstablished sets the "year_established" field.
func (ec *ExchangeCreate) SetYearEstablished(i int) *ExchangeCreate {
	ec.mutation.SetYearEstablished(i)
	return ec
}

// SetNillableYearEstablished sets the "year_established" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableYearEstablished(i *int) *ExchangeCreate {
	if i != nil {
		ec.SetYearEstablished(*i)
	}
	return ec
}

// SetCountry sets the "country" field.
func (ec *ExchangeCreate) SetCountry(s string) *ExchangeCreate {
	ec.mutation.SetCountry(s)
	return ec
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableCountry(s *string) *ExchangeCreate {
	if s != nil {
		ec.SetCountry(*s)
	}
	return ec
}

// SetImage sets the "image" field.
func (ec *ExchangeCreate) SetImage(s string) *ExchangeCreate {
	ec.mutation.SetImage(s)
	return ec
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableImage(s *string) *ExchangeCreate {
	if s != nil {
		ec.SetImage(*s)
	}
	return ec
}

// SetLinks sets the "links" field.
func (ec *ExchangeCreate) SetLinks(m map[string]string) *ExchangeCreate {
	ec.mutation.SetLinks(m)
	return ec
}

// SetHasTradingIncentive sets the "has_trading_incentive" field.
func (ec *ExchangeCreate) SetHasTradingIncentive(b bool) *ExchangeCreate {
	ec.mutation.SetHasTradingIncentive(b)
	return ec
}

// SetNillableHasTradingIncentive sets the "has_trading_incentive" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableHasTradingIncentive(b *bool) *ExchangeCreate {
	if b != nil {
		ec.SetHasTradingIncentive(*b)
	}
	return ec
}

// SetCentralized sets the "centralized" field.
func (ec *ExchangeCreate) SetCentralized(b bool) *ExchangeCreate {
	ec.mutation.SetCentralized(b)
	return ec
}

// SetNillableCentralized sets the "centralized" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableCentralized(b *bool) *ExchangeCreate {
	if b != nil {
		ec.SetCentralized(*b)
	}
	return ec
}

// SetPublicNotice sets the "public_notice" field.
func (ec *ExchangeCreate) SetPublicNotice(s string) *ExchangeCreate {
	ec.mutation.SetPublicNotice(s)
	return ec
}

// SetNillablePublicNotice sets the "public_notice" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillablePublicNotice(s *string) *ExchangeCreate {
	if s != nil {
		ec.SetPublicNotice(*s)
	}
	return ec
}

// SetAlertNotice sets the "alert_notice" field.
func (ec *ExchangeCreate) SetAlertNotice(s string) *ExchangeCreate {
	ec.mutation.SetAlertNotice(s)
	return ec
}

// SetNillableAlertNotice sets the "alert_notice" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableAlertNotice(s *string) *ExchangeCreate {
	if s != nil {
		ec.SetAlertNotice(*s)
	}
	return ec
}

// SetTrustScore sets the "trust_score" field.
func (ec *ExchangeCreate) SetTrustScore(i int) *ExchangeCreate {
	ec.mutation.SetTrustScore(i)
	return ec
}

// SetNillableTrustScore sets the "trust_score" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableTrustScore(i *int) *ExchangeCreate {
	if i != nil {
		ec.SetTrustScore(*i)
	}
	return ec
}

// SetTrustScoreRank sets the "trust_score_rank" field.
func (ec *ExchangeCreate) SetTrustScoreRank(i int) *ExchangeCreate {
	ec.mutation.SetTrustScoreRank(i)
	return ec
}

// SetNillableTrustScoreRank sets the "trust_score_rank" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableTrustScoreRank(i *int) *ExchangeCreate {
	if i != nil {
		ec.SetTrustScoreRank(*i)
	}
	return ec
}

// SetTradeVolume24hBtc sets the "trade_volume_24h_btc" field.
func (ec *ExchangeCreate) SetTradeVolume24hBtc(f float64) *ExchangeCreate {
	ec.mutation.SetTradeVolume24hBtc(f)
	return ec
}

// SetNillableTradeVolume24hBtc sets the "trade_volume_24h_btc" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableTradeVolume24hBtc(f *float64) *ExchangeCreate {
	if f != nil {
		ec.SetTradeVolume24hBtc(*f)
	}
	return ec
}

// SetTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field.
func (ec *ExchangeCreate) SetTradeVolume24hBtcNormalized(f float64) *ExchangeCreate {
	ec.mutation.SetTradeVolume24hBtcNormalized(f)
	return ec
}

// SetNillableTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableTradeVolume24hBtcNormalized(f *float64) *ExchangeCreate {
	if f != nil {
		ec.SetTradeVolume24hBtcNormalized(*f)
	}
	return ec
}

// SetMakerFee sets the "maker_fee" field.
func (ec *ExchangeCreate) SetMakerFee(f float64) *ExchangeCreate {
	ec.mutation.SetMakerFee(f)
	return ec
}

// SetNillableMakerFee sets the "maker_fee" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableMakerFee(f *float64) *ExchangeCreate {
	if f != nil {
		ec.SetMakerFee(*f)
	}
	return ec
}

// SetTakerFee sets the "taker_fee" field.
func (ec *ExchangeCreate) SetTakerFee(f float64) *ExchangeCreate {
	ec.mutation.SetTakerFee(f)
	return ec
}

// SetNillableTakerFee sets the "taker_fee" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableTakerFee(f *float64) *ExchangeCreate {
	if f != nil {
		ec.SetTakerFee(*f)
	}
	return ec
}

// SetSpreadFee sets the "spread_fee" field.
func (ec *ExchangeCreate) SetSpreadFee(b bool) *ExchangeCreate {
	ec.mutation.SetSpreadFee(b)
	return ec
}

// SetNillableSpreadFee sets the "spread_fee" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableSpreadFee(b *bool) *ExchangeCreate {
	if b != nil {
		ec.SetSpreadFee(*b)
	}
	return ec
}

// SetSupportAPI sets the "support_api" field.
func (ec *ExchangeCreate) SetSupportAPI(b bool) *ExchangeCreate {
	ec.mutation.SetSupportAPI(b)
	return ec
}

// SetNillableSupportAPI sets the "support_api" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableSupportAPI(b *bool) *ExchangeCreate {
	if b != nil {
		ec.SetSupportAPI(*b)
	}
	return ec
}

// AddTickerIDs adds the "ticker" edge to the Ticker entity by IDs.
func (ec *ExchangeCreate) AddTickerIDs(ids ...int) *ExchangeCreate {
	ec.mutation.AddTickerIDs(ids...)
	return ec
}

// AddTicker adds the "ticker" edges to the Ticker entity.
func (ec *ExchangeCreate) AddTicker(t ...*Ticker) *ExchangeCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ec.AddTickerIDs(ids...)
}

// Mutation returns the ExchangeMutation object of the builder.
func (ec *ExchangeCreate) Mutation() *ExchangeMutation {
	return ec.mutation
}

// Save creates the Exchange in the database.
func (ec *ExchangeCreate) Save(ctx context.Context) (*Exchange, error) {
	var (
		err  error
		node *Exchange
	)
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExchangeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("repositories: uninitialized hook (forgotten import repositories/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Exchange)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ExchangeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExchangeCreate) SaveX(ctx context.Context) *Exchange {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExchangeCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExchangeCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExchangeCreate) check() error {
	if _, ok := ec.mutation.ExchangeID(); !ok {
		return &ValidationError{Name: "exchange_id", err: errors.New(`repositories: missing required field "Exchange.exchange_id"`)}
	}
	return nil
}

func (ec *ExchangeCreate) sqlSave(ctx context.Context) (*Exchange, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ec *ExchangeCreate) createSpec() (*Exchange, *sqlgraph.CreateSpec) {
	var (
		_node = &Exchange{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: exchange.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: exchange.FieldID,
			},
		}
	)
	_spec.Schema = ec.schemaConfig.Exchange
	_spec.OnConflict = ec.conflict
	if value, ok := ec.mutation.ExchangeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldExchangeID,
		})
		_node.ExchangeID = value
	}
	if value, ok := ec.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ec.mutation.YearEstablished(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exchange.FieldYearEstablished,
		})
		_node.YearEstablished = value
	}
	if value, ok := ec.mutation.Country(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldCountry,
		})
		_node.Country = value
	}
	if value, ok := ec.mutation.Image(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldImage,
		})
		_node.Image = value
	}
	if value, ok := ec.mutation.Links(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: exchange.FieldLinks,
		})
		_node.Links = value
	}
	if value, ok := ec.mutation.HasTradingIncentive(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: exchange.FieldHasTradingIncentive,
		})
		_node.HasTradingIncentive = value
	}
	if value, ok := ec.mutation.Centralized(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: exchange.FieldCentralized,
		})
		_node.Centralized = value
	}
	if value, ok := ec.mutation.PublicNotice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldPublicNotice,
		})
		_node.PublicNotice = value
	}
	if value, ok := ec.mutation.AlertNotice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldAlertNotice,
		})
		_node.AlertNotice = value
	}
	if value, ok := ec.mutation.TrustScore(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exchange.FieldTrustScore,
		})
		_node.TrustScore = value
	}
	if value, ok := ec.mutation.TrustScoreRank(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exchange.FieldTrustScoreRank,
		})
		_node.TrustScoreRank = value
	}
	if value, ok := ec.mutation.TradeVolume24hBtc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldTradeVolume24hBtc,
		})
		_node.TradeVolume24hBtc = value
	}
	if value, ok := ec.mutation.TradeVolume24hBtcNormalized(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldTradeVolume24hBtcNormalized,
		})
		_node.TradeVolume24hBtcNormalized = value
	}
	if value, ok := ec.mutation.MakerFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldMakerFee,
		})
		_node.MakerFee = value
	}
	if value, ok := ec.mutation.TakerFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldTakerFee,
		})
		_node.TakerFee = value
	}
	if value, ok := ec.mutation.SpreadFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: exchange.FieldSpreadFee,
		})
		_node.SpreadFee = value
	}
	if value, ok := ec.mutation.SupportAPI(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: exchange.FieldSupportAPI,
		})
		_node.SupportAPI = value
	}
	if nodes := ec.mutation.TickerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TickerTable,
			Columns: []string{exchange.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticker.FieldID,
				},
			},
		}
		edge.Schema = ec.schemaConfig.Ticker
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Exchange.Create().
//		SetExchangeID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExchangeUpsert) {
//			SetExchangeID(v+v).
//		}).
//		Exec(ctx)
func (ec *ExchangeCreate) OnConflict(opts ...sql.ConflictOption) *ExchangeUpsertOne {
	ec.conflict = opts
	return &ExchangeUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Exchange.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *ExchangeCreate) OnConflictColumns(columns ...string) *ExchangeUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &ExchangeUpsertOne{
		create: ec,
	}
}

type (
	// ExchangeUpsertOne is the builder for "upsert"-ing
	//  one Exchange node.
	ExchangeUpsertOne struct {
		create *ExchangeCreate
	}

	// ExchangeUpsert is the "OnConflict" setter.
	ExchangeUpsert struct {
		*sql.UpdateSet
	}
)

// SetExchangeID sets the "exchange_id" field.
func (u *ExchangeUpsert) SetExchangeID(v string) *ExchangeUpsert {
	u.Set(exchange.FieldExchangeID, v)
	return u
}

// UpdateExchangeID sets the "exchange_id" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateExchangeID() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldExchangeID)
	return u
}

// SetName sets the "name" field.
func (u *ExchangeUpsert) SetName(v string) *ExchangeUpsert {
	u.Set(exchange.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateName() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *ExchangeUpsert) ClearName() *ExchangeUpsert {
	u.SetNull(exchange.FieldName)
	return u
}

// SetYearEstablished sets the "year_established" field.
func (u *ExchangeUpsert) SetYearEstablished(v int) *ExchangeUpsert {
	u.Set(exchange.FieldYearEstablished, v)
	return u
}

// UpdateYearEstablished sets the "year_established" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateYearEstablished() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldYearEstablished)
	return u
}

// AddYearEstablished adds v to the "year_established" field.
func (u *ExchangeUpsert) AddYearEstablished(v int) *ExchangeUpsert {
	u.Add(exchange.FieldYearEstablished, v)
	return u
}

// ClearYearEstablished clears the value of the "year_established" field.
func (u *ExchangeUpsert) ClearYearEstablished() *ExchangeUpsert {
	u.SetNull(exchange.FieldYearEstablished)
	return u
}

// SetCountry sets the "country" field.
func (u *ExchangeUpsert) SetCountry(v string) *ExchangeUpsert {
	u.Set(exchange.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateCountry() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldCountry)
	return u
}

// ClearCountry clears the value of the "country" field.
func (u *ExchangeUpsert) ClearCountry() *ExchangeUpsert {
	u.SetNull(exchange.FieldCountry)
	return u
}

// SetImage sets the "image" field.
func (u *ExchangeUpsert) SetImage(v string) *ExchangeUpsert {
	u.Set(exchange.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateImage() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldImage)
	return u
}

// ClearImage clears the value of the "image" field.
func (u *ExchangeUpsert) ClearImage() *ExchangeUpsert {
	u.SetNull(exchange.FieldImage)
	return u
}

// SetLinks sets the "links" field.
func (u *ExchangeUpsert) SetLinks(v map[string]string) *ExchangeUpsert {
	u.Set(exchange.FieldLinks, v)
	return u
}

// UpdateLinks sets the "links" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateLinks() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldLinks)
	return u
}

// ClearLinks clears the value of the "links" field.
func (u *ExchangeUpsert) ClearLinks() *ExchangeUpsert {
	u.SetNull(exchange.FieldLinks)
	return u
}

// SetHasTradingIncentive sets the "has_trading_incentive" field.
func (u *ExchangeUpsert) SetHasTradingIncentive(v bool) *ExchangeUpsert {
	u.Set(exchange.FieldHasTradingIncentive, v)
	return u
}

// UpdateHasTradingIncentive sets the "has_trading_incentive" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateHasTradingIncentive() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldHasTradingIncentive)
	return u
}

// ClearHasTradingIncentive clears the value of the "has_trading_incentive" field.
func (u *ExchangeUpsert) ClearHasTradingIncentive() *ExchangeUpsert {
	u.SetNull(exchange.FieldHasTradingIncentive)
	return u
}

// SetCentralized sets the "centralized" field.
func (u *ExchangeUpsert) SetCentralized(v bool) *ExchangeUpsert {
	u.Set(exchange.FieldCentralized, v)
	return u
}

// UpdateCentralized sets the "centralized" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateCentralized() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldCentralized)
	return u
}

// ClearCentralized clears the value of the "centralized" field.
func (u *ExchangeUpsert) ClearCentralized() *ExchangeUpsert {
	u.SetNull(exchange.FieldCentralized)
	return u
}

// SetPublicNotice sets the "public_notice" field.
func (u *ExchangeUpsert) SetPublicNotice(v string) *ExchangeUpsert {
	u.Set(exchange.FieldPublicNotice, v)
	return u
}

// UpdatePublicNotice sets the "public_notice" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdatePublicNotice() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldPublicNotice)
	return u
}

// ClearPublicNotice clears the value of the "public_notice" field.
func (u *ExchangeUpsert) ClearPublicNotice() *ExchangeUpsert {
	u.SetNull(exchange.FieldPublicNotice)
	return u
}

// SetAlertNotice sets the "alert_notice" field.
func (u *ExchangeUpsert) SetAlertNotice(v string) *ExchangeUpsert {
	u.Set(exchange.FieldAlertNotice, v)
	return u
}

// UpdateAlertNotice sets the "alert_notice" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateAlertNotice() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldAlertNotice)
	return u
}

// ClearAlertNotice clears the value of the "alert_notice" field.
func (u *ExchangeUpsert) ClearAlertNotice() *ExchangeUpsert {
	u.SetNull(exchange.FieldAlertNotice)
	return u
}

// SetTrustScore sets the "trust_score" field.
func (u *ExchangeUpsert) SetTrustScore(v int) *ExchangeUpsert {
	u.Set(exchange.FieldTrustScore, v)
	return u
}

// UpdateTrustScore sets the "trust_score" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateTrustScore() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldTrustScore)
	return u
}

// AddTrustScore adds v to the "trust_score" field.
func (u *ExchangeUpsert) AddTrustScore(v int) *ExchangeUpsert {
	u.Add(exchange.FieldTrustScore, v)
	return u
}

// ClearTrustScore clears the value of the "trust_score" field.
func (u *ExchangeUpsert) ClearTrustScore() *ExchangeUpsert {
	u.SetNull(exchange.FieldTrustScore)
	return u
}

// SetTrustScoreRank sets the "trust_score_rank" field.
func (u *ExchangeUpsert) SetTrustScoreRank(v int) *ExchangeUpsert {
	u.Set(exchange.FieldTrustScoreRank, v)
	return u
}

// UpdateTrustScoreRank sets the "trust_score_rank" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateTrustScoreRank() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldTrustScoreRank)
	return u
}

// AddTrustScoreRank adds v to the "trust_score_rank" field.
func (u *ExchangeUpsert) AddTrustScoreRank(v int) *ExchangeUpsert {
	u.Add(exchange.FieldTrustScoreRank, v)
	return u
}

// ClearTrustScoreRank clears the value of the "trust_score_rank" field.
func (u *ExchangeUpsert) ClearTrustScoreRank() *ExchangeUpsert {
	u.SetNull(exchange.FieldTrustScoreRank)
	return u
}

// SetTradeVolume24hBtc sets the "trade_volume_24h_btc" field.
func (u *ExchangeUpsert) SetTradeVolume24hBtc(v float64) *ExchangeUpsert {
	u.Set(exchange.FieldTradeVolume24hBtc, v)
	return u
}

// UpdateTradeVolume24hBtc sets the "trade_volume_24h_btc" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateTradeVolume24hBtc() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldTradeVolume24hBtc)
	return u
}

// AddTradeVolume24hBtc adds v to the "trade_volume_24h_btc" field.
func (u *ExchangeUpsert) AddTradeVolume24hBtc(v float64) *ExchangeUpsert {
	u.Add(exchange.FieldTradeVolume24hBtc, v)
	return u
}

// ClearTradeVolume24hBtc clears the value of the "trade_volume_24h_btc" field.
func (u *ExchangeUpsert) ClearTradeVolume24hBtc() *ExchangeUpsert {
	u.SetNull(exchange.FieldTradeVolume24hBtc)
	return u
}

// SetTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field.
func (u *ExchangeUpsert) SetTradeVolume24hBtcNormalized(v float64) *ExchangeUpsert {
	u.Set(exchange.FieldTradeVolume24hBtcNormalized, v)
	return u
}

// UpdateTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateTradeVolume24hBtcNormalized() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldTradeVolume24hBtcNormalized)
	return u
}

// AddTradeVolume24hBtcNormalized adds v to the "trade_volume_24h_btc_normalized" field.
func (u *ExchangeUpsert) AddTradeVolume24hBtcNormalized(v float64) *ExchangeUpsert {
	u.Add(exchange.FieldTradeVolume24hBtcNormalized, v)
	return u
}

// ClearTradeVolume24hBtcNormalized clears the value of the "trade_volume_24h_btc_normalized" field.
func (u *ExchangeUpsert) ClearTradeVolume24hBtcNormalized() *ExchangeUpsert {
	u.SetNull(exchange.FieldTradeVolume24hBtcNormalized)
	return u
}

// SetMakerFee sets the "maker_fee" field.
func (u *ExchangeUpsert) SetMakerFee(v float64) *ExchangeUpsert {
	u.Set(exchange.FieldMakerFee, v)
	return u
}

// UpdateMakerFee sets the "maker_fee" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateMakerFee() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldMakerFee)
	return u
}

// AddMakerFee adds v to the "maker_fee" field.
func (u *ExchangeUpsert) AddMakerFee(v float64) *ExchangeUpsert {
	u.Add(exchange.FieldMakerFee, v)
	return u
}

// ClearMakerFee clears the value of the "maker_fee" field.
func (u *ExchangeUpsert) ClearMakerFee() *ExchangeUpsert {
	u.SetNull(exchange.FieldMakerFee)
	return u
}

// SetTakerFee sets the "taker_fee" field.
func (u *ExchangeUpsert) SetTakerFee(v float64) *ExchangeUpsert {
	u.Set(exchange.FieldTakerFee, v)
	return u
}

// UpdateTakerFee sets the "taker_fee" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateTakerFee() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldTakerFee)
	return u
}

// AddTakerFee adds v to the "taker_fee" field.
func (u *ExchangeUpsert) AddTakerFee(v float64) *ExchangeUpsert {
	u.Add(exchange.FieldTakerFee, v)
	return u
}

// ClearTakerFee clears the value of the "taker_fee" field.
func (u *ExchangeUpsert) ClearTakerFee() *ExchangeUpsert {
	u.SetNull(exchange.FieldTakerFee)
	return u
}

// SetSpreadFee sets the "spread_fee" field.
func (u *ExchangeUpsert) SetSpreadFee(v bool) *ExchangeUpsert {
	u.Set(exchange.FieldSpreadFee, v)
	return u
}

// UpdateSpreadFee sets the "spread_fee" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateSpreadFee() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldSpreadFee)
	return u
}

// ClearSpreadFee clears the value of the "spread_fee" field.
func (u *ExchangeUpsert) ClearSpreadFee() *ExchangeUpsert {
	u.SetNull(exchange.FieldSpreadFee)
	return u
}

// SetSupportAPI sets the "support_api" field.
func (u *ExchangeUpsert) SetSupportAPI(v bool) *ExchangeUpsert {
	u.Set(exchange.FieldSupportAPI, v)
	return u
}

// UpdateSupportAPI sets the "support_api" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateSupportAPI() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldSupportAPI)
	return u
}

// ClearSupportAPI clears the value of the "support_api" field.
func (u *ExchangeUpsert) ClearSupportAPI() *ExchangeUpsert {
	u.SetNull(exchange.FieldSupportAPI)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Exchange.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ExchangeUpsertOne) UpdateNewValues() *ExchangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Exchange.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ExchangeUpsertOne) Ignore() *ExchangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExchangeUpsertOne) DoNothing() *ExchangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExchangeCreate.OnConflict
// documentation for more info.
func (u *ExchangeUpsertOne) Update(set func(*ExchangeUpsert)) *ExchangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExchangeUpsert{UpdateSet: update})
	}))
	return u
}

// SetExchangeID sets the "exchange_id" field.
func (u *ExchangeUpsertOne) SetExchangeID(v string) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetExchangeID(v)
	})
}

// UpdateExchangeID sets the "exchange_id" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateExchangeID() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateExchangeID()
	})
}

// SetName sets the "name" field.
func (u *ExchangeUpsertOne) SetName(v string) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateName() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *ExchangeUpsertOne) ClearName() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearName()
	})
}

// SetYearEstablished sets the "year_established" field.
func (u *ExchangeUpsertOne) SetYearEstablished(v int) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetYearEstablished(v)
	})
}

// AddYearEstablished adds v to the "year_established" field.
func (u *ExchangeUpsertOne) AddYearEstablished(v int) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.AddYearEstablished(v)
	})
}

// UpdateYearEstablished sets the "year_established" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateYearEstablished() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateYearEstablished()
	})
}

// ClearYearEstablished clears the value of the "year_established" field.
func (u *ExchangeUpsertOne) ClearYearEstablished() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearYearEstablished()
	})
}

// SetCountry sets the "country" field.
func (u *ExchangeUpsertOne) SetCountry(v string) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateCountry() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *ExchangeUpsertOne) ClearCountry() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearCountry()
	})
}

// SetImage sets the "image" field.
func (u *ExchangeUpsertOne) SetImage(v string) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateImage() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateImage()
	})
}

// ClearImage clears the value of the "image" field.
func (u *ExchangeUpsertOne) ClearImage() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearImage()
	})
}

// SetLinks sets the "links" field.
func (u *ExchangeUpsertOne) SetLinks(v map[string]string) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetLinks(v)
	})
}

// UpdateLinks sets the "links" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateLinks() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateLinks()
	})
}

// ClearLinks clears the value of the "links" field.
func (u *ExchangeUpsertOne) ClearLinks() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearLinks()
	})
}

// SetHasTradingIncentive sets the "has_trading_incentive" field.
func (u *ExchangeUpsertOne) SetHasTradingIncentive(v bool) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetHasTradingIncentive(v)
	})
}

// UpdateHasTradingIncentive sets the "has_trading_incentive" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateHasTradingIncentive() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateHasTradingIncentive()
	})
}

// ClearHasTradingIncentive clears the value of the "has_trading_incentive" field.
func (u *ExchangeUpsertOne) ClearHasTradingIncentive() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearHasTradingIncentive()
	})
}

// SetCentralized sets the "centralized" field.
func (u *ExchangeUpsertOne) SetCentralized(v bool) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetCentralized(v)
	})
}

// UpdateCentralized sets the "centralized" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateCentralized() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateCentralized()
	})
}

// ClearCentralized clears the value of the "centralized" field.
func (u *ExchangeUpsertOne) ClearCentralized() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearCentralized()
	})
}

// SetPublicNotice sets the "public_notice" field.
func (u *ExchangeUpsertOne) SetPublicNotice(v string) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetPublicNotice(v)
	})
}

// UpdatePublicNotice sets the "public_notice" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdatePublicNotice() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdatePublicNotice()
	})
}

// ClearPublicNotice clears the value of the "public_notice" field.
func (u *ExchangeUpsertOne) ClearPublicNotice() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearPublicNotice()
	})
}

// SetAlertNotice sets the "alert_notice" field.
func (u *ExchangeUpsertOne) SetAlertNotice(v string) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetAlertNotice(v)
	})
}

// UpdateAlertNotice sets the "alert_notice" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateAlertNotice() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateAlertNotice()
	})
}

// ClearAlertNotice clears the value of the "alert_notice" field.
func (u *ExchangeUpsertOne) ClearAlertNotice() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearAlertNotice()
	})
}

// SetTrustScore sets the "trust_score" field.
func (u *ExchangeUpsertOne) SetTrustScore(v int) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetTrustScore(v)
	})
}

// AddTrustScore adds v to the "trust_score" field.
func (u *ExchangeUpsertOne) AddTrustScore(v int) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.AddTrustScore(v)
	})
}

// UpdateTrustScore sets the "trust_score" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateTrustScore() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateTrustScore()
	})
}

// ClearTrustScore clears the value of the "trust_score" field.
func (u *ExchangeUpsertOne) ClearTrustScore() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearTrustScore()
	})
}

// SetTrustScoreRank sets the "trust_score_rank" field.
func (u *ExchangeUpsertOne) SetTrustScoreRank(v int) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetTrustScoreRank(v)
	})
}

// AddTrustScoreRank adds v to the "trust_score_rank" field.
func (u *ExchangeUpsertOne) AddTrustScoreRank(v int) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.AddTrustScoreRank(v)
	})
}

// UpdateTrustScoreRank sets the "trust_score_rank" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateTrustScoreRank() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateTrustScoreRank()
	})
}

// ClearTrustScoreRank clears the value of the "trust_score_rank" field.
func (u *ExchangeUpsertOne) ClearTrustScoreRank() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearTrustScoreRank()
	})
}

// SetTradeVolume24hBtc sets the "trade_volume_24h_btc" field.
func (u *ExchangeUpsertOne) SetTradeVolume24hBtc(v float64) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetTradeVolume24hBtc(v)
	})
}

// AddTradeVolume24hBtc adds v to the "trade_volume_24h_btc" field.
func (u *ExchangeUpsertOne) AddTradeVolume24hBtc(v float64) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.AddTradeVolume24hBtc(v)
	})
}

// UpdateTradeVolume24hBtc sets the "trade_volume_24h_btc" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateTradeVolume24hBtc() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateTradeVolume24hBtc()
	})
}

// ClearTradeVolume24hBtc clears the value of the "trade_volume_24h_btc" field.
func (u *ExchangeUpsertOne) ClearTradeVolume24hBtc() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearTradeVolume24hBtc()
	})
}

// SetTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field.
func (u *ExchangeUpsertOne) SetTradeVolume24hBtcNormalized(v float64) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetTradeVolume24hBtcNormalized(v)
	})
}

// AddTradeVolume24hBtcNormalized adds v to the "trade_volume_24h_btc_normalized" field.
func (u *ExchangeUpsertOne) AddTradeVolume24hBtcNormalized(v float64) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.AddTradeVolume24hBtcNormalized(v)
	})
}

// UpdateTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateTradeVolume24hBtcNormalized() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateTradeVolume24hBtcNormalized()
	})
}

// ClearTradeVolume24hBtcNormalized clears the value of the "trade_volume_24h_btc_normalized" field.
func (u *ExchangeUpsertOne) ClearTradeVolume24hBtcNormalized() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearTradeVolume24hBtcNormalized()
	})
}

// SetMakerFee sets the "maker_fee" field.
func (u *ExchangeUpsertOne) SetMakerFee(v float64) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetMakerFee(v)
	})
}

// AddMakerFee adds v to the "maker_fee" field.
func (u *ExchangeUpsertOne) AddMakerFee(v float64) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.AddMakerFee(v)
	})
}

// UpdateMakerFee sets the "maker_fee" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateMakerFee() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateMakerFee()
	})
}

// ClearMakerFee clears the value of the "maker_fee" field.
func (u *ExchangeUpsertOne) ClearMakerFee() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearMakerFee()
	})
}

// SetTakerFee sets the "taker_fee" field.
func (u *ExchangeUpsertOne) SetTakerFee(v float64) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetTakerFee(v)
	})
}

// AddTakerFee adds v to the "taker_fee" field.
func (u *ExchangeUpsertOne) AddTakerFee(v float64) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.AddTakerFee(v)
	})
}

// UpdateTakerFee sets the "taker_fee" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateTakerFee() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateTakerFee()
	})
}

// ClearTakerFee clears the value of the "taker_fee" field.
func (u *ExchangeUpsertOne) ClearTakerFee() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearTakerFee()
	})
}

// SetSpreadFee sets the "spread_fee" field.
func (u *ExchangeUpsertOne) SetSpreadFee(v bool) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetSpreadFee(v)
	})
}

// UpdateSpreadFee sets the "spread_fee" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateSpreadFee() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateSpreadFee()
	})
}

// ClearSpreadFee clears the value of the "spread_fee" field.
func (u *ExchangeUpsertOne) ClearSpreadFee() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearSpreadFee()
	})
}

// SetSupportAPI sets the "support_api" field.
func (u *ExchangeUpsertOne) SetSupportAPI(v bool) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetSupportAPI(v)
	})
}

// UpdateSupportAPI sets the "support_api" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateSupportAPI() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateSupportAPI()
	})
}

// ClearSupportAPI clears the value of the "support_api" field.
func (u *ExchangeUpsertOne) ClearSupportAPI() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearSupportAPI()
	})
}

// Exec executes the query.
func (u *ExchangeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("repositories: missing options for ExchangeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExchangeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ExchangeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ExchangeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ExchangeCreateBulk is the builder for creating many Exchange entities in bulk.
type ExchangeCreateBulk struct {
	config
	builders []*ExchangeCreate
	conflict []sql.ConflictOption
}

// Save creates the Exchange entities in the database.
func (ecb *ExchangeCreateBulk) Save(ctx context.Context) ([]*Exchange, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Exchange, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExchangeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExchangeCreateBulk) SaveX(ctx context.Context) []*Exchange {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExchangeCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExchangeCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Exchange.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExchangeUpsert) {
//			SetExchangeID(v+v).
//		}).
//		Exec(ctx)
func (ecb *ExchangeCreateBulk) OnConflict(opts ...sql.ConflictOption) *ExchangeUpsertBulk {
	ecb.conflict = opts
	return &ExchangeUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Exchange.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *ExchangeCreateBulk) OnConflictColumns(columns ...string) *ExchangeUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &ExchangeUpsertBulk{
		create: ecb,
	}
}

// ExchangeUpsertBulk is the builder for "upsert"-ing
// a bulk of Exchange nodes.
type ExchangeUpsertBulk struct {
	create *ExchangeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Exchange.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ExchangeUpsertBulk) UpdateNewValues() *ExchangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Exchange.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ExchangeUpsertBulk) Ignore() *ExchangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExchangeUpsertBulk) DoNothing() *ExchangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExchangeCreateBulk.OnConflict
// documentation for more info.
func (u *ExchangeUpsertBulk) Update(set func(*ExchangeUpsert)) *ExchangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExchangeUpsert{UpdateSet: update})
	}))
	return u
}

// SetExchangeID sets the "exchange_id" field.
func (u *ExchangeUpsertBulk) SetExchangeID(v string) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetExchangeID(v)
	})
}

// UpdateExchangeID sets the "exchange_id" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateExchangeID() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateExchangeID()
	})
}

// SetName sets the "name" field.
func (u *ExchangeUpsertBulk) SetName(v string) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateName() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *ExchangeUpsertBulk) ClearName() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearName()
	})
}

// SetYearEstablished sets the "year_established" field.
func (u *ExchangeUpsertBulk) SetYearEstablished(v int) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetYearEstablished(v)
	})
}

// AddYearEstablished adds v to the "year_established" field.
func (u *ExchangeUpsertBulk) AddYearEstablished(v int) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.AddYearEstablished(v)
	})
}

// UpdateYearEstablished sets the "year_established" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateYearEstablished() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateYearEstablished()
	})
}

// ClearYearEstablished clears the value of the "year_established" field.
func (u *ExchangeUpsertBulk) ClearYearEstablished() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearYearEstablished()
	})
}

// SetCountry sets the "country" field.
func (u *ExchangeUpsertBulk) SetCountry(v string) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateCountry() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *ExchangeUpsertBulk) ClearCountry() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearCountry()
	})
}

// SetImage sets the "image" field.
func (u *ExchangeUpsertBulk) SetImage(v string) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateImage() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateImage()
	})
}

// ClearImage clears the value of the "image" field.
func (u *ExchangeUpsertBulk) ClearImage() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearImage()
	})
}

// SetLinks sets the "links" field.
func (u *ExchangeUpsertBulk) SetLinks(v map[string]string) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetLinks(v)
	})
}

// UpdateLinks sets the "links" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateLinks() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateLinks()
	})
}

// ClearLinks clears the value of the "links" field.
func (u *ExchangeUpsertBulk) ClearLinks() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearLinks()
	})
}

// SetHasTradingIncentive sets the "has_trading_incentive" field.
func (u *ExchangeUpsertBulk) SetHasTradingIncentive(v bool) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetHasTradingIncentive(v)
	})
}

// UpdateHasTradingIncentive sets the "has_trading_incentive" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateHasTradingIncentive() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateHasTradingIncentive()
	})
}

// ClearHasTradingIncentive clears the value of the "has_trading_incentive" field.
func (u *ExchangeUpsertBulk) ClearHasTradingIncentive() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearHasTradingIncentive()
	})
}

// SetCentralized sets the "centralized" field.
func (u *ExchangeUpsertBulk) SetCentralized(v bool) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetCentralized(v)
	})
}

// UpdateCentralized sets the "centralized" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateCentralized() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateCentralized()
	})
}

// ClearCentralized clears the value of the "centralized" field.
func (u *ExchangeUpsertBulk) ClearCentralized() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearCentralized()
	})
}

// SetPublicNotice sets the "public_notice" field.
func (u *ExchangeUpsertBulk) SetPublicNotice(v string) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetPublicNotice(v)
	})
}

// UpdatePublicNotice sets the "public_notice" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdatePublicNotice() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdatePublicNotice()
	})
}

// ClearPublicNotice clears the value of the "public_notice" field.
func (u *ExchangeUpsertBulk) ClearPublicNotice() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearPublicNotice()
	})
}

// SetAlertNotice sets the "alert_notice" field.
func (u *ExchangeUpsertBulk) SetAlertNotice(v string) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetAlertNotice(v)
	})
}

// UpdateAlertNotice sets the "alert_notice" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateAlertNotice() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateAlertNotice()
	})
}

// ClearAlertNotice clears the value of the "alert_notice" field.
func (u *ExchangeUpsertBulk) ClearAlertNotice() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearAlertNotice()
	})
}

// SetTrustScore sets the "trust_score" field.
func (u *ExchangeUpsertBulk) SetTrustScore(v int) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetTrustScore(v)
	})
}

// AddTrustScore adds v to the "trust_score" field.
func (u *ExchangeUpsertBulk) AddTrustScore(v int) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.AddTrustScore(v)
	})
}

// UpdateTrustScore sets the "trust_score" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateTrustScore() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateTrustScore()
	})
}

// ClearTrustScore clears the value of the "trust_score" field.
func (u *ExchangeUpsertBulk) ClearTrustScore() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearTrustScore()
	})
}

// SetTrustScoreRank sets the "trust_score_rank" field.
func (u *ExchangeUpsertBulk) SetTrustScoreRank(v int) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetTrustScoreRank(v)
	})
}

// AddTrustScoreRank adds v to the "trust_score_rank" field.
func (u *ExchangeUpsertBulk) AddTrustScoreRank(v int) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.AddTrustScoreRank(v)
	})
}

// UpdateTrustScoreRank sets the "trust_score_rank" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateTrustScoreRank() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateTrustScoreRank()
	})
}

// ClearTrustScoreRank clears the value of the "trust_score_rank" field.
func (u *ExchangeUpsertBulk) ClearTrustScoreRank() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearTrustScoreRank()
	})
}

// SetTradeVolume24hBtc sets the "trade_volume_24h_btc" field.
func (u *ExchangeUpsertBulk) SetTradeVolume24hBtc(v float64) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetTradeVolume24hBtc(v)
	})
}

// AddTradeVolume24hBtc adds v to the "trade_volume_24h_btc" field.
func (u *ExchangeUpsertBulk) AddTradeVolume24hBtc(v float64) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.AddTradeVolume24hBtc(v)
	})
}

// UpdateTradeVolume24hBtc sets the "trade_volume_24h_btc" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateTradeVolume24hBtc() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateTradeVolume24hBtc()
	})
}

// ClearTradeVolume24hBtc clears the value of the "trade_volume_24h_btc" field.
func (u *ExchangeUpsertBulk) ClearTradeVolume24hBtc() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearTradeVolume24hBtc()
	})
}

// SetTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field.
func (u *ExchangeUpsertBulk) SetTradeVolume24hBtcNormalized(v float64) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetTradeVolume24hBtcNormalized(v)
	})
}

// AddTradeVolume24hBtcNormalized adds v to the "trade_volume_24h_btc_normalized" field.
func (u *ExchangeUpsertBulk) AddTradeVolume24hBtcNormalized(v float64) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.AddTradeVolume24hBtcNormalized(v)
	})
}

// UpdateTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateTradeVolume24hBtcNormalized() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateTradeVolume24hBtcNormalized()
	})
}

// ClearTradeVolume24hBtcNormalized clears the value of the "trade_volume_24h_btc_normalized" field.
func (u *ExchangeUpsertBulk) ClearTradeVolume24hBtcNormalized() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearTradeVolume24hBtcNormalized()
	})
}

// SetMakerFee sets the "maker_fee" field.
func (u *ExchangeUpsertBulk) SetMakerFee(v float64) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetMakerFee(v)
	})
}

// AddMakerFee adds v to the "maker_fee" field.
func (u *ExchangeUpsertBulk) AddMakerFee(v float64) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.AddMakerFee(v)
	})
}

// UpdateMakerFee sets the "maker_fee" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateMakerFee() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateMakerFee()
	})
}

// ClearMakerFee clears the value of the "maker_fee" field.
func (u *ExchangeUpsertBulk) ClearMakerFee() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearMakerFee()
	})
}

// SetTakerFee sets the "taker_fee" field.
func (u *ExchangeUpsertBulk) SetTakerFee(v float64) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetTakerFee(v)
	})
}

// AddTakerFee adds v to the "taker_fee" field.
func (u *ExchangeUpsertBulk) AddTakerFee(v float64) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.AddTakerFee(v)
	})
}

// UpdateTakerFee sets the "taker_fee" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateTakerFee() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateTakerFee()
	})
}

// ClearTakerFee clears the value of the "taker_fee" field.
func (u *ExchangeUpsertBulk) ClearTakerFee() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearTakerFee()
	})
}

// SetSpreadFee sets the "spread_fee" field.
func (u *ExchangeUpsertBulk) SetSpreadFee(v bool) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetSpreadFee(v)
	})
}

// UpdateSpreadFee sets the "spread_fee" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateSpreadFee() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateSpreadFee()
	})
}

// ClearSpreadFee clears the value of the "spread_fee" field.
func (u *ExchangeUpsertBulk) ClearSpreadFee() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearSpreadFee()
	})
}

// SetSupportAPI sets the "support_api" field.
func (u *ExchangeUpsertBulk) SetSupportAPI(v bool) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetSupportAPI(v)
	})
}

// UpdateSupportAPI sets the "support_api" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateSupportAPI() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateSupportAPI()
	})
}

// ClearSupportAPI clears the value of the "support_api" field.
func (u *ExchangeUpsertBulk) ClearSupportAPI() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearSupportAPI()
	})
}

// Exec executes the query.
func (u *ExchangeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("repositories: OnConflict was set for builder %d. Set it on the ExchangeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("repositories: missing options for ExchangeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExchangeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
