// Code generated by ent, DO NOT EDIT.

package ticker

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/internal"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Base applies equality check predicate on the "base" field. It's identical to BaseEQ.
func Base(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBase), v))
	})
}

// Target applies equality check predicate on the "target" field. It's identical to TargetEQ.
func Target(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTarget), v))
	})
}

// Last applies equality check predicate on the "last" field. It's identical to LastEQ.
func Last(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLast), v))
	})
}

// Volume applies equality check predicate on the "volume" field. It's identical to VolumeEQ.
func Volume(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVolume), v))
	})
}

// TrustScore applies equality check predicate on the "trust_score" field. It's identical to TrustScoreEQ.
func TrustScore(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrustScore), v))
	})
}

// BidAskSpreadPercentage applies equality check predicate on the "bid_ask_spread_percentage" field. It's identical to BidAskSpreadPercentageEQ.
func BidAskSpreadPercentage(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBidAskSpreadPercentage), v))
	})
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// LastTradedAt applies equality check predicate on the "last_traded_at" field. It's identical to LastTradedAtEQ.
func LastTradedAt(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastTradedAt), v))
	})
}

// LastFetchAt applies equality check predicate on the "last_fetch_at" field. It's identical to LastFetchAtEQ.
func LastFetchAt(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastFetchAt), v))
	})
}

// IsAnomaly applies equality check predicate on the "is_anomaly" field. It's identical to IsAnomalyEQ.
func IsAnomaly(v bool) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsAnomaly), v))
	})
}

// IsStale applies equality check predicate on the "is_stale" field. It's identical to IsStaleEQ.
func IsStale(v bool) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsStale), v))
	})
}

// TradeURL applies equality check predicate on the "trade_url" field. It's identical to TradeURLEQ.
func TradeURL(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTradeURL), v))
	})
}

// TokenInfoURL applies equality check predicate on the "token_info_url" field. It's identical to TokenInfoURLEQ.
func TokenInfoURL(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenInfoURL), v))
	})
}

// CoinID applies equality check predicate on the "coin_id" field. It's identical to CoinIDEQ.
func CoinID(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinID), v))
	})
}

// TargetCoinID applies equality check predicate on the "target_coin_id" field. It's identical to TargetCoinIDEQ.
func TargetCoinID(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetCoinID), v))
	})
}

// BaseEQ applies the EQ predicate on the "base" field.
func BaseEQ(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBase), v))
	})
}

// BaseNEQ applies the NEQ predicate on the "base" field.
func BaseNEQ(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBase), v))
	})
}

// BaseIn applies the In predicate on the "base" field.
func BaseIn(vs ...string) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBase), v...))
	})
}

// BaseNotIn applies the NotIn predicate on the "base" field.
func BaseNotIn(vs ...string) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBase), v...))
	})
}

// BaseGT applies the GT predicate on the "base" field.
func BaseGT(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBase), v))
	})
}

// BaseGTE applies the GTE predicate on the "base" field.
func BaseGTE(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBase), v))
	})
}

// BaseLT applies the LT predicate on the "base" field.
func BaseLT(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBase), v))
	})
}

// BaseLTE applies the LTE predicate on the "base" field.
func BaseLTE(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBase), v))
	})
}

// BaseContains applies the Contains predicate on the "base" field.
func BaseContains(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBase), v))
	})
}

// BaseHasPrefix applies the HasPrefix predicate on the "base" field.
func BaseHasPrefix(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBase), v))
	})
}

// BaseHasSuffix applies the HasSuffix predicate on the "base" field.
func BaseHasSuffix(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBase), v))
	})
}

// BaseEqualFold applies the EqualFold predicate on the "base" field.
func BaseEqualFold(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBase), v))
	})
}

// BaseContainsFold applies the ContainsFold predicate on the "base" field.
func BaseContainsFold(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBase), v))
	})
}

// TargetEQ applies the EQ predicate on the "target" field.
func TargetEQ(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTarget), v))
	})
}

// TargetNEQ applies the NEQ predicate on the "target" field.
func TargetNEQ(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTarget), v))
	})
}

// TargetIn applies the In predicate on the "target" field.
func TargetIn(vs ...string) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTarget), v...))
	})
}

// TargetNotIn applies the NotIn predicate on the "target" field.
func TargetNotIn(vs ...string) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTarget), v...))
	})
}

// TargetGT applies the GT predicate on the "target" field.
func TargetGT(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTarget), v))
	})
}

// TargetGTE applies the GTE predicate on the "target" field.
func TargetGTE(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTarget), v))
	})
}

// TargetLT applies the LT predicate on the "target" field.
func TargetLT(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTarget), v))
	})
}

// TargetLTE applies the LTE predicate on the "target" field.
func TargetLTE(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTarget), v))
	})
}

// TargetContains applies the Contains predicate on the "target" field.
func TargetContains(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTarget), v))
	})
}

// TargetHasPrefix applies the HasPrefix predicate on the "target" field.
func TargetHasPrefix(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTarget), v))
	})
}

// TargetHasSuffix applies the HasSuffix predicate on the "target" field.
func TargetHasSuffix(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTarget), v))
	})
}

// TargetEqualFold applies the EqualFold predicate on the "target" field.
func TargetEqualFold(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTarget), v))
	})
}

// TargetContainsFold applies the ContainsFold predicate on the "target" field.
func TargetContainsFold(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTarget), v))
	})
}

// MarketIsNil applies the IsNil predicate on the "market" field.
func MarketIsNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMarket)))
	})
}

// MarketNotNil applies the NotNil predicate on the "market" field.
func MarketNotNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMarket)))
	})
}

// LastEQ applies the EQ predicate on the "last" field.
func LastEQ(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLast), v))
	})
}

// LastNEQ applies the NEQ predicate on the "last" field.
func LastNEQ(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLast), v))
	})
}

// LastIn applies the In predicate on the "last" field.
func LastIn(vs ...float64) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLast), v...))
	})
}

// LastNotIn applies the NotIn predicate on the "last" field.
func LastNotIn(vs ...float64) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLast), v...))
	})
}

// LastGT applies the GT predicate on the "last" field.
func LastGT(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLast), v))
	})
}

// LastGTE applies the GTE predicate on the "last" field.
func LastGTE(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLast), v))
	})
}

// LastLT applies the LT predicate on the "last" field.
func LastLT(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLast), v))
	})
}

// LastLTE applies the LTE predicate on the "last" field.
func LastLTE(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLast), v))
	})
}

// LastIsNil applies the IsNil predicate on the "last" field.
func LastIsNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLast)))
	})
}

// LastNotNil applies the NotNil predicate on the "last" field.
func LastNotNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLast)))
	})
}

// VolumeEQ applies the EQ predicate on the "volume" field.
func VolumeEQ(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVolume), v))
	})
}

// VolumeNEQ applies the NEQ predicate on the "volume" field.
func VolumeNEQ(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVolume), v))
	})
}

// VolumeIn applies the In predicate on the "volume" field.
func VolumeIn(vs ...float64) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVolume), v...))
	})
}

// VolumeNotIn applies the NotIn predicate on the "volume" field.
func VolumeNotIn(vs ...float64) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVolume), v...))
	})
}

// VolumeGT applies the GT predicate on the "volume" field.
func VolumeGT(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVolume), v))
	})
}

// VolumeGTE applies the GTE predicate on the "volume" field.
func VolumeGTE(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVolume), v))
	})
}

// VolumeLT applies the LT predicate on the "volume" field.
func VolumeLT(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVolume), v))
	})
}

// VolumeLTE applies the LTE predicate on the "volume" field.
func VolumeLTE(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVolume), v))
	})
}

// VolumeIsNil applies the IsNil predicate on the "volume" field.
func VolumeIsNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVolume)))
	})
}

// VolumeNotNil applies the NotNil predicate on the "volume" field.
func VolumeNotNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVolume)))
	})
}

// ConvertedLastIsNil applies the IsNil predicate on the "converted_last" field.
func ConvertedLastIsNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConvertedLast)))
	})
}

// ConvertedLastNotNil applies the NotNil predicate on the "converted_last" field.
func ConvertedLastNotNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConvertedLast)))
	})
}

// ConvertedVolumeIsNil applies the IsNil predicate on the "converted_volume" field.
func ConvertedVolumeIsNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConvertedVolume)))
	})
}

// ConvertedVolumeNotNil applies the NotNil predicate on the "converted_volume" field.
func ConvertedVolumeNotNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConvertedVolume)))
	})
}

// TrustScoreEQ applies the EQ predicate on the "trust_score" field.
func TrustScoreEQ(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrustScore), v))
	})
}

// TrustScoreNEQ applies the NEQ predicate on the "trust_score" field.
func TrustScoreNEQ(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrustScore), v))
	})
}

// TrustScoreIn applies the In predicate on the "trust_score" field.
func TrustScoreIn(vs ...string) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTrustScore), v...))
	})
}

// TrustScoreNotIn applies the NotIn predicate on the "trust_score" field.
func TrustScoreNotIn(vs ...string) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTrustScore), v...))
	})
}

// TrustScoreGT applies the GT predicate on the "trust_score" field.
func TrustScoreGT(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrustScore), v))
	})
}

// TrustScoreGTE applies the GTE predicate on the "trust_score" field.
func TrustScoreGTE(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrustScore), v))
	})
}

// TrustScoreLT applies the LT predicate on the "trust_score" field.
func TrustScoreLT(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrustScore), v))
	})
}

// TrustScoreLTE applies the LTE predicate on the "trust_score" field.
func TrustScoreLTE(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrustScore), v))
	})
}

// TrustScoreContains applies the Contains predicate on the "trust_score" field.
func TrustScoreContains(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTrustScore), v))
	})
}

// TrustScoreHasPrefix applies the HasPrefix predicate on the "trust_score" field.
func TrustScoreHasPrefix(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTrustScore), v))
	})
}

// TrustScoreHasSuffix applies the HasSuffix predicate on the "trust_score" field.
func TrustScoreHasSuffix(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTrustScore), v))
	})
}

// TrustScoreIsNil applies the IsNil predicate on the "trust_score" field.
func TrustScoreIsNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTrustScore)))
	})
}

// TrustScoreNotNil applies the NotNil predicate on the "trust_score" field.
func TrustScoreNotNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTrustScore)))
	})
}

// TrustScoreEqualFold applies the EqualFold predicate on the "trust_score" field.
func TrustScoreEqualFold(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTrustScore), v))
	})
}

// TrustScoreContainsFold applies the ContainsFold predicate on the "trust_score" field.
func TrustScoreContainsFold(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTrustScore), v))
	})
}

// BidAskSpreadPercentageEQ applies the EQ predicate on the "bid_ask_spread_percentage" field.
func BidAskSpreadPercentageEQ(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBidAskSpreadPercentage), v))
	})
}

// BidAskSpreadPercentageNEQ applies the NEQ predicate on the "bid_ask_spread_percentage" field.
func BidAskSpreadPercentageNEQ(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBidAskSpreadPercentage), v))
	})
}

// BidAskSpreadPercentageIn applies the In predicate on the "bid_ask_spread_percentage" field.
func BidAskSpreadPercentageIn(vs ...float64) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBidAskSpreadPercentage), v...))
	})
}

// BidAskSpreadPercentageNotIn applies the NotIn predicate on the "bid_ask_spread_percentage" field.
func BidAskSpreadPercentageNotIn(vs ...float64) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBidAskSpreadPercentage), v...))
	})
}

// BidAskSpreadPercentageGT applies the GT predicate on the "bid_ask_spread_percentage" field.
func BidAskSpreadPercentageGT(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBidAskSpreadPercentage), v))
	})
}

// BidAskSpreadPercentageGTE applies the GTE predicate on the "bid_ask_spread_percentage" field.
func BidAskSpreadPercentageGTE(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBidAskSpreadPercentage), v))
	})
}

// BidAskSpreadPercentageLT applies the LT predicate on the "bid_ask_spread_percentage" field.
func BidAskSpreadPercentageLT(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBidAskSpreadPercentage), v))
	})
}

// BidAskSpreadPercentageLTE applies the LTE predicate on the "bid_ask_spread_percentage" field.
func BidAskSpreadPercentageLTE(v float64) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBidAskSpreadPercentage), v))
	})
}

// BidAskSpreadPercentageIsNil applies the IsNil predicate on the "bid_ask_spread_percentage" field.
func BidAskSpreadPercentageIsNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBidAskSpreadPercentage)))
	})
}

// BidAskSpreadPercentageNotNil applies the NotNil predicate on the "bid_ask_spread_percentage" field.
func BidAskSpreadPercentageNotNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBidAskSpreadPercentage)))
	})
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimestamp), v))
	})
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTimestamp), v...))
	})
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTimestamp), v...))
	})
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimestamp), v))
	})
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimestamp), v))
	})
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimestamp), v))
	})
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimestamp), v))
	})
}

// TimestampIsNil applies the IsNil predicate on the "timestamp" field.
func TimestampIsNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTimestamp)))
	})
}

// TimestampNotNil applies the NotNil predicate on the "timestamp" field.
func TimestampNotNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTimestamp)))
	})
}

// LastTradedAtEQ applies the EQ predicate on the "last_traded_at" field.
func LastTradedAtEQ(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastTradedAt), v))
	})
}

// LastTradedAtNEQ applies the NEQ predicate on the "last_traded_at" field.
func LastTradedAtNEQ(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastTradedAt), v))
	})
}

// LastTradedAtIn applies the In predicate on the "last_traded_at" field.
func LastTradedAtIn(vs ...time.Time) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastTradedAt), v...))
	})
}

// LastTradedAtNotIn applies the NotIn predicate on the "last_traded_at" field.
func LastTradedAtNotIn(vs ...time.Time) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastTradedAt), v...))
	})
}

// LastTradedAtGT applies the GT predicate on the "last_traded_at" field.
func LastTradedAtGT(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastTradedAt), v))
	})
}

// LastTradedAtGTE applies the GTE predicate on the "last_traded_at" field.
func LastTradedAtGTE(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastTradedAt), v))
	})
}

// LastTradedAtLT applies the LT predicate on the "last_traded_at" field.
func LastTradedAtLT(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastTradedAt), v))
	})
}

// LastTradedAtLTE applies the LTE predicate on the "last_traded_at" field.
func LastTradedAtLTE(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastTradedAt), v))
	})
}

// LastTradedAtIsNil applies the IsNil predicate on the "last_traded_at" field.
func LastTradedAtIsNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastTradedAt)))
	})
}

// LastTradedAtNotNil applies the NotNil predicate on the "last_traded_at" field.
func LastTradedAtNotNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastTradedAt)))
	})
}

// LastFetchAtEQ applies the EQ predicate on the "last_fetch_at" field.
func LastFetchAtEQ(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastFetchAt), v))
	})
}

// LastFetchAtNEQ applies the NEQ predicate on the "last_fetch_at" field.
func LastFetchAtNEQ(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastFetchAt), v))
	})
}

// LastFetchAtIn applies the In predicate on the "last_fetch_at" field.
func LastFetchAtIn(vs ...time.Time) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastFetchAt), v...))
	})
}

// LastFetchAtNotIn applies the NotIn predicate on the "last_fetch_at" field.
func LastFetchAtNotIn(vs ...time.Time) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastFetchAt), v...))
	})
}

// LastFetchAtGT applies the GT predicate on the "last_fetch_at" field.
func LastFetchAtGT(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastFetchAt), v))
	})
}

// LastFetchAtGTE applies the GTE predicate on the "last_fetch_at" field.
func LastFetchAtGTE(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastFetchAt), v))
	})
}

// LastFetchAtLT applies the LT predicate on the "last_fetch_at" field.
func LastFetchAtLT(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastFetchAt), v))
	})
}

// LastFetchAtLTE applies the LTE predicate on the "last_fetch_at" field.
func LastFetchAtLTE(v time.Time) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastFetchAt), v))
	})
}

// LastFetchAtIsNil applies the IsNil predicate on the "last_fetch_at" field.
func LastFetchAtIsNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastFetchAt)))
	})
}

// LastFetchAtNotNil applies the NotNil predicate on the "last_fetch_at" field.
func LastFetchAtNotNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastFetchAt)))
	})
}

// IsAnomalyEQ applies the EQ predicate on the "is_anomaly" field.
func IsAnomalyEQ(v bool) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsAnomaly), v))
	})
}

// IsAnomalyNEQ applies the NEQ predicate on the "is_anomaly" field.
func IsAnomalyNEQ(v bool) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsAnomaly), v))
	})
}

// IsAnomalyIsNil applies the IsNil predicate on the "is_anomaly" field.
func IsAnomalyIsNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsAnomaly)))
	})
}

// IsAnomalyNotNil applies the NotNil predicate on the "is_anomaly" field.
func IsAnomalyNotNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsAnomaly)))
	})
}

// IsStaleEQ applies the EQ predicate on the "is_stale" field.
func IsStaleEQ(v bool) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsStale), v))
	})
}

// IsStaleNEQ applies the NEQ predicate on the "is_stale" field.
func IsStaleNEQ(v bool) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsStale), v))
	})
}

// IsStaleIsNil applies the IsNil predicate on the "is_stale" field.
func IsStaleIsNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsStale)))
	})
}

// IsStaleNotNil applies the NotNil predicate on the "is_stale" field.
func IsStaleNotNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsStale)))
	})
}

// TradeURLEQ applies the EQ predicate on the "trade_url" field.
func TradeURLEQ(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTradeURL), v))
	})
}

// TradeURLNEQ applies the NEQ predicate on the "trade_url" field.
func TradeURLNEQ(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTradeURL), v))
	})
}

// TradeURLIn applies the In predicate on the "trade_url" field.
func TradeURLIn(vs ...string) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTradeURL), v...))
	})
}

// TradeURLNotIn applies the NotIn predicate on the "trade_url" field.
func TradeURLNotIn(vs ...string) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTradeURL), v...))
	})
}

// TradeURLGT applies the GT predicate on the "trade_url" field.
func TradeURLGT(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTradeURL), v))
	})
}

// TradeURLGTE applies the GTE predicate on the "trade_url" field.
func TradeURLGTE(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTradeURL), v))
	})
}

// TradeURLLT applies the LT predicate on the "trade_url" field.
func TradeURLLT(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTradeURL), v))
	})
}

// TradeURLLTE applies the LTE predicate on the "trade_url" field.
func TradeURLLTE(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTradeURL), v))
	})
}

// TradeURLContains applies the Contains predicate on the "trade_url" field.
func TradeURLContains(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTradeURL), v))
	})
}

// TradeURLHasPrefix applies the HasPrefix predicate on the "trade_url" field.
func TradeURLHasPrefix(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTradeURL), v))
	})
}

// TradeURLHasSuffix applies the HasSuffix predicate on the "trade_url" field.
func TradeURLHasSuffix(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTradeURL), v))
	})
}

// TradeURLIsNil applies the IsNil predicate on the "trade_url" field.
func TradeURLIsNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTradeURL)))
	})
}

// TradeURLNotNil applies the NotNil predicate on the "trade_url" field.
func TradeURLNotNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTradeURL)))
	})
}

// TradeURLEqualFold applies the EqualFold predicate on the "trade_url" field.
func TradeURLEqualFold(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTradeURL), v))
	})
}

// TradeURLContainsFold applies the ContainsFold predicate on the "trade_url" field.
func TradeURLContainsFold(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTradeURL), v))
	})
}

// TokenInfoURLEQ applies the EQ predicate on the "token_info_url" field.
func TokenInfoURLEQ(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenInfoURL), v))
	})
}

// TokenInfoURLNEQ applies the NEQ predicate on the "token_info_url" field.
func TokenInfoURLNEQ(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTokenInfoURL), v))
	})
}

// TokenInfoURLIn applies the In predicate on the "token_info_url" field.
func TokenInfoURLIn(vs ...string) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTokenInfoURL), v...))
	})
}

// TokenInfoURLNotIn applies the NotIn predicate on the "token_info_url" field.
func TokenInfoURLNotIn(vs ...string) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTokenInfoURL), v...))
	})
}

// TokenInfoURLGT applies the GT predicate on the "token_info_url" field.
func TokenInfoURLGT(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTokenInfoURL), v))
	})
}

// TokenInfoURLGTE applies the GTE predicate on the "token_info_url" field.
func TokenInfoURLGTE(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTokenInfoURL), v))
	})
}

// TokenInfoURLLT applies the LT predicate on the "token_info_url" field.
func TokenInfoURLLT(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTokenInfoURL), v))
	})
}

// TokenInfoURLLTE applies the LTE predicate on the "token_info_url" field.
func TokenInfoURLLTE(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTokenInfoURL), v))
	})
}

// TokenInfoURLContains applies the Contains predicate on the "token_info_url" field.
func TokenInfoURLContains(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTokenInfoURL), v))
	})
}

// TokenInfoURLHasPrefix applies the HasPrefix predicate on the "token_info_url" field.
func TokenInfoURLHasPrefix(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTokenInfoURL), v))
	})
}

// TokenInfoURLHasSuffix applies the HasSuffix predicate on the "token_info_url" field.
func TokenInfoURLHasSuffix(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTokenInfoURL), v))
	})
}

// TokenInfoURLIsNil applies the IsNil predicate on the "token_info_url" field.
func TokenInfoURLIsNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTokenInfoURL)))
	})
}

// TokenInfoURLNotNil applies the NotNil predicate on the "token_info_url" field.
func TokenInfoURLNotNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTokenInfoURL)))
	})
}

// TokenInfoURLEqualFold applies the EqualFold predicate on the "token_info_url" field.
func TokenInfoURLEqualFold(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTokenInfoURL), v))
	})
}

// TokenInfoURLContainsFold applies the ContainsFold predicate on the "token_info_url" field.
func TokenInfoURLContainsFold(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTokenInfoURL), v))
	})
}

// CoinIDEQ applies the EQ predicate on the "coin_id" field.
func CoinIDEQ(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinID), v))
	})
}

// CoinIDNEQ applies the NEQ predicate on the "coin_id" field.
func CoinIDNEQ(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoinID), v))
	})
}

// CoinIDIn applies the In predicate on the "coin_id" field.
func CoinIDIn(vs ...string) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCoinID), v...))
	})
}

// CoinIDNotIn applies the NotIn predicate on the "coin_id" field.
func CoinIDNotIn(vs ...string) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCoinID), v...))
	})
}

// CoinIDGT applies the GT predicate on the "coin_id" field.
func CoinIDGT(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoinID), v))
	})
}

// CoinIDGTE applies the GTE predicate on the "coin_id" field.
func CoinIDGTE(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoinID), v))
	})
}

// CoinIDLT applies the LT predicate on the "coin_id" field.
func CoinIDLT(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoinID), v))
	})
}

// CoinIDLTE applies the LTE predicate on the "coin_id" field.
func CoinIDLTE(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoinID), v))
	})
}

// CoinIDContains applies the Contains predicate on the "coin_id" field.
func CoinIDContains(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCoinID), v))
	})
}

// CoinIDHasPrefix applies the HasPrefix predicate on the "coin_id" field.
func CoinIDHasPrefix(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCoinID), v))
	})
}

// CoinIDHasSuffix applies the HasSuffix predicate on the "coin_id" field.
func CoinIDHasSuffix(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCoinID), v))
	})
}

// CoinIDIsNil applies the IsNil predicate on the "coin_id" field.
func CoinIDIsNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoinID)))
	})
}

// CoinIDNotNil applies the NotNil predicate on the "coin_id" field.
func CoinIDNotNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoinID)))
	})
}

// CoinIDEqualFold applies the EqualFold predicate on the "coin_id" field.
func CoinIDEqualFold(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCoinID), v))
	})
}

// CoinIDContainsFold applies the ContainsFold predicate on the "coin_id" field.
func CoinIDContainsFold(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCoinID), v))
	})
}

// TargetCoinIDEQ applies the EQ predicate on the "target_coin_id" field.
func TargetCoinIDEQ(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetCoinID), v))
	})
}

// TargetCoinIDNEQ applies the NEQ predicate on the "target_coin_id" field.
func TargetCoinIDNEQ(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTargetCoinID), v))
	})
}

// TargetCoinIDIn applies the In predicate on the "target_coin_id" field.
func TargetCoinIDIn(vs ...string) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTargetCoinID), v...))
	})
}

// TargetCoinIDNotIn applies the NotIn predicate on the "target_coin_id" field.
func TargetCoinIDNotIn(vs ...string) predicate.Ticker {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTargetCoinID), v...))
	})
}

// TargetCoinIDGT applies the GT predicate on the "target_coin_id" field.
func TargetCoinIDGT(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTargetCoinID), v))
	})
}

// TargetCoinIDGTE applies the GTE predicate on the "target_coin_id" field.
func TargetCoinIDGTE(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTargetCoinID), v))
	})
}

// TargetCoinIDLT applies the LT predicate on the "target_coin_id" field.
func TargetCoinIDLT(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTargetCoinID), v))
	})
}

// TargetCoinIDLTE applies the LTE predicate on the "target_coin_id" field.
func TargetCoinIDLTE(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTargetCoinID), v))
	})
}

// TargetCoinIDContains applies the Contains predicate on the "target_coin_id" field.
func TargetCoinIDContains(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTargetCoinID), v))
	})
}

// TargetCoinIDHasPrefix applies the HasPrefix predicate on the "target_coin_id" field.
func TargetCoinIDHasPrefix(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTargetCoinID), v))
	})
}

// TargetCoinIDHasSuffix applies the HasSuffix predicate on the "target_coin_id" field.
func TargetCoinIDHasSuffix(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTargetCoinID), v))
	})
}

// TargetCoinIDIsNil applies the IsNil predicate on the "target_coin_id" field.
func TargetCoinIDIsNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTargetCoinID)))
	})
}

// TargetCoinIDNotNil applies the NotNil predicate on the "target_coin_id" field.
func TargetCoinIDNotNil() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTargetCoinID)))
	})
}

// TargetCoinIDEqualFold applies the EqualFold predicate on the "target_coin_id" field.
func TargetCoinIDEqualFold(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTargetCoinID), v))
	})
}

// TargetCoinIDContainsFold applies the ContainsFold predicate on the "target_coin_id" field.
func TargetCoinIDContainsFold(v string) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTargetCoinID), v))
	})
}

// HasExchange applies the HasEdge predicate on the "exchange" edge.
func HasExchange() predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExchangeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExchangeTable, ExchangeColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Exchange
		step.Edge.Schema = schemaConfig.Ticker
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExchangeWith applies the HasEdge predicate on the "exchange" edge with a given conditions (other predicates).
func HasExchangeWith(preds ...predicate.Exchange) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExchangeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExchangeTable, ExchangeColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Exchange
		step.Edge.Schema = schemaConfig.Ticker
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ticker) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ticker) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ticker) predicate.Ticker {
	return predicate.Ticker(func(s *sql.Selector) {
		p(s.Not())
	})
}
