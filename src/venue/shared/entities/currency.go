// Code generated by ent, DO NOT EDIT.

package entities

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/omiga-group/omiga/src/venue/shared/entities/currency"
)

// Currency is the model entity for the Currency schema.
type Currency struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type currency.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CurrencyQuery when eager-loading is set.
	Edges CurrencyEdges `json:"edges"`
}

// CurrencyEdges holds the relations/edges for other nodes in the graph.
type CurrencyEdges struct {
	// CurrencyBase holds the value of the currency_base edge.
	CurrencyBase []*TradingPair `json:"currency_base,omitempty"`
	// CurrencyCounter holds the value of the currency_counter edge.
	CurrencyCounter []*TradingPair `json:"currency_counter,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedCurrencyBase    map[string][]*TradingPair
	namedCurrencyCounter map[string][]*TradingPair
}

// CurrencyBaseOrErr returns the CurrencyBase value or an error if the edge
// was not loaded in eager-loading.
func (e CurrencyEdges) CurrencyBaseOrErr() ([]*TradingPair, error) {
	if e.loadedTypes[0] {
		return e.CurrencyBase, nil
	}
	return nil, &NotLoadedError{edge: "currency_base"}
}

// CurrencyCounterOrErr returns the CurrencyCounter value or an error if the edge
// was not loaded in eager-loading.
func (e CurrencyEdges) CurrencyCounterOrErr() ([]*TradingPair, error) {
	if e.loadedTypes[1] {
		return e.CurrencyCounter, nil
	}
	return nil, &NotLoadedError{edge: "currency_counter"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Currency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case currency.FieldID:
			values[i] = new(sql.NullInt64)
		case currency.FieldSymbol, currency.FieldName, currency.FieldType:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Currency", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Currency fields.
func (c *Currency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case currency.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case currency.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				c.Symbol = value.String
			}
		case currency.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case currency.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = currency.Type(value.String)
			}
		}
	}
	return nil
}

// QueryCurrencyBase queries the "currency_base" edge of the Currency entity.
func (c *Currency) QueryCurrencyBase() *TradingPairQuery {
	return (&CurrencyClient{config: c.config}).QueryCurrencyBase(c)
}

// QueryCurrencyCounter queries the "currency_counter" edge of the Currency entity.
func (c *Currency) QueryCurrencyCounter() *TradingPairQuery {
	return (&CurrencyClient{config: c.config}).QueryCurrencyCounter(c)
}

// Update returns a builder for updating this Currency.
// Note that you need to call Currency.Unwrap() before calling this method if this Currency
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Currency) Update() *CurrencyUpdateOne {
	return (&CurrencyClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Currency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Currency) Unwrap() *Currency {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("entities: Currency is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Currency) String() string {
	var builder strings.Builder
	builder.WriteString("Currency(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("symbol=")
	builder.WriteString(c.Symbol)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteByte(')')
	return builder.String()
}

// NamedCurrencyBase returns the CurrencyBase named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Currency) NamedCurrencyBase(name string) ([]*TradingPair, error) {
	if c.Edges.namedCurrencyBase == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedCurrencyBase[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Currency) appendNamedCurrencyBase(name string, edges ...*TradingPair) {
	if c.Edges.namedCurrencyBase == nil {
		c.Edges.namedCurrencyBase = make(map[string][]*TradingPair)
	}
	if len(edges) == 0 {
		c.Edges.namedCurrencyBase[name] = []*TradingPair{}
	} else {
		c.Edges.namedCurrencyBase[name] = append(c.Edges.namedCurrencyBase[name], edges...)
	}
}

// NamedCurrencyCounter returns the CurrencyCounter named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Currency) NamedCurrencyCounter(name string) ([]*TradingPair, error) {
	if c.Edges.namedCurrencyCounter == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedCurrencyCounter[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Currency) appendNamedCurrencyCounter(name string, edges ...*TradingPair) {
	if c.Edges.namedCurrencyCounter == nil {
		c.Edges.namedCurrencyCounter = make(map[string][]*TradingPair)
	}
	if len(edges) == 0 {
		c.Edges.namedCurrencyCounter[name] = []*TradingPair{}
	} else {
		c.Edges.namedCurrencyCounter[name] = append(c.Edges.namedCurrencyCounter[name], edges...)
	}
}

// Currencies is a parsable slice of Currency.
type Currencies []*Currency

func (c Currencies) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
