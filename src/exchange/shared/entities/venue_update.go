// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/internal"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/market"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/predicate"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/ticker"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/tradingpair"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/venue"
)

// VenueUpdate is the builder for updating Venue entities.
type VenueUpdate struct {
	config
	hooks     []Hook
	mutation  *VenueMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VenueUpdate builder.
func (vu *VenueUpdate) Where(ps ...predicate.Venue) *VenueUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetVenueID sets the "venue_id" field.
func (vu *VenueUpdate) SetVenueID(s string) *VenueUpdate {
	vu.mutation.SetVenueID(s)
	return vu
}

// SetType sets the "type" field.
func (vu *VenueUpdate) SetType(v venue.Type) *VenueUpdate {
	vu.mutation.SetType(v)
	return vu
}

// SetName sets the "name" field.
func (vu *VenueUpdate) SetName(s string) *VenueUpdate {
	vu.mutation.SetName(s)
	return vu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableName(s *string) *VenueUpdate {
	if s != nil {
		vu.SetName(*s)
	}
	return vu
}

// ClearName clears the value of the "name" field.
func (vu *VenueUpdate) ClearName() *VenueUpdate {
	vu.mutation.ClearName()
	return vu
}

// SetYearEstablished sets the "year_established" field.
func (vu *VenueUpdate) SetYearEstablished(i int) *VenueUpdate {
	vu.mutation.ResetYearEstablished()
	vu.mutation.SetYearEstablished(i)
	return vu
}

// SetNillableYearEstablished sets the "year_established" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableYearEstablished(i *int) *VenueUpdate {
	if i != nil {
		vu.SetYearEstablished(*i)
	}
	return vu
}

// AddYearEstablished adds i to the "year_established" field.
func (vu *VenueUpdate) AddYearEstablished(i int) *VenueUpdate {
	vu.mutation.AddYearEstablished(i)
	return vu
}

// ClearYearEstablished clears the value of the "year_established" field.
func (vu *VenueUpdate) ClearYearEstablished() *VenueUpdate {
	vu.mutation.ClearYearEstablished()
	return vu
}

// SetCountry sets the "country" field.
func (vu *VenueUpdate) SetCountry(s string) *VenueUpdate {
	vu.mutation.SetCountry(s)
	return vu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableCountry(s *string) *VenueUpdate {
	if s != nil {
		vu.SetCountry(*s)
	}
	return vu
}

// ClearCountry clears the value of the "country" field.
func (vu *VenueUpdate) ClearCountry() *VenueUpdate {
	vu.mutation.ClearCountry()
	return vu
}

// SetImage sets the "image" field.
func (vu *VenueUpdate) SetImage(s string) *VenueUpdate {
	vu.mutation.SetImage(s)
	return vu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableImage(s *string) *VenueUpdate {
	if s != nil {
		vu.SetImage(*s)
	}
	return vu
}

// ClearImage clears the value of the "image" field.
func (vu *VenueUpdate) ClearImage() *VenueUpdate {
	vu.mutation.ClearImage()
	return vu
}

// SetLinks sets the "links" field.
func (vu *VenueUpdate) SetLinks(m map[string]string) *VenueUpdate {
	vu.mutation.SetLinks(m)
	return vu
}

// ClearLinks clears the value of the "links" field.
func (vu *VenueUpdate) ClearLinks() *VenueUpdate {
	vu.mutation.ClearLinks()
	return vu
}

// SetHasTradingIncentive sets the "has_trading_incentive" field.
func (vu *VenueUpdate) SetHasTradingIncentive(b bool) *VenueUpdate {
	vu.mutation.SetHasTradingIncentive(b)
	return vu
}

// SetNillableHasTradingIncentive sets the "has_trading_incentive" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableHasTradingIncentive(b *bool) *VenueUpdate {
	if b != nil {
		vu.SetHasTradingIncentive(*b)
	}
	return vu
}

// ClearHasTradingIncentive clears the value of the "has_trading_incentive" field.
func (vu *VenueUpdate) ClearHasTradingIncentive() *VenueUpdate {
	vu.mutation.ClearHasTradingIncentive()
	return vu
}

// SetCentralized sets the "centralized" field.
func (vu *VenueUpdate) SetCentralized(b bool) *VenueUpdate {
	vu.mutation.SetCentralized(b)
	return vu
}

// SetNillableCentralized sets the "centralized" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableCentralized(b *bool) *VenueUpdate {
	if b != nil {
		vu.SetCentralized(*b)
	}
	return vu
}

// ClearCentralized clears the value of the "centralized" field.
func (vu *VenueUpdate) ClearCentralized() *VenueUpdate {
	vu.mutation.ClearCentralized()
	return vu
}

// SetPublicNotice sets the "public_notice" field.
func (vu *VenueUpdate) SetPublicNotice(s string) *VenueUpdate {
	vu.mutation.SetPublicNotice(s)
	return vu
}

// SetNillablePublicNotice sets the "public_notice" field if the given value is not nil.
func (vu *VenueUpdate) SetNillablePublicNotice(s *string) *VenueUpdate {
	if s != nil {
		vu.SetPublicNotice(*s)
	}
	return vu
}

// ClearPublicNotice clears the value of the "public_notice" field.
func (vu *VenueUpdate) ClearPublicNotice() *VenueUpdate {
	vu.mutation.ClearPublicNotice()
	return vu
}

// SetAlertNotice sets the "alert_notice" field.
func (vu *VenueUpdate) SetAlertNotice(s string) *VenueUpdate {
	vu.mutation.SetAlertNotice(s)
	return vu
}

// SetNillableAlertNotice sets the "alert_notice" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableAlertNotice(s *string) *VenueUpdate {
	if s != nil {
		vu.SetAlertNotice(*s)
	}
	return vu
}

// ClearAlertNotice clears the value of the "alert_notice" field.
func (vu *VenueUpdate) ClearAlertNotice() *VenueUpdate {
	vu.mutation.ClearAlertNotice()
	return vu
}

// SetTrustScore sets the "trust_score" field.
func (vu *VenueUpdate) SetTrustScore(i int) *VenueUpdate {
	vu.mutation.ResetTrustScore()
	vu.mutation.SetTrustScore(i)
	return vu
}

// SetNillableTrustScore sets the "trust_score" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableTrustScore(i *int) *VenueUpdate {
	if i != nil {
		vu.SetTrustScore(*i)
	}
	return vu
}

// AddTrustScore adds i to the "trust_score" field.
func (vu *VenueUpdate) AddTrustScore(i int) *VenueUpdate {
	vu.mutation.AddTrustScore(i)
	return vu
}

// ClearTrustScore clears the value of the "trust_score" field.
func (vu *VenueUpdate) ClearTrustScore() *VenueUpdate {
	vu.mutation.ClearTrustScore()
	return vu
}

// SetTrustScoreRank sets the "trust_score_rank" field.
func (vu *VenueUpdate) SetTrustScoreRank(i int) *VenueUpdate {
	vu.mutation.ResetTrustScoreRank()
	vu.mutation.SetTrustScoreRank(i)
	return vu
}

// SetNillableTrustScoreRank sets the "trust_score_rank" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableTrustScoreRank(i *int) *VenueUpdate {
	if i != nil {
		vu.SetTrustScoreRank(*i)
	}
	return vu
}

// AddTrustScoreRank adds i to the "trust_score_rank" field.
func (vu *VenueUpdate) AddTrustScoreRank(i int) *VenueUpdate {
	vu.mutation.AddTrustScoreRank(i)
	return vu
}

// ClearTrustScoreRank clears the value of the "trust_score_rank" field.
func (vu *VenueUpdate) ClearTrustScoreRank() *VenueUpdate {
	vu.mutation.ClearTrustScoreRank()
	return vu
}

// SetTradeVolume24hBtc sets the "trade_volume_24h_btc" field.
func (vu *VenueUpdate) SetTradeVolume24hBtc(f float64) *VenueUpdate {
	vu.mutation.ResetTradeVolume24hBtc()
	vu.mutation.SetTradeVolume24hBtc(f)
	return vu
}

// SetNillableTradeVolume24hBtc sets the "trade_volume_24h_btc" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableTradeVolume24hBtc(f *float64) *VenueUpdate {
	if f != nil {
		vu.SetTradeVolume24hBtc(*f)
	}
	return vu
}

// AddTradeVolume24hBtc adds f to the "trade_volume_24h_btc" field.
func (vu *VenueUpdate) AddTradeVolume24hBtc(f float64) *VenueUpdate {
	vu.mutation.AddTradeVolume24hBtc(f)
	return vu
}

// ClearTradeVolume24hBtc clears the value of the "trade_volume_24h_btc" field.
func (vu *VenueUpdate) ClearTradeVolume24hBtc() *VenueUpdate {
	vu.mutation.ClearTradeVolume24hBtc()
	return vu
}

// SetTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field.
func (vu *VenueUpdate) SetTradeVolume24hBtcNormalized(f float64) *VenueUpdate {
	vu.mutation.ResetTradeVolume24hBtcNormalized()
	vu.mutation.SetTradeVolume24hBtcNormalized(f)
	return vu
}

// SetNillableTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableTradeVolume24hBtcNormalized(f *float64) *VenueUpdate {
	if f != nil {
		vu.SetTradeVolume24hBtcNormalized(*f)
	}
	return vu
}

// AddTradeVolume24hBtcNormalized adds f to the "trade_volume_24h_btc_normalized" field.
func (vu *VenueUpdate) AddTradeVolume24hBtcNormalized(f float64) *VenueUpdate {
	vu.mutation.AddTradeVolume24hBtcNormalized(f)
	return vu
}

// ClearTradeVolume24hBtcNormalized clears the value of the "trade_volume_24h_btc_normalized" field.
func (vu *VenueUpdate) ClearTradeVolume24hBtcNormalized() *VenueUpdate {
	vu.mutation.ClearTradeVolume24hBtcNormalized()
	return vu
}

// SetMakerFee sets the "maker_fee" field.
func (vu *VenueUpdate) SetMakerFee(f float64) *VenueUpdate {
	vu.mutation.ResetMakerFee()
	vu.mutation.SetMakerFee(f)
	return vu
}

// SetNillableMakerFee sets the "maker_fee" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableMakerFee(f *float64) *VenueUpdate {
	if f != nil {
		vu.SetMakerFee(*f)
	}
	return vu
}

// AddMakerFee adds f to the "maker_fee" field.
func (vu *VenueUpdate) AddMakerFee(f float64) *VenueUpdate {
	vu.mutation.AddMakerFee(f)
	return vu
}

// ClearMakerFee clears the value of the "maker_fee" field.
func (vu *VenueUpdate) ClearMakerFee() *VenueUpdate {
	vu.mutation.ClearMakerFee()
	return vu
}

// SetTakerFee sets the "taker_fee" field.
func (vu *VenueUpdate) SetTakerFee(f float64) *VenueUpdate {
	vu.mutation.ResetTakerFee()
	vu.mutation.SetTakerFee(f)
	return vu
}

// SetNillableTakerFee sets the "taker_fee" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableTakerFee(f *float64) *VenueUpdate {
	if f != nil {
		vu.SetTakerFee(*f)
	}
	return vu
}

// AddTakerFee adds f to the "taker_fee" field.
func (vu *VenueUpdate) AddTakerFee(f float64) *VenueUpdate {
	vu.mutation.AddTakerFee(f)
	return vu
}

// ClearTakerFee clears the value of the "taker_fee" field.
func (vu *VenueUpdate) ClearTakerFee() *VenueUpdate {
	vu.mutation.ClearTakerFee()
	return vu
}

// SetSpreadFee sets the "spread_fee" field.
func (vu *VenueUpdate) SetSpreadFee(b bool) *VenueUpdate {
	vu.mutation.SetSpreadFee(b)
	return vu
}

// SetNillableSpreadFee sets the "spread_fee" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableSpreadFee(b *bool) *VenueUpdate {
	if b != nil {
		vu.SetSpreadFee(*b)
	}
	return vu
}

// ClearSpreadFee clears the value of the "spread_fee" field.
func (vu *VenueUpdate) ClearSpreadFee() *VenueUpdate {
	vu.mutation.ClearSpreadFee()
	return vu
}

// SetSupportAPI sets the "support_api" field.
func (vu *VenueUpdate) SetSupportAPI(b bool) *VenueUpdate {
	vu.mutation.SetSupportAPI(b)
	return vu
}

// SetNillableSupportAPI sets the "support_api" field if the given value is not nil.
func (vu *VenueUpdate) SetNillableSupportAPI(b *bool) *VenueUpdate {
	if b != nil {
		vu.SetSupportAPI(*b)
	}
	return vu
}

// ClearSupportAPI clears the value of the "support_api" field.
func (vu *VenueUpdate) ClearSupportAPI() *VenueUpdate {
	vu.mutation.ClearSupportAPI()
	return vu
}

// AddTickerIDs adds the "ticker" edge to the Ticker entity by IDs.
func (vu *VenueUpdate) AddTickerIDs(ids ...int) *VenueUpdate {
	vu.mutation.AddTickerIDs(ids...)
	return vu
}

// AddTicker adds the "ticker" edges to the Ticker entity.
func (vu *VenueUpdate) AddTicker(t ...*Ticker) *VenueUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vu.AddTickerIDs(ids...)
}

// AddTradingPairIDs adds the "trading_pair" edge to the TradingPair entity by IDs.
func (vu *VenueUpdate) AddTradingPairIDs(ids ...int) *VenueUpdate {
	vu.mutation.AddTradingPairIDs(ids...)
	return vu
}

// AddTradingPair adds the "trading_pair" edges to the TradingPair entity.
func (vu *VenueUpdate) AddTradingPair(t ...*TradingPair) *VenueUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vu.AddTradingPairIDs(ids...)
}

// AddMarketIDs adds the "market" edge to the Market entity by IDs.
func (vu *VenueUpdate) AddMarketIDs(ids ...int) *VenueUpdate {
	vu.mutation.AddMarketIDs(ids...)
	return vu
}

// AddMarket adds the "market" edges to the Market entity.
func (vu *VenueUpdate) AddMarket(m ...*Market) *VenueUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vu.AddMarketIDs(ids...)
}

// Mutation returns the VenueMutation object of the builder.
func (vu *VenueUpdate) Mutation() *VenueMutation {
	return vu.mutation
}

// ClearTicker clears all "ticker" edges to the Ticker entity.
func (vu *VenueUpdate) ClearTicker() *VenueUpdate {
	vu.mutation.ClearTicker()
	return vu
}

// RemoveTickerIDs removes the "ticker" edge to Ticker entities by IDs.
func (vu *VenueUpdate) RemoveTickerIDs(ids ...int) *VenueUpdate {
	vu.mutation.RemoveTickerIDs(ids...)
	return vu
}

// RemoveTicker removes "ticker" edges to Ticker entities.
func (vu *VenueUpdate) RemoveTicker(t ...*Ticker) *VenueUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vu.RemoveTickerIDs(ids...)
}

// ClearTradingPair clears all "trading_pair" edges to the TradingPair entity.
func (vu *VenueUpdate) ClearTradingPair() *VenueUpdate {
	vu.mutation.ClearTradingPair()
	return vu
}

// RemoveTradingPairIDs removes the "trading_pair" edge to TradingPair entities by IDs.
func (vu *VenueUpdate) RemoveTradingPairIDs(ids ...int) *VenueUpdate {
	vu.mutation.RemoveTradingPairIDs(ids...)
	return vu
}

// RemoveTradingPair removes "trading_pair" edges to TradingPair entities.
func (vu *VenueUpdate) RemoveTradingPair(t ...*TradingPair) *VenueUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vu.RemoveTradingPairIDs(ids...)
}

// ClearMarket clears all "market" edges to the Market entity.
func (vu *VenueUpdate) ClearMarket() *VenueUpdate {
	vu.mutation.ClearMarket()
	return vu
}

// RemoveMarketIDs removes the "market" edge to Market entities by IDs.
func (vu *VenueUpdate) RemoveMarketIDs(ids ...int) *VenueUpdate {
	vu.mutation.RemoveMarketIDs(ids...)
	return vu
}

// RemoveMarket removes "market" edges to Market entities.
func (vu *VenueUpdate) RemoveMarket(m ...*Market) *VenueUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vu.RemoveMarketIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VenueUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vu.hooks) == 0 {
		if err = vu.check(); err != nil {
			return 0, err
		}
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VenueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vu.check(); err != nil {
				return 0, err
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			if vu.hooks[i] == nil {
				return 0, fmt.Errorf("entities: uninitialized hook (forgotten import entities/runtime?)")
			}
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VenueUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VenueUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VenueUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VenueUpdate) check() error {
	if v, ok := vu.mutation.GetType(); ok {
		if err := venue.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`entities: validator failed for field "Venue.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vu *VenueUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VenueUpdate {
	vu.modifiers = append(vu.modifiers, modifiers...)
	return vu
}

func (vu *VenueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   venue.Table,
			Columns: venue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: venue.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.VenueID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: venue.FieldVenueID,
		})
	}
	if value, ok := vu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: venue.FieldType,
		})
	}
	if value, ok := vu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: venue.FieldName,
		})
	}
	if vu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: venue.FieldName,
		})
	}
	if value, ok := vu.mutation.YearEstablished(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: venue.FieldYearEstablished,
		})
	}
	if value, ok := vu.mutation.AddedYearEstablished(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: venue.FieldYearEstablished,
		})
	}
	if vu.mutation.YearEstablishedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: venue.FieldYearEstablished,
		})
	}
	if value, ok := vu.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: venue.FieldCountry,
		})
	}
	if vu.mutation.CountryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: venue.FieldCountry,
		})
	}
	if value, ok := vu.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: venue.FieldImage,
		})
	}
	if vu.mutation.ImageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: venue.FieldImage,
		})
	}
	if value, ok := vu.mutation.Links(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: venue.FieldLinks,
		})
	}
	if vu.mutation.LinksCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: venue.FieldLinks,
		})
	}
	if value, ok := vu.mutation.HasTradingIncentive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: venue.FieldHasTradingIncentive,
		})
	}
	if vu.mutation.HasTradingIncentiveCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: venue.FieldHasTradingIncentive,
		})
	}
	if value, ok := vu.mutation.Centralized(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: venue.FieldCentralized,
		})
	}
	if vu.mutation.CentralizedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: venue.FieldCentralized,
		})
	}
	if value, ok := vu.mutation.PublicNotice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: venue.FieldPublicNotice,
		})
	}
	if vu.mutation.PublicNoticeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: venue.FieldPublicNotice,
		})
	}
	if value, ok := vu.mutation.AlertNotice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: venue.FieldAlertNotice,
		})
	}
	if vu.mutation.AlertNoticeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: venue.FieldAlertNotice,
		})
	}
	if value, ok := vu.mutation.TrustScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: venue.FieldTrustScore,
		})
	}
	if value, ok := vu.mutation.AddedTrustScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: venue.FieldTrustScore,
		})
	}
	if vu.mutation.TrustScoreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: venue.FieldTrustScore,
		})
	}
	if value, ok := vu.mutation.TrustScoreRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: venue.FieldTrustScoreRank,
		})
	}
	if value, ok := vu.mutation.AddedTrustScoreRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: venue.FieldTrustScoreRank,
		})
	}
	if vu.mutation.TrustScoreRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: venue.FieldTrustScoreRank,
		})
	}
	if value, ok := vu.mutation.TradeVolume24hBtc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: venue.FieldTradeVolume24hBtc,
		})
	}
	if value, ok := vu.mutation.AddedTradeVolume24hBtc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: venue.FieldTradeVolume24hBtc,
		})
	}
	if vu.mutation.TradeVolume24hBtcCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: venue.FieldTradeVolume24hBtc,
		})
	}
	if value, ok := vu.mutation.TradeVolume24hBtcNormalized(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: venue.FieldTradeVolume24hBtcNormalized,
		})
	}
	if value, ok := vu.mutation.AddedTradeVolume24hBtcNormalized(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: venue.FieldTradeVolume24hBtcNormalized,
		})
	}
	if vu.mutation.TradeVolume24hBtcNormalizedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: venue.FieldTradeVolume24hBtcNormalized,
		})
	}
	if value, ok := vu.mutation.MakerFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: venue.FieldMakerFee,
		})
	}
	if value, ok := vu.mutation.AddedMakerFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: venue.FieldMakerFee,
		})
	}
	if vu.mutation.MakerFeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: venue.FieldMakerFee,
		})
	}
	if value, ok := vu.mutation.TakerFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: venue.FieldTakerFee,
		})
	}
	if value, ok := vu.mutation.AddedTakerFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: venue.FieldTakerFee,
		})
	}
	if vu.mutation.TakerFeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: venue.FieldTakerFee,
		})
	}
	if value, ok := vu.mutation.SpreadFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: venue.FieldSpreadFee,
		})
	}
	if vu.mutation.SpreadFeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: venue.FieldSpreadFee,
		})
	}
	if value, ok := vu.mutation.SupportAPI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: venue.FieldSupportAPI,
		})
	}
	if vu.mutation.SupportAPICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: venue.FieldSupportAPI,
		})
	}
	if vu.mutation.TickerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.TickerTable,
			Columns: []string{venue.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticker.FieldID,
				},
			},
		}
		edge.Schema = vu.schemaConfig.Ticker
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedTickerIDs(); len(nodes) > 0 && !vu.mutation.TickerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.TickerTable,
			Columns: []string{venue.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticker.FieldID,
				},
			},
		}
		edge.Schema = vu.schemaConfig.Ticker
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.TickerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.TickerTable,
			Columns: []string{venue.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticker.FieldID,
				},
			},
		}
		edge.Schema = vu.schemaConfig.Ticker
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.TradingPairCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.TradingPairTable,
			Columns: []string{venue.TradingPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradingpair.FieldID,
				},
			},
		}
		edge.Schema = vu.schemaConfig.TradingPair
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedTradingPairIDs(); len(nodes) > 0 && !vu.mutation.TradingPairCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.TradingPairTable,
			Columns: []string{venue.TradingPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradingpair.FieldID,
				},
			},
		}
		edge.Schema = vu.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.TradingPairIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.TradingPairTable,
			Columns: []string{venue.TradingPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradingpair.FieldID,
				},
			},
		}
		edge.Schema = vu.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.MarketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.MarketTable,
			Columns: []string{venue.MarketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: market.FieldID,
				},
			},
		}
		edge.Schema = vu.schemaConfig.Market
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedMarketIDs(); len(nodes) > 0 && !vu.mutation.MarketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.MarketTable,
			Columns: []string{venue.MarketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: market.FieldID,
				},
			},
		}
		edge.Schema = vu.schemaConfig.Market
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.MarketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.MarketTable,
			Columns: []string{venue.MarketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: market.FieldID,
				},
			},
		}
		edge.Schema = vu.schemaConfig.Market
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = vu.schemaConfig.Venue
	ctx = internal.NewSchemaConfigContext(ctx, vu.schemaConfig)
	_spec.Modifiers = vu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{venue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// VenueUpdateOne is the builder for updating a single Venue entity.
type VenueUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VenueMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetVenueID sets the "venue_id" field.
func (vuo *VenueUpdateOne) SetVenueID(s string) *VenueUpdateOne {
	vuo.mutation.SetVenueID(s)
	return vuo
}

// SetType sets the "type" field.
func (vuo *VenueUpdateOne) SetType(v venue.Type) *VenueUpdateOne {
	vuo.mutation.SetType(v)
	return vuo
}

// SetName sets the "name" field.
func (vuo *VenueUpdateOne) SetName(s string) *VenueUpdateOne {
	vuo.mutation.SetName(s)
	return vuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableName(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetName(*s)
	}
	return vuo
}

// ClearName clears the value of the "name" field.
func (vuo *VenueUpdateOne) ClearName() *VenueUpdateOne {
	vuo.mutation.ClearName()
	return vuo
}

// SetYearEstablished sets the "year_established" field.
func (vuo *VenueUpdateOne) SetYearEstablished(i int) *VenueUpdateOne {
	vuo.mutation.ResetYearEstablished()
	vuo.mutation.SetYearEstablished(i)
	return vuo
}

// SetNillableYearEstablished sets the "year_established" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableYearEstablished(i *int) *VenueUpdateOne {
	if i != nil {
		vuo.SetYearEstablished(*i)
	}
	return vuo
}

// AddYearEstablished adds i to the "year_established" field.
func (vuo *VenueUpdateOne) AddYearEstablished(i int) *VenueUpdateOne {
	vuo.mutation.AddYearEstablished(i)
	return vuo
}

// ClearYearEstablished clears the value of the "year_established" field.
func (vuo *VenueUpdateOne) ClearYearEstablished() *VenueUpdateOne {
	vuo.mutation.ClearYearEstablished()
	return vuo
}

// SetCountry sets the "country" field.
func (vuo *VenueUpdateOne) SetCountry(s string) *VenueUpdateOne {
	vuo.mutation.SetCountry(s)
	return vuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableCountry(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetCountry(*s)
	}
	return vuo
}

// ClearCountry clears the value of the "country" field.
func (vuo *VenueUpdateOne) ClearCountry() *VenueUpdateOne {
	vuo.mutation.ClearCountry()
	return vuo
}

// SetImage sets the "image" field.
func (vuo *VenueUpdateOne) SetImage(s string) *VenueUpdateOne {
	vuo.mutation.SetImage(s)
	return vuo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableImage(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetImage(*s)
	}
	return vuo
}

// ClearImage clears the value of the "image" field.
func (vuo *VenueUpdateOne) ClearImage() *VenueUpdateOne {
	vuo.mutation.ClearImage()
	return vuo
}

// SetLinks sets the "links" field.
func (vuo *VenueUpdateOne) SetLinks(m map[string]string) *VenueUpdateOne {
	vuo.mutation.SetLinks(m)
	return vuo
}

// ClearLinks clears the value of the "links" field.
func (vuo *VenueUpdateOne) ClearLinks() *VenueUpdateOne {
	vuo.mutation.ClearLinks()
	return vuo
}

// SetHasTradingIncentive sets the "has_trading_incentive" field.
func (vuo *VenueUpdateOne) SetHasTradingIncentive(b bool) *VenueUpdateOne {
	vuo.mutation.SetHasTradingIncentive(b)
	return vuo
}

// SetNillableHasTradingIncentive sets the "has_trading_incentive" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableHasTradingIncentive(b *bool) *VenueUpdateOne {
	if b != nil {
		vuo.SetHasTradingIncentive(*b)
	}
	return vuo
}

// ClearHasTradingIncentive clears the value of the "has_trading_incentive" field.
func (vuo *VenueUpdateOne) ClearHasTradingIncentive() *VenueUpdateOne {
	vuo.mutation.ClearHasTradingIncentive()
	return vuo
}

// SetCentralized sets the "centralized" field.
func (vuo *VenueUpdateOne) SetCentralized(b bool) *VenueUpdateOne {
	vuo.mutation.SetCentralized(b)
	return vuo
}

// SetNillableCentralized sets the "centralized" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableCentralized(b *bool) *VenueUpdateOne {
	if b != nil {
		vuo.SetCentralized(*b)
	}
	return vuo
}

// ClearCentralized clears the value of the "centralized" field.
func (vuo *VenueUpdateOne) ClearCentralized() *VenueUpdateOne {
	vuo.mutation.ClearCentralized()
	return vuo
}

// SetPublicNotice sets the "public_notice" field.
func (vuo *VenueUpdateOne) SetPublicNotice(s string) *VenueUpdateOne {
	vuo.mutation.SetPublicNotice(s)
	return vuo
}

// SetNillablePublicNotice sets the "public_notice" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillablePublicNotice(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetPublicNotice(*s)
	}
	return vuo
}

// ClearPublicNotice clears the value of the "public_notice" field.
func (vuo *VenueUpdateOne) ClearPublicNotice() *VenueUpdateOne {
	vuo.mutation.ClearPublicNotice()
	return vuo
}

// SetAlertNotice sets the "alert_notice" field.
func (vuo *VenueUpdateOne) SetAlertNotice(s string) *VenueUpdateOne {
	vuo.mutation.SetAlertNotice(s)
	return vuo
}

// SetNillableAlertNotice sets the "alert_notice" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableAlertNotice(s *string) *VenueUpdateOne {
	if s != nil {
		vuo.SetAlertNotice(*s)
	}
	return vuo
}

// ClearAlertNotice clears the value of the "alert_notice" field.
func (vuo *VenueUpdateOne) ClearAlertNotice() *VenueUpdateOne {
	vuo.mutation.ClearAlertNotice()
	return vuo
}

// SetTrustScore sets the "trust_score" field.
func (vuo *VenueUpdateOne) SetTrustScore(i int) *VenueUpdateOne {
	vuo.mutation.ResetTrustScore()
	vuo.mutation.SetTrustScore(i)
	return vuo
}

// SetNillableTrustScore sets the "trust_score" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableTrustScore(i *int) *VenueUpdateOne {
	if i != nil {
		vuo.SetTrustScore(*i)
	}
	return vuo
}

// AddTrustScore adds i to the "trust_score" field.
func (vuo *VenueUpdateOne) AddTrustScore(i int) *VenueUpdateOne {
	vuo.mutation.AddTrustScore(i)
	return vuo
}

// ClearTrustScore clears the value of the "trust_score" field.
func (vuo *VenueUpdateOne) ClearTrustScore() *VenueUpdateOne {
	vuo.mutation.ClearTrustScore()
	return vuo
}

// SetTrustScoreRank sets the "trust_score_rank" field.
func (vuo *VenueUpdateOne) SetTrustScoreRank(i int) *VenueUpdateOne {
	vuo.mutation.ResetTrustScoreRank()
	vuo.mutation.SetTrustScoreRank(i)
	return vuo
}

// SetNillableTrustScoreRank sets the "trust_score_rank" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableTrustScoreRank(i *int) *VenueUpdateOne {
	if i != nil {
		vuo.SetTrustScoreRank(*i)
	}
	return vuo
}

// AddTrustScoreRank adds i to the "trust_score_rank" field.
func (vuo *VenueUpdateOne) AddTrustScoreRank(i int) *VenueUpdateOne {
	vuo.mutation.AddTrustScoreRank(i)
	return vuo
}

// ClearTrustScoreRank clears the value of the "trust_score_rank" field.
func (vuo *VenueUpdateOne) ClearTrustScoreRank() *VenueUpdateOne {
	vuo.mutation.ClearTrustScoreRank()
	return vuo
}

// SetTradeVolume24hBtc sets the "trade_volume_24h_btc" field.
func (vuo *VenueUpdateOne) SetTradeVolume24hBtc(f float64) *VenueUpdateOne {
	vuo.mutation.ResetTradeVolume24hBtc()
	vuo.mutation.SetTradeVolume24hBtc(f)
	return vuo
}

// SetNillableTradeVolume24hBtc sets the "trade_volume_24h_btc" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableTradeVolume24hBtc(f *float64) *VenueUpdateOne {
	if f != nil {
		vuo.SetTradeVolume24hBtc(*f)
	}
	return vuo
}

// AddTradeVolume24hBtc adds f to the "trade_volume_24h_btc" field.
func (vuo *VenueUpdateOne) AddTradeVolume24hBtc(f float64) *VenueUpdateOne {
	vuo.mutation.AddTradeVolume24hBtc(f)
	return vuo
}

// ClearTradeVolume24hBtc clears the value of the "trade_volume_24h_btc" field.
func (vuo *VenueUpdateOne) ClearTradeVolume24hBtc() *VenueUpdateOne {
	vuo.mutation.ClearTradeVolume24hBtc()
	return vuo
}

// SetTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field.
func (vuo *VenueUpdateOne) SetTradeVolume24hBtcNormalized(f float64) *VenueUpdateOne {
	vuo.mutation.ResetTradeVolume24hBtcNormalized()
	vuo.mutation.SetTradeVolume24hBtcNormalized(f)
	return vuo
}

// SetNillableTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableTradeVolume24hBtcNormalized(f *float64) *VenueUpdateOne {
	if f != nil {
		vuo.SetTradeVolume24hBtcNormalized(*f)
	}
	return vuo
}

// AddTradeVolume24hBtcNormalized adds f to the "trade_volume_24h_btc_normalized" field.
func (vuo *VenueUpdateOne) AddTradeVolume24hBtcNormalized(f float64) *VenueUpdateOne {
	vuo.mutation.AddTradeVolume24hBtcNormalized(f)
	return vuo
}

// ClearTradeVolume24hBtcNormalized clears the value of the "trade_volume_24h_btc_normalized" field.
func (vuo *VenueUpdateOne) ClearTradeVolume24hBtcNormalized() *VenueUpdateOne {
	vuo.mutation.ClearTradeVolume24hBtcNormalized()
	return vuo
}

// SetMakerFee sets the "maker_fee" field.
func (vuo *VenueUpdateOne) SetMakerFee(f float64) *VenueUpdateOne {
	vuo.mutation.ResetMakerFee()
	vuo.mutation.SetMakerFee(f)
	return vuo
}

// SetNillableMakerFee sets the "maker_fee" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableMakerFee(f *float64) *VenueUpdateOne {
	if f != nil {
		vuo.SetMakerFee(*f)
	}
	return vuo
}

// AddMakerFee adds f to the "maker_fee" field.
func (vuo *VenueUpdateOne) AddMakerFee(f float64) *VenueUpdateOne {
	vuo.mutation.AddMakerFee(f)
	return vuo
}

// ClearMakerFee clears the value of the "maker_fee" field.
func (vuo *VenueUpdateOne) ClearMakerFee() *VenueUpdateOne {
	vuo.mutation.ClearMakerFee()
	return vuo
}

// SetTakerFee sets the "taker_fee" field.
func (vuo *VenueUpdateOne) SetTakerFee(f float64) *VenueUpdateOne {
	vuo.mutation.ResetTakerFee()
	vuo.mutation.SetTakerFee(f)
	return vuo
}

// SetNillableTakerFee sets the "taker_fee" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableTakerFee(f *float64) *VenueUpdateOne {
	if f != nil {
		vuo.SetTakerFee(*f)
	}
	return vuo
}

// AddTakerFee adds f to the "taker_fee" field.
func (vuo *VenueUpdateOne) AddTakerFee(f float64) *VenueUpdateOne {
	vuo.mutation.AddTakerFee(f)
	return vuo
}

// ClearTakerFee clears the value of the "taker_fee" field.
func (vuo *VenueUpdateOne) ClearTakerFee() *VenueUpdateOne {
	vuo.mutation.ClearTakerFee()
	return vuo
}

// SetSpreadFee sets the "spread_fee" field.
func (vuo *VenueUpdateOne) SetSpreadFee(b bool) *VenueUpdateOne {
	vuo.mutation.SetSpreadFee(b)
	return vuo
}

// SetNillableSpreadFee sets the "spread_fee" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableSpreadFee(b *bool) *VenueUpdateOne {
	if b != nil {
		vuo.SetSpreadFee(*b)
	}
	return vuo
}

// ClearSpreadFee clears the value of the "spread_fee" field.
func (vuo *VenueUpdateOne) ClearSpreadFee() *VenueUpdateOne {
	vuo.mutation.ClearSpreadFee()
	return vuo
}

// SetSupportAPI sets the "support_api" field.
func (vuo *VenueUpdateOne) SetSupportAPI(b bool) *VenueUpdateOne {
	vuo.mutation.SetSupportAPI(b)
	return vuo
}

// SetNillableSupportAPI sets the "support_api" field if the given value is not nil.
func (vuo *VenueUpdateOne) SetNillableSupportAPI(b *bool) *VenueUpdateOne {
	if b != nil {
		vuo.SetSupportAPI(*b)
	}
	return vuo
}

// ClearSupportAPI clears the value of the "support_api" field.
func (vuo *VenueUpdateOne) ClearSupportAPI() *VenueUpdateOne {
	vuo.mutation.ClearSupportAPI()
	return vuo
}

// AddTickerIDs adds the "ticker" edge to the Ticker entity by IDs.
func (vuo *VenueUpdateOne) AddTickerIDs(ids ...int) *VenueUpdateOne {
	vuo.mutation.AddTickerIDs(ids...)
	return vuo
}

// AddTicker adds the "ticker" edges to the Ticker entity.
func (vuo *VenueUpdateOne) AddTicker(t ...*Ticker) *VenueUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vuo.AddTickerIDs(ids...)
}

// AddTradingPairIDs adds the "trading_pair" edge to the TradingPair entity by IDs.
func (vuo *VenueUpdateOne) AddTradingPairIDs(ids ...int) *VenueUpdateOne {
	vuo.mutation.AddTradingPairIDs(ids...)
	return vuo
}

// AddTradingPair adds the "trading_pair" edges to the TradingPair entity.
func (vuo *VenueUpdateOne) AddTradingPair(t ...*TradingPair) *VenueUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vuo.AddTradingPairIDs(ids...)
}

// AddMarketIDs adds the "market" edge to the Market entity by IDs.
func (vuo *VenueUpdateOne) AddMarketIDs(ids ...int) *VenueUpdateOne {
	vuo.mutation.AddMarketIDs(ids...)
	return vuo
}

// AddMarket adds the "market" edges to the Market entity.
func (vuo *VenueUpdateOne) AddMarket(m ...*Market) *VenueUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vuo.AddMarketIDs(ids...)
}

// Mutation returns the VenueMutation object of the builder.
func (vuo *VenueUpdateOne) Mutation() *VenueMutation {
	return vuo.mutation
}

// ClearTicker clears all "ticker" edges to the Ticker entity.
func (vuo *VenueUpdateOne) ClearTicker() *VenueUpdateOne {
	vuo.mutation.ClearTicker()
	return vuo
}

// RemoveTickerIDs removes the "ticker" edge to Ticker entities by IDs.
func (vuo *VenueUpdateOne) RemoveTickerIDs(ids ...int) *VenueUpdateOne {
	vuo.mutation.RemoveTickerIDs(ids...)
	return vuo
}

// RemoveTicker removes "ticker" edges to Ticker entities.
func (vuo *VenueUpdateOne) RemoveTicker(t ...*Ticker) *VenueUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vuo.RemoveTickerIDs(ids...)
}

// ClearTradingPair clears all "trading_pair" edges to the TradingPair entity.
func (vuo *VenueUpdateOne) ClearTradingPair() *VenueUpdateOne {
	vuo.mutation.ClearTradingPair()
	return vuo
}

// RemoveTradingPairIDs removes the "trading_pair" edge to TradingPair entities by IDs.
func (vuo *VenueUpdateOne) RemoveTradingPairIDs(ids ...int) *VenueUpdateOne {
	vuo.mutation.RemoveTradingPairIDs(ids...)
	return vuo
}

// RemoveTradingPair removes "trading_pair" edges to TradingPair entities.
func (vuo *VenueUpdateOne) RemoveTradingPair(t ...*TradingPair) *VenueUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vuo.RemoveTradingPairIDs(ids...)
}

// ClearMarket clears all "market" edges to the Market entity.
func (vuo *VenueUpdateOne) ClearMarket() *VenueUpdateOne {
	vuo.mutation.ClearMarket()
	return vuo
}

// RemoveMarketIDs removes the "market" edge to Market entities by IDs.
func (vuo *VenueUpdateOne) RemoveMarketIDs(ids ...int) *VenueUpdateOne {
	vuo.mutation.RemoveMarketIDs(ids...)
	return vuo
}

// RemoveMarket removes "market" edges to Market entities.
func (vuo *VenueUpdateOne) RemoveMarket(m ...*Market) *VenueUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vuo.RemoveMarketIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VenueUpdateOne) Select(field string, fields ...string) *VenueUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Venue entity.
func (vuo *VenueUpdateOne) Save(ctx context.Context) (*Venue, error) {
	var (
		err  error
		node *Venue
	)
	if len(vuo.hooks) == 0 {
		if err = vuo.check(); err != nil {
			return nil, err
		}
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VenueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vuo.check(); err != nil {
				return nil, err
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			if vuo.hooks[i] == nil {
				return nil, fmt.Errorf("entities: uninitialized hook (forgotten import entities/runtime?)")
			}
			mut = vuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, vuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Venue)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from VenueMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VenueUpdateOne) SaveX(ctx context.Context) *Venue {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VenueUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VenueUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VenueUpdateOne) check() error {
	if v, ok := vuo.mutation.GetType(); ok {
		if err := venue.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`entities: validator failed for field "Venue.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vuo *VenueUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VenueUpdateOne {
	vuo.modifiers = append(vuo.modifiers, modifiers...)
	return vuo
}

func (vuo *VenueUpdateOne) sqlSave(ctx context.Context) (_node *Venue, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   venue.Table,
			Columns: venue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: venue.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entities: missing "Venue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, venue.FieldID)
		for _, f := range fields {
			if !venue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
			}
			if f != venue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.VenueID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: venue.FieldVenueID,
		})
	}
	if value, ok := vuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: venue.FieldType,
		})
	}
	if value, ok := vuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: venue.FieldName,
		})
	}
	if vuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: venue.FieldName,
		})
	}
	if value, ok := vuo.mutation.YearEstablished(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: venue.FieldYearEstablished,
		})
	}
	if value, ok := vuo.mutation.AddedYearEstablished(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: venue.FieldYearEstablished,
		})
	}
	if vuo.mutation.YearEstablishedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: venue.FieldYearEstablished,
		})
	}
	if value, ok := vuo.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: venue.FieldCountry,
		})
	}
	if vuo.mutation.CountryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: venue.FieldCountry,
		})
	}
	if value, ok := vuo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: venue.FieldImage,
		})
	}
	if vuo.mutation.ImageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: venue.FieldImage,
		})
	}
	if value, ok := vuo.mutation.Links(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: venue.FieldLinks,
		})
	}
	if vuo.mutation.LinksCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: venue.FieldLinks,
		})
	}
	if value, ok := vuo.mutation.HasTradingIncentive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: venue.FieldHasTradingIncentive,
		})
	}
	if vuo.mutation.HasTradingIncentiveCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: venue.FieldHasTradingIncentive,
		})
	}
	if value, ok := vuo.mutation.Centralized(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: venue.FieldCentralized,
		})
	}
	if vuo.mutation.CentralizedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: venue.FieldCentralized,
		})
	}
	if value, ok := vuo.mutation.PublicNotice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: venue.FieldPublicNotice,
		})
	}
	if vuo.mutation.PublicNoticeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: venue.FieldPublicNotice,
		})
	}
	if value, ok := vuo.mutation.AlertNotice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: venue.FieldAlertNotice,
		})
	}
	if vuo.mutation.AlertNoticeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: venue.FieldAlertNotice,
		})
	}
	if value, ok := vuo.mutation.TrustScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: venue.FieldTrustScore,
		})
	}
	if value, ok := vuo.mutation.AddedTrustScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: venue.FieldTrustScore,
		})
	}
	if vuo.mutation.TrustScoreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: venue.FieldTrustScore,
		})
	}
	if value, ok := vuo.mutation.TrustScoreRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: venue.FieldTrustScoreRank,
		})
	}
	if value, ok := vuo.mutation.AddedTrustScoreRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: venue.FieldTrustScoreRank,
		})
	}
	if vuo.mutation.TrustScoreRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: venue.FieldTrustScoreRank,
		})
	}
	if value, ok := vuo.mutation.TradeVolume24hBtc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: venue.FieldTradeVolume24hBtc,
		})
	}
	if value, ok := vuo.mutation.AddedTradeVolume24hBtc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: venue.FieldTradeVolume24hBtc,
		})
	}
	if vuo.mutation.TradeVolume24hBtcCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: venue.FieldTradeVolume24hBtc,
		})
	}
	if value, ok := vuo.mutation.TradeVolume24hBtcNormalized(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: venue.FieldTradeVolume24hBtcNormalized,
		})
	}
	if value, ok := vuo.mutation.AddedTradeVolume24hBtcNormalized(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: venue.FieldTradeVolume24hBtcNormalized,
		})
	}
	if vuo.mutation.TradeVolume24hBtcNormalizedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: venue.FieldTradeVolume24hBtcNormalized,
		})
	}
	if value, ok := vuo.mutation.MakerFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: venue.FieldMakerFee,
		})
	}
	if value, ok := vuo.mutation.AddedMakerFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: venue.FieldMakerFee,
		})
	}
	if vuo.mutation.MakerFeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: venue.FieldMakerFee,
		})
	}
	if value, ok := vuo.mutation.TakerFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: venue.FieldTakerFee,
		})
	}
	if value, ok := vuo.mutation.AddedTakerFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: venue.FieldTakerFee,
		})
	}
	if vuo.mutation.TakerFeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: venue.FieldTakerFee,
		})
	}
	if value, ok := vuo.mutation.SpreadFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: venue.FieldSpreadFee,
		})
	}
	if vuo.mutation.SpreadFeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: venue.FieldSpreadFee,
		})
	}
	if value, ok := vuo.mutation.SupportAPI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: venue.FieldSupportAPI,
		})
	}
	if vuo.mutation.SupportAPICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: venue.FieldSupportAPI,
		})
	}
	if vuo.mutation.TickerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.TickerTable,
			Columns: []string{venue.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticker.FieldID,
				},
			},
		}
		edge.Schema = vuo.schemaConfig.Ticker
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedTickerIDs(); len(nodes) > 0 && !vuo.mutation.TickerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.TickerTable,
			Columns: []string{venue.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticker.FieldID,
				},
			},
		}
		edge.Schema = vuo.schemaConfig.Ticker
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.TickerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.TickerTable,
			Columns: []string{venue.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticker.FieldID,
				},
			},
		}
		edge.Schema = vuo.schemaConfig.Ticker
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.TradingPairCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.TradingPairTable,
			Columns: []string{venue.TradingPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradingpair.FieldID,
				},
			},
		}
		edge.Schema = vuo.schemaConfig.TradingPair
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedTradingPairIDs(); len(nodes) > 0 && !vuo.mutation.TradingPairCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.TradingPairTable,
			Columns: []string{venue.TradingPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradingpair.FieldID,
				},
			},
		}
		edge.Schema = vuo.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.TradingPairIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.TradingPairTable,
			Columns: []string{venue.TradingPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradingpair.FieldID,
				},
			},
		}
		edge.Schema = vuo.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.MarketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.MarketTable,
			Columns: []string{venue.MarketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: market.FieldID,
				},
			},
		}
		edge.Schema = vuo.schemaConfig.Market
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedMarketIDs(); len(nodes) > 0 && !vuo.mutation.MarketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.MarketTable,
			Columns: []string{venue.MarketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: market.FieldID,
				},
			},
		}
		edge.Schema = vuo.schemaConfig.Market
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.MarketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.MarketTable,
			Columns: []string{venue.MarketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: market.FieldID,
				},
			},
		}
		edge.Schema = vuo.schemaConfig.Market
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = vuo.schemaConfig.Venue
	ctx = internal.NewSchemaConfigContext(ctx, vuo.schemaConfig)
	_spec.Modifiers = vuo.modifiers
	_node = &Venue{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{venue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
