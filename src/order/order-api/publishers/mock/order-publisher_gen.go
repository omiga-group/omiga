// Code generated by MockGen. DO NOT EDIT.
// Source: order-publisher.go

// Package mock_publishers is a generated GoMock package.
package mock_publishers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/omiga-group/omiga/src/order/shared/models"
	repositories "github.com/omiga-group/omiga/src/order/shared/repositories"
)

// MockOrderPublisher is a mock of OrderPublisher interface.
type MockOrderPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockOrderPublisherMockRecorder
}

// MockOrderPublisherMockRecorder is the mock recorder for MockOrderPublisher.
type MockOrderPublisherMockRecorder struct {
	mock *MockOrderPublisher
}

// NewMockOrderPublisher creates a new mock instance.
func NewMockOrderPublisher(ctrl *gomock.Controller) *MockOrderPublisher {
	mock := &MockOrderPublisher{ctrl: ctrl}
	mock.recorder = &MockOrderPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderPublisher) EXPECT() *MockOrderPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockOrderPublisher) Publish(ctx context.Context, tx *repositories.Tx, orderBeforeState *models.Order, orderAfterState models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, tx, orderBeforeState, orderAfterState)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockOrderPublisherMockRecorder) Publish(ctx, tx, orderBeforeState, orderAfterState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockOrderPublisher)(nil).Publish), ctx, tx, orderBeforeState, orderAfterState)
}
