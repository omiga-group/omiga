// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omiga-group/omiga/src/venue/shared/entities/ticker"
	"github.com/omiga-group/omiga/src/venue/shared/entities/venue"
	"github.com/omiga-group/omiga/src/venue/shared/models"
)

// TickerCreate is the builder for creating a Ticker entity.
type TickerCreate struct {
	config
	mutation *TickerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetBase sets the "base" field.
func (tc *TickerCreate) SetBase(s string) *TickerCreate {
	tc.mutation.SetBase(s)
	return tc
}

// SetBaseCoinID sets the "base_coin_id" field.
func (tc *TickerCreate) SetBaseCoinID(s string) *TickerCreate {
	tc.mutation.SetBaseCoinID(s)
	return tc
}

// SetNillableBaseCoinID sets the "base_coin_id" field if the given value is not nil.
func (tc *TickerCreate) SetNillableBaseCoinID(s *string) *TickerCreate {
	if s != nil {
		tc.SetBaseCoinID(*s)
	}
	return tc
}

// SetCounter sets the "counter" field.
func (tc *TickerCreate) SetCounter(s string) *TickerCreate {
	tc.mutation.SetCounter(s)
	return tc
}

// SetCounterCoinID sets the "counter_coin_id" field.
func (tc *TickerCreate) SetCounterCoinID(s string) *TickerCreate {
	tc.mutation.SetCounterCoinID(s)
	return tc
}

// SetNillableCounterCoinID sets the "counter_coin_id" field if the given value is not nil.
func (tc *TickerCreate) SetNillableCounterCoinID(s *string) *TickerCreate {
	if s != nil {
		tc.SetCounterCoinID(*s)
	}
	return tc
}

// SetMarket sets the "market" field.
func (tc *TickerCreate) SetMarket(m models.Market) *TickerCreate {
	tc.mutation.SetMarket(m)
	return tc
}

// SetNillableMarket sets the "market" field if the given value is not nil.
func (tc *TickerCreate) SetNillableMarket(m *models.Market) *TickerCreate {
	if m != nil {
		tc.SetMarket(*m)
	}
	return tc
}

// SetLast sets the "last" field.
func (tc *TickerCreate) SetLast(f float64) *TickerCreate {
	tc.mutation.SetLast(f)
	return tc
}

// SetNillableLast sets the "last" field if the given value is not nil.
func (tc *TickerCreate) SetNillableLast(f *float64) *TickerCreate {
	if f != nil {
		tc.SetLast(*f)
	}
	return tc
}

// SetVolume sets the "volume" field.
func (tc *TickerCreate) SetVolume(f float64) *TickerCreate {
	tc.mutation.SetVolume(f)
	return tc
}

// SetNillableVolume sets the "volume" field if the given value is not nil.
func (tc *TickerCreate) SetNillableVolume(f *float64) *TickerCreate {
	if f != nil {
		tc.SetVolume(*f)
	}
	return tc
}

// SetConvertedLast sets the "converted_last" field.
func (tc *TickerCreate) SetConvertedLast(md models.ConvertedDetails) *TickerCreate {
	tc.mutation.SetConvertedLast(md)
	return tc
}

// SetNillableConvertedLast sets the "converted_last" field if the given value is not nil.
func (tc *TickerCreate) SetNillableConvertedLast(md *models.ConvertedDetails) *TickerCreate {
	if md != nil {
		tc.SetConvertedLast(*md)
	}
	return tc
}

// SetConvertedVolume sets the "converted_volume" field.
func (tc *TickerCreate) SetConvertedVolume(md models.ConvertedDetails) *TickerCreate {
	tc.mutation.SetConvertedVolume(md)
	return tc
}

// SetNillableConvertedVolume sets the "converted_volume" field if the given value is not nil.
func (tc *TickerCreate) SetNillableConvertedVolume(md *models.ConvertedDetails) *TickerCreate {
	if md != nil {
		tc.SetConvertedVolume(*md)
	}
	return tc
}

// SetTrustScore sets the "trust_score" field.
func (tc *TickerCreate) SetTrustScore(s string) *TickerCreate {
	tc.mutation.SetTrustScore(s)
	return tc
}

// SetNillableTrustScore sets the "trust_score" field if the given value is not nil.
func (tc *TickerCreate) SetNillableTrustScore(s *string) *TickerCreate {
	if s != nil {
		tc.SetTrustScore(*s)
	}
	return tc
}

// SetBidAskSpreadPercentage sets the "bid_ask_spread_percentage" field.
func (tc *TickerCreate) SetBidAskSpreadPercentage(f float64) *TickerCreate {
	tc.mutation.SetBidAskSpreadPercentage(f)
	return tc
}

// SetNillableBidAskSpreadPercentage sets the "bid_ask_spread_percentage" field if the given value is not nil.
func (tc *TickerCreate) SetNillableBidAskSpreadPercentage(f *float64) *TickerCreate {
	if f != nil {
		tc.SetBidAskSpreadPercentage(*f)
	}
	return tc
}

// SetTimestamp sets the "timestamp" field.
func (tc *TickerCreate) SetTimestamp(t time.Time) *TickerCreate {
	tc.mutation.SetTimestamp(t)
	return tc
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (tc *TickerCreate) SetNillableTimestamp(t *time.Time) *TickerCreate {
	if t != nil {
		tc.SetTimestamp(*t)
	}
	return tc
}

// SetLastTradedAt sets the "last_traded_at" field.
func (tc *TickerCreate) SetLastTradedAt(t time.Time) *TickerCreate {
	tc.mutation.SetLastTradedAt(t)
	return tc
}

// SetNillableLastTradedAt sets the "last_traded_at" field if the given value is not nil.
func (tc *TickerCreate) SetNillableLastTradedAt(t *time.Time) *TickerCreate {
	if t != nil {
		tc.SetLastTradedAt(*t)
	}
	return tc
}

// SetLastFetchAt sets the "last_fetch_at" field.
func (tc *TickerCreate) SetLastFetchAt(t time.Time) *TickerCreate {
	tc.mutation.SetLastFetchAt(t)
	return tc
}

// SetNillableLastFetchAt sets the "last_fetch_at" field if the given value is not nil.
func (tc *TickerCreate) SetNillableLastFetchAt(t *time.Time) *TickerCreate {
	if t != nil {
		tc.SetLastFetchAt(*t)
	}
	return tc
}

// SetIsAnomaly sets the "is_anomaly" field.
func (tc *TickerCreate) SetIsAnomaly(b bool) *TickerCreate {
	tc.mutation.SetIsAnomaly(b)
	return tc
}

// SetNillableIsAnomaly sets the "is_anomaly" field if the given value is not nil.
func (tc *TickerCreate) SetNillableIsAnomaly(b *bool) *TickerCreate {
	if b != nil {
		tc.SetIsAnomaly(*b)
	}
	return tc
}

// SetIsStale sets the "is_stale" field.
func (tc *TickerCreate) SetIsStale(b bool) *TickerCreate {
	tc.mutation.SetIsStale(b)
	return tc
}

// SetNillableIsStale sets the "is_stale" field if the given value is not nil.
func (tc *TickerCreate) SetNillableIsStale(b *bool) *TickerCreate {
	if b != nil {
		tc.SetIsStale(*b)
	}
	return tc
}

// SetTradeURL sets the "trade_url" field.
func (tc *TickerCreate) SetTradeURL(s string) *TickerCreate {
	tc.mutation.SetTradeURL(s)
	return tc
}

// SetNillableTradeURL sets the "trade_url" field if the given value is not nil.
func (tc *TickerCreate) SetNillableTradeURL(s *string) *TickerCreate {
	if s != nil {
		tc.SetTradeURL(*s)
	}
	return tc
}

// SetTokenInfoURL sets the "token_info_url" field.
func (tc *TickerCreate) SetTokenInfoURL(s string) *TickerCreate {
	tc.mutation.SetTokenInfoURL(s)
	return tc
}

// SetNillableTokenInfoURL sets the "token_info_url" field if the given value is not nil.
func (tc *TickerCreate) SetNillableTokenInfoURL(s *string) *TickerCreate {
	if s != nil {
		tc.SetTokenInfoURL(*s)
	}
	return tc
}

// SetVenueID sets the "venue" edge to the Venue entity by ID.
func (tc *TickerCreate) SetVenueID(id int) *TickerCreate {
	tc.mutation.SetVenueID(id)
	return tc
}

// SetVenue sets the "venue" edge to the Venue entity.
func (tc *TickerCreate) SetVenue(v *Venue) *TickerCreate {
	return tc.SetVenueID(v.ID)
}

// Mutation returns the TickerMutation object of the builder.
func (tc *TickerCreate) Mutation() *TickerMutation {
	return tc.mutation
}

// Save creates the Ticker in the database.
func (tc *TickerCreate) Save(ctx context.Context) (*Ticker, error) {
	var (
		err  error
		node *Ticker
	)
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TickerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("entities: uninitialized hook (forgotten import entities/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Ticker)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TickerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TickerCreate) SaveX(ctx context.Context) *Ticker {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TickerCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TickerCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TickerCreate) check() error {
	if _, ok := tc.mutation.Base(); !ok {
		return &ValidationError{Name: "base", err: errors.New(`entities: missing required field "Ticker.base"`)}
	}
	if _, ok := tc.mutation.Counter(); !ok {
		return &ValidationError{Name: "counter", err: errors.New(`entities: missing required field "Ticker.counter"`)}
	}
	if _, ok := tc.mutation.VenueID(); !ok {
		return &ValidationError{Name: "venue", err: errors.New(`entities: missing required edge "Ticker.venue"`)}
	}
	return nil
}

func (tc *TickerCreate) sqlSave(ctx context.Context) (*Ticker, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tc *TickerCreate) createSpec() (*Ticker, *sqlgraph.CreateSpec) {
	var (
		_node = &Ticker{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ticker.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ticker.FieldID,
			},
		}
	)
	_spec.Schema = tc.schemaConfig.Ticker
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.Base(); ok {
		_spec.SetField(ticker.FieldBase, field.TypeString, value)
		_node.Base = value
	}
	if value, ok := tc.mutation.BaseCoinID(); ok {
		_spec.SetField(ticker.FieldBaseCoinID, field.TypeString, value)
		_node.BaseCoinID = value
	}
	if value, ok := tc.mutation.Counter(); ok {
		_spec.SetField(ticker.FieldCounter, field.TypeString, value)
		_node.Counter = value
	}
	if value, ok := tc.mutation.CounterCoinID(); ok {
		_spec.SetField(ticker.FieldCounterCoinID, field.TypeString, value)
		_node.CounterCoinID = value
	}
	if value, ok := tc.mutation.Market(); ok {
		_spec.SetField(ticker.FieldMarket, field.TypeJSON, value)
		_node.Market = value
	}
	if value, ok := tc.mutation.Last(); ok {
		_spec.SetField(ticker.FieldLast, field.TypeFloat64, value)
		_node.Last = value
	}
	if value, ok := tc.mutation.Volume(); ok {
		_spec.SetField(ticker.FieldVolume, field.TypeFloat64, value)
		_node.Volume = value
	}
	if value, ok := tc.mutation.ConvertedLast(); ok {
		_spec.SetField(ticker.FieldConvertedLast, field.TypeJSON, value)
		_node.ConvertedLast = value
	}
	if value, ok := tc.mutation.ConvertedVolume(); ok {
		_spec.SetField(ticker.FieldConvertedVolume, field.TypeJSON, value)
		_node.ConvertedVolume = value
	}
	if value, ok := tc.mutation.TrustScore(); ok {
		_spec.SetField(ticker.FieldTrustScore, field.TypeString, value)
		_node.TrustScore = value
	}
	if value, ok := tc.mutation.BidAskSpreadPercentage(); ok {
		_spec.SetField(ticker.FieldBidAskSpreadPercentage, field.TypeFloat64, value)
		_node.BidAskSpreadPercentage = value
	}
	if value, ok := tc.mutation.Timestamp(); ok {
		_spec.SetField(ticker.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := tc.mutation.LastTradedAt(); ok {
		_spec.SetField(ticker.FieldLastTradedAt, field.TypeTime, value)
		_node.LastTradedAt = value
	}
	if value, ok := tc.mutation.LastFetchAt(); ok {
		_spec.SetField(ticker.FieldLastFetchAt, field.TypeTime, value)
		_node.LastFetchAt = value
	}
	if value, ok := tc.mutation.IsAnomaly(); ok {
		_spec.SetField(ticker.FieldIsAnomaly, field.TypeBool, value)
		_node.IsAnomaly = value
	}
	if value, ok := tc.mutation.IsStale(); ok {
		_spec.SetField(ticker.FieldIsStale, field.TypeBool, value)
		_node.IsStale = value
	}
	if value, ok := tc.mutation.TradeURL(); ok {
		_spec.SetField(ticker.FieldTradeURL, field.TypeString, value)
		_node.TradeURL = value
	}
	if value, ok := tc.mutation.TokenInfoURL(); ok {
		_spec.SetField(ticker.FieldTokenInfoURL, field.TypeString, value)
		_node.TokenInfoURL = value
	}
	if nodes := tc.mutation.VenueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticker.VenueTable,
			Columns: []string{ticker.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: venue.FieldID,
				},
			},
		}
		edge.Schema = tc.schemaConfig.Ticker
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.venue_ticker = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ticker.Create().
//		SetBase(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TickerUpsert) {
//			SetBase(v+v).
//		}).
//		Exec(ctx)
func (tc *TickerCreate) OnConflict(opts ...sql.ConflictOption) *TickerUpsertOne {
	tc.conflict = opts
	return &TickerUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ticker.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TickerCreate) OnConflictColumns(columns ...string) *TickerUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TickerUpsertOne{
		create: tc,
	}
}

type (
	// TickerUpsertOne is the builder for "upsert"-ing
	//  one Ticker node.
	TickerUpsertOne struct {
		create *TickerCreate
	}

	// TickerUpsert is the "OnConflict" setter.
	TickerUpsert struct {
		*sql.UpdateSet
	}
)

// SetBase sets the "base" field.
func (u *TickerUpsert) SetBase(v string) *TickerUpsert {
	u.Set(ticker.FieldBase, v)
	return u
}

// UpdateBase sets the "base" field to the value that was provided on create.
func (u *TickerUpsert) UpdateBase() *TickerUpsert {
	u.SetExcluded(ticker.FieldBase)
	return u
}

// SetBaseCoinID sets the "base_coin_id" field.
func (u *TickerUpsert) SetBaseCoinID(v string) *TickerUpsert {
	u.Set(ticker.FieldBaseCoinID, v)
	return u
}

// UpdateBaseCoinID sets the "base_coin_id" field to the value that was provided on create.
func (u *TickerUpsert) UpdateBaseCoinID() *TickerUpsert {
	u.SetExcluded(ticker.FieldBaseCoinID)
	return u
}

// ClearBaseCoinID clears the value of the "base_coin_id" field.
func (u *TickerUpsert) ClearBaseCoinID() *TickerUpsert {
	u.SetNull(ticker.FieldBaseCoinID)
	return u
}

// SetCounter sets the "counter" field.
func (u *TickerUpsert) SetCounter(v string) *TickerUpsert {
	u.Set(ticker.FieldCounter, v)
	return u
}

// UpdateCounter sets the "counter" field to the value that was provided on create.
func (u *TickerUpsert) UpdateCounter() *TickerUpsert {
	u.SetExcluded(ticker.FieldCounter)
	return u
}

// SetCounterCoinID sets the "counter_coin_id" field.
func (u *TickerUpsert) SetCounterCoinID(v string) *TickerUpsert {
	u.Set(ticker.FieldCounterCoinID, v)
	return u
}

// UpdateCounterCoinID sets the "counter_coin_id" field to the value that was provided on create.
func (u *TickerUpsert) UpdateCounterCoinID() *TickerUpsert {
	u.SetExcluded(ticker.FieldCounterCoinID)
	return u
}

// ClearCounterCoinID clears the value of the "counter_coin_id" field.
func (u *TickerUpsert) ClearCounterCoinID() *TickerUpsert {
	u.SetNull(ticker.FieldCounterCoinID)
	return u
}

// SetMarket sets the "market" field.
func (u *TickerUpsert) SetMarket(v models.Market) *TickerUpsert {
	u.Set(ticker.FieldMarket, v)
	return u
}

// UpdateMarket sets the "market" field to the value that was provided on create.
func (u *TickerUpsert) UpdateMarket() *TickerUpsert {
	u.SetExcluded(ticker.FieldMarket)
	return u
}

// ClearMarket clears the value of the "market" field.
func (u *TickerUpsert) ClearMarket() *TickerUpsert {
	u.SetNull(ticker.FieldMarket)
	return u
}

// SetLast sets the "last" field.
func (u *TickerUpsert) SetLast(v float64) *TickerUpsert {
	u.Set(ticker.FieldLast, v)
	return u
}

// UpdateLast sets the "last" field to the value that was provided on create.
func (u *TickerUpsert) UpdateLast() *TickerUpsert {
	u.SetExcluded(ticker.FieldLast)
	return u
}

// AddLast adds v to the "last" field.
func (u *TickerUpsert) AddLast(v float64) *TickerUpsert {
	u.Add(ticker.FieldLast, v)
	return u
}

// ClearLast clears the value of the "last" field.
func (u *TickerUpsert) ClearLast() *TickerUpsert {
	u.SetNull(ticker.FieldLast)
	return u
}

// SetVolume sets the "volume" field.
func (u *TickerUpsert) SetVolume(v float64) *TickerUpsert {
	u.Set(ticker.FieldVolume, v)
	return u
}

// UpdateVolume sets the "volume" field to the value that was provided on create.
func (u *TickerUpsert) UpdateVolume() *TickerUpsert {
	u.SetExcluded(ticker.FieldVolume)
	return u
}

// AddVolume adds v to the "volume" field.
func (u *TickerUpsert) AddVolume(v float64) *TickerUpsert {
	u.Add(ticker.FieldVolume, v)
	return u
}

// ClearVolume clears the value of the "volume" field.
func (u *TickerUpsert) ClearVolume() *TickerUpsert {
	u.SetNull(ticker.FieldVolume)
	return u
}

// SetConvertedLast sets the "converted_last" field.
func (u *TickerUpsert) SetConvertedLast(v models.ConvertedDetails) *TickerUpsert {
	u.Set(ticker.FieldConvertedLast, v)
	return u
}

// UpdateConvertedLast sets the "converted_last" field to the value that was provided on create.
func (u *TickerUpsert) UpdateConvertedLast() *TickerUpsert {
	u.SetExcluded(ticker.FieldConvertedLast)
	return u
}

// ClearConvertedLast clears the value of the "converted_last" field.
func (u *TickerUpsert) ClearConvertedLast() *TickerUpsert {
	u.SetNull(ticker.FieldConvertedLast)
	return u
}

// SetConvertedVolume sets the "converted_volume" field.
func (u *TickerUpsert) SetConvertedVolume(v models.ConvertedDetails) *TickerUpsert {
	u.Set(ticker.FieldConvertedVolume, v)
	return u
}

// UpdateConvertedVolume sets the "converted_volume" field to the value that was provided on create.
func (u *TickerUpsert) UpdateConvertedVolume() *TickerUpsert {
	u.SetExcluded(ticker.FieldConvertedVolume)
	return u
}

// ClearConvertedVolume clears the value of the "converted_volume" field.
func (u *TickerUpsert) ClearConvertedVolume() *TickerUpsert {
	u.SetNull(ticker.FieldConvertedVolume)
	return u
}

// SetTrustScore sets the "trust_score" field.
func (u *TickerUpsert) SetTrustScore(v string) *TickerUpsert {
	u.Set(ticker.FieldTrustScore, v)
	return u
}

// UpdateTrustScore sets the "trust_score" field to the value that was provided on create.
func (u *TickerUpsert) UpdateTrustScore() *TickerUpsert {
	u.SetExcluded(ticker.FieldTrustScore)
	return u
}

// ClearTrustScore clears the value of the "trust_score" field.
func (u *TickerUpsert) ClearTrustScore() *TickerUpsert {
	u.SetNull(ticker.FieldTrustScore)
	return u
}

// SetBidAskSpreadPercentage sets the "bid_ask_spread_percentage" field.
func (u *TickerUpsert) SetBidAskSpreadPercentage(v float64) *TickerUpsert {
	u.Set(ticker.FieldBidAskSpreadPercentage, v)
	return u
}

// UpdateBidAskSpreadPercentage sets the "bid_ask_spread_percentage" field to the value that was provided on create.
func (u *TickerUpsert) UpdateBidAskSpreadPercentage() *TickerUpsert {
	u.SetExcluded(ticker.FieldBidAskSpreadPercentage)
	return u
}

// AddBidAskSpreadPercentage adds v to the "bid_ask_spread_percentage" field.
func (u *TickerUpsert) AddBidAskSpreadPercentage(v float64) *TickerUpsert {
	u.Add(ticker.FieldBidAskSpreadPercentage, v)
	return u
}

// ClearBidAskSpreadPercentage clears the value of the "bid_ask_spread_percentage" field.
func (u *TickerUpsert) ClearBidAskSpreadPercentage() *TickerUpsert {
	u.SetNull(ticker.FieldBidAskSpreadPercentage)
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *TickerUpsert) SetTimestamp(v time.Time) *TickerUpsert {
	u.Set(ticker.FieldTimestamp, v)
	return u
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *TickerUpsert) UpdateTimestamp() *TickerUpsert {
	u.SetExcluded(ticker.FieldTimestamp)
	return u
}

// ClearTimestamp clears the value of the "timestamp" field.
func (u *TickerUpsert) ClearTimestamp() *TickerUpsert {
	u.SetNull(ticker.FieldTimestamp)
	return u
}

// SetLastTradedAt sets the "last_traded_at" field.
func (u *TickerUpsert) SetLastTradedAt(v time.Time) *TickerUpsert {
	u.Set(ticker.FieldLastTradedAt, v)
	return u
}

// UpdateLastTradedAt sets the "last_traded_at" field to the value that was provided on create.
func (u *TickerUpsert) UpdateLastTradedAt() *TickerUpsert {
	u.SetExcluded(ticker.FieldLastTradedAt)
	return u
}

// ClearLastTradedAt clears the value of the "last_traded_at" field.
func (u *TickerUpsert) ClearLastTradedAt() *TickerUpsert {
	u.SetNull(ticker.FieldLastTradedAt)
	return u
}

// SetLastFetchAt sets the "last_fetch_at" field.
func (u *TickerUpsert) SetLastFetchAt(v time.Time) *TickerUpsert {
	u.Set(ticker.FieldLastFetchAt, v)
	return u
}

// UpdateLastFetchAt sets the "last_fetch_at" field to the value that was provided on create.
func (u *TickerUpsert) UpdateLastFetchAt() *TickerUpsert {
	u.SetExcluded(ticker.FieldLastFetchAt)
	return u
}

// ClearLastFetchAt clears the value of the "last_fetch_at" field.
func (u *TickerUpsert) ClearLastFetchAt() *TickerUpsert {
	u.SetNull(ticker.FieldLastFetchAt)
	return u
}

// SetIsAnomaly sets the "is_anomaly" field.
func (u *TickerUpsert) SetIsAnomaly(v bool) *TickerUpsert {
	u.Set(ticker.FieldIsAnomaly, v)
	return u
}

// UpdateIsAnomaly sets the "is_anomaly" field to the value that was provided on create.
func (u *TickerUpsert) UpdateIsAnomaly() *TickerUpsert {
	u.SetExcluded(ticker.FieldIsAnomaly)
	return u
}

// ClearIsAnomaly clears the value of the "is_anomaly" field.
func (u *TickerUpsert) ClearIsAnomaly() *TickerUpsert {
	u.SetNull(ticker.FieldIsAnomaly)
	return u
}

// SetIsStale sets the "is_stale" field.
func (u *TickerUpsert) SetIsStale(v bool) *TickerUpsert {
	u.Set(ticker.FieldIsStale, v)
	return u
}

// UpdateIsStale sets the "is_stale" field to the value that was provided on create.
func (u *TickerUpsert) UpdateIsStale() *TickerUpsert {
	u.SetExcluded(ticker.FieldIsStale)
	return u
}

// ClearIsStale clears the value of the "is_stale" field.
func (u *TickerUpsert) ClearIsStale() *TickerUpsert {
	u.SetNull(ticker.FieldIsStale)
	return u
}

// SetTradeURL sets the "trade_url" field.
func (u *TickerUpsert) SetTradeURL(v string) *TickerUpsert {
	u.Set(ticker.FieldTradeURL, v)
	return u
}

// UpdateTradeURL sets the "trade_url" field to the value that was provided on create.
func (u *TickerUpsert) UpdateTradeURL() *TickerUpsert {
	u.SetExcluded(ticker.FieldTradeURL)
	return u
}

// ClearTradeURL clears the value of the "trade_url" field.
func (u *TickerUpsert) ClearTradeURL() *TickerUpsert {
	u.SetNull(ticker.FieldTradeURL)
	return u
}

// SetTokenInfoURL sets the "token_info_url" field.
func (u *TickerUpsert) SetTokenInfoURL(v string) *TickerUpsert {
	u.Set(ticker.FieldTokenInfoURL, v)
	return u
}

// UpdateTokenInfoURL sets the "token_info_url" field to the value that was provided on create.
func (u *TickerUpsert) UpdateTokenInfoURL() *TickerUpsert {
	u.SetExcluded(ticker.FieldTokenInfoURL)
	return u
}

// ClearTokenInfoURL clears the value of the "token_info_url" field.
func (u *TickerUpsert) ClearTokenInfoURL() *TickerUpsert {
	u.SetNull(ticker.FieldTokenInfoURL)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Ticker.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TickerUpsertOne) UpdateNewValues() *TickerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ticker.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TickerUpsertOne) Ignore() *TickerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TickerUpsertOne) DoNothing() *TickerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TickerCreate.OnConflict
// documentation for more info.
func (u *TickerUpsertOne) Update(set func(*TickerUpsert)) *TickerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TickerUpsert{UpdateSet: update})
	}))
	return u
}

// SetBase sets the "base" field.
func (u *TickerUpsertOne) SetBase(v string) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.SetBase(v)
	})
}

// UpdateBase sets the "base" field to the value that was provided on create.
func (u *TickerUpsertOne) UpdateBase() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateBase()
	})
}

// SetBaseCoinID sets the "base_coin_id" field.
func (u *TickerUpsertOne) SetBaseCoinID(v string) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.SetBaseCoinID(v)
	})
}

// UpdateBaseCoinID sets the "base_coin_id" field to the value that was provided on create.
func (u *TickerUpsertOne) UpdateBaseCoinID() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateBaseCoinID()
	})
}

// ClearBaseCoinID clears the value of the "base_coin_id" field.
func (u *TickerUpsertOne) ClearBaseCoinID() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.ClearBaseCoinID()
	})
}

// SetCounter sets the "counter" field.
func (u *TickerUpsertOne) SetCounter(v string) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.SetCounter(v)
	})
}

// UpdateCounter sets the "counter" field to the value that was provided on create.
func (u *TickerUpsertOne) UpdateCounter() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateCounter()
	})
}

// SetCounterCoinID sets the "counter_coin_id" field.
func (u *TickerUpsertOne) SetCounterCoinID(v string) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.SetCounterCoinID(v)
	})
}

// UpdateCounterCoinID sets the "counter_coin_id" field to the value that was provided on create.
func (u *TickerUpsertOne) UpdateCounterCoinID() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateCounterCoinID()
	})
}

// ClearCounterCoinID clears the value of the "counter_coin_id" field.
func (u *TickerUpsertOne) ClearCounterCoinID() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.ClearCounterCoinID()
	})
}

// SetMarket sets the "market" field.
func (u *TickerUpsertOne) SetMarket(v models.Market) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.SetMarket(v)
	})
}

// UpdateMarket sets the "market" field to the value that was provided on create.
func (u *TickerUpsertOne) UpdateMarket() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateMarket()
	})
}

// ClearMarket clears the value of the "market" field.
func (u *TickerUpsertOne) ClearMarket() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.ClearMarket()
	})
}

// SetLast sets the "last" field.
func (u *TickerUpsertOne) SetLast(v float64) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.SetLast(v)
	})
}

// AddLast adds v to the "last" field.
func (u *TickerUpsertOne) AddLast(v float64) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.AddLast(v)
	})
}

// UpdateLast sets the "last" field to the value that was provided on create.
func (u *TickerUpsertOne) UpdateLast() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateLast()
	})
}

// ClearLast clears the value of the "last" field.
func (u *TickerUpsertOne) ClearLast() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.ClearLast()
	})
}

// SetVolume sets the "volume" field.
func (u *TickerUpsertOne) SetVolume(v float64) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.SetVolume(v)
	})
}

// AddVolume adds v to the "volume" field.
func (u *TickerUpsertOne) AddVolume(v float64) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.AddVolume(v)
	})
}

// UpdateVolume sets the "volume" field to the value that was provided on create.
func (u *TickerUpsertOne) UpdateVolume() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateVolume()
	})
}

// ClearVolume clears the value of the "volume" field.
func (u *TickerUpsertOne) ClearVolume() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.ClearVolume()
	})
}

// SetConvertedLast sets the "converted_last" field.
func (u *TickerUpsertOne) SetConvertedLast(v models.ConvertedDetails) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.SetConvertedLast(v)
	})
}

// UpdateConvertedLast sets the "converted_last" field to the value that was provided on create.
func (u *TickerUpsertOne) UpdateConvertedLast() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateConvertedLast()
	})
}

// ClearConvertedLast clears the value of the "converted_last" field.
func (u *TickerUpsertOne) ClearConvertedLast() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.ClearConvertedLast()
	})
}

// SetConvertedVolume sets the "converted_volume" field.
func (u *TickerUpsertOne) SetConvertedVolume(v models.ConvertedDetails) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.SetConvertedVolume(v)
	})
}

// UpdateConvertedVolume sets the "converted_volume" field to the value that was provided on create.
func (u *TickerUpsertOne) UpdateConvertedVolume() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateConvertedVolume()
	})
}

// ClearConvertedVolume clears the value of the "converted_volume" field.
func (u *TickerUpsertOne) ClearConvertedVolume() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.ClearConvertedVolume()
	})
}

// SetTrustScore sets the "trust_score" field.
func (u *TickerUpsertOne) SetTrustScore(v string) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.SetTrustScore(v)
	})
}

// UpdateTrustScore sets the "trust_score" field to the value that was provided on create.
func (u *TickerUpsertOne) UpdateTrustScore() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateTrustScore()
	})
}

// ClearTrustScore clears the value of the "trust_score" field.
func (u *TickerUpsertOne) ClearTrustScore() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.ClearTrustScore()
	})
}

// SetBidAskSpreadPercentage sets the "bid_ask_spread_percentage" field.
func (u *TickerUpsertOne) SetBidAskSpreadPercentage(v float64) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.SetBidAskSpreadPercentage(v)
	})
}

// AddBidAskSpreadPercentage adds v to the "bid_ask_spread_percentage" field.
func (u *TickerUpsertOne) AddBidAskSpreadPercentage(v float64) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.AddBidAskSpreadPercentage(v)
	})
}

// UpdateBidAskSpreadPercentage sets the "bid_ask_spread_percentage" field to the value that was provided on create.
func (u *TickerUpsertOne) UpdateBidAskSpreadPercentage() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateBidAskSpreadPercentage()
	})
}

// ClearBidAskSpreadPercentage clears the value of the "bid_ask_spread_percentage" field.
func (u *TickerUpsertOne) ClearBidAskSpreadPercentage() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.ClearBidAskSpreadPercentage()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *TickerUpsertOne) SetTimestamp(v time.Time) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *TickerUpsertOne) UpdateTimestamp() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateTimestamp()
	})
}

// ClearTimestamp clears the value of the "timestamp" field.
func (u *TickerUpsertOne) ClearTimestamp() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.ClearTimestamp()
	})
}

// SetLastTradedAt sets the "last_traded_at" field.
func (u *TickerUpsertOne) SetLastTradedAt(v time.Time) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.SetLastTradedAt(v)
	})
}

// UpdateLastTradedAt sets the "last_traded_at" field to the value that was provided on create.
func (u *TickerUpsertOne) UpdateLastTradedAt() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateLastTradedAt()
	})
}

// ClearLastTradedAt clears the value of the "last_traded_at" field.
func (u *TickerUpsertOne) ClearLastTradedAt() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.ClearLastTradedAt()
	})
}

// SetLastFetchAt sets the "last_fetch_at" field.
func (u *TickerUpsertOne) SetLastFetchAt(v time.Time) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.SetLastFetchAt(v)
	})
}

// UpdateLastFetchAt sets the "last_fetch_at" field to the value that was provided on create.
func (u *TickerUpsertOne) UpdateLastFetchAt() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateLastFetchAt()
	})
}

// ClearLastFetchAt clears the value of the "last_fetch_at" field.
func (u *TickerUpsertOne) ClearLastFetchAt() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.ClearLastFetchAt()
	})
}

// SetIsAnomaly sets the "is_anomaly" field.
func (u *TickerUpsertOne) SetIsAnomaly(v bool) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.SetIsAnomaly(v)
	})
}

// UpdateIsAnomaly sets the "is_anomaly" field to the value that was provided on create.
func (u *TickerUpsertOne) UpdateIsAnomaly() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateIsAnomaly()
	})
}

// ClearIsAnomaly clears the value of the "is_anomaly" field.
func (u *TickerUpsertOne) ClearIsAnomaly() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.ClearIsAnomaly()
	})
}

// SetIsStale sets the "is_stale" field.
func (u *TickerUpsertOne) SetIsStale(v bool) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.SetIsStale(v)
	})
}

// UpdateIsStale sets the "is_stale" field to the value that was provided on create.
func (u *TickerUpsertOne) UpdateIsStale() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateIsStale()
	})
}

// ClearIsStale clears the value of the "is_stale" field.
func (u *TickerUpsertOne) ClearIsStale() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.ClearIsStale()
	})
}

// SetTradeURL sets the "trade_url" field.
func (u *TickerUpsertOne) SetTradeURL(v string) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.SetTradeURL(v)
	})
}

// UpdateTradeURL sets the "trade_url" field to the value that was provided on create.
func (u *TickerUpsertOne) UpdateTradeURL() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateTradeURL()
	})
}

// ClearTradeURL clears the value of the "trade_url" field.
func (u *TickerUpsertOne) ClearTradeURL() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.ClearTradeURL()
	})
}

// SetTokenInfoURL sets the "token_info_url" field.
func (u *TickerUpsertOne) SetTokenInfoURL(v string) *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.SetTokenInfoURL(v)
	})
}

// UpdateTokenInfoURL sets the "token_info_url" field to the value that was provided on create.
func (u *TickerUpsertOne) UpdateTokenInfoURL() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateTokenInfoURL()
	})
}

// ClearTokenInfoURL clears the value of the "token_info_url" field.
func (u *TickerUpsertOne) ClearTokenInfoURL() *TickerUpsertOne {
	return u.Update(func(s *TickerUpsert) {
		s.ClearTokenInfoURL()
	})
}

// Exec executes the query.
func (u *TickerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for TickerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TickerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TickerUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TickerUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TickerCreateBulk is the builder for creating many Ticker entities in bulk.
type TickerCreateBulk struct {
	config
	builders []*TickerCreate
	conflict []sql.ConflictOption
}

// Save creates the Ticker entities in the database.
func (tcb *TickerCreateBulk) Save(ctx context.Context) ([]*Ticker, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Ticker, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TickerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TickerCreateBulk) SaveX(ctx context.Context) []*Ticker {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TickerCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TickerCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ticker.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TickerUpsert) {
//			SetBase(v+v).
//		}).
//		Exec(ctx)
func (tcb *TickerCreateBulk) OnConflict(opts ...sql.ConflictOption) *TickerUpsertBulk {
	tcb.conflict = opts
	return &TickerUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ticker.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TickerCreateBulk) OnConflictColumns(columns ...string) *TickerUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TickerUpsertBulk{
		create: tcb,
	}
}

// TickerUpsertBulk is the builder for "upsert"-ing
// a bulk of Ticker nodes.
type TickerUpsertBulk struct {
	create *TickerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Ticker.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TickerUpsertBulk) UpdateNewValues() *TickerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ticker.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TickerUpsertBulk) Ignore() *TickerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TickerUpsertBulk) DoNothing() *TickerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TickerCreateBulk.OnConflict
// documentation for more info.
func (u *TickerUpsertBulk) Update(set func(*TickerUpsert)) *TickerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TickerUpsert{UpdateSet: update})
	}))
	return u
}

// SetBase sets the "base" field.
func (u *TickerUpsertBulk) SetBase(v string) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.SetBase(v)
	})
}

// UpdateBase sets the "base" field to the value that was provided on create.
func (u *TickerUpsertBulk) UpdateBase() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateBase()
	})
}

// SetBaseCoinID sets the "base_coin_id" field.
func (u *TickerUpsertBulk) SetBaseCoinID(v string) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.SetBaseCoinID(v)
	})
}

// UpdateBaseCoinID sets the "base_coin_id" field to the value that was provided on create.
func (u *TickerUpsertBulk) UpdateBaseCoinID() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateBaseCoinID()
	})
}

// ClearBaseCoinID clears the value of the "base_coin_id" field.
func (u *TickerUpsertBulk) ClearBaseCoinID() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.ClearBaseCoinID()
	})
}

// SetCounter sets the "counter" field.
func (u *TickerUpsertBulk) SetCounter(v string) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.SetCounter(v)
	})
}

// UpdateCounter sets the "counter" field to the value that was provided on create.
func (u *TickerUpsertBulk) UpdateCounter() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateCounter()
	})
}

// SetCounterCoinID sets the "counter_coin_id" field.
func (u *TickerUpsertBulk) SetCounterCoinID(v string) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.SetCounterCoinID(v)
	})
}

// UpdateCounterCoinID sets the "counter_coin_id" field to the value that was provided on create.
func (u *TickerUpsertBulk) UpdateCounterCoinID() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateCounterCoinID()
	})
}

// ClearCounterCoinID clears the value of the "counter_coin_id" field.
func (u *TickerUpsertBulk) ClearCounterCoinID() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.ClearCounterCoinID()
	})
}

// SetMarket sets the "market" field.
func (u *TickerUpsertBulk) SetMarket(v models.Market) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.SetMarket(v)
	})
}

// UpdateMarket sets the "market" field to the value that was provided on create.
func (u *TickerUpsertBulk) UpdateMarket() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateMarket()
	})
}

// ClearMarket clears the value of the "market" field.
func (u *TickerUpsertBulk) ClearMarket() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.ClearMarket()
	})
}

// SetLast sets the "last" field.
func (u *TickerUpsertBulk) SetLast(v float64) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.SetLast(v)
	})
}

// AddLast adds v to the "last" field.
func (u *TickerUpsertBulk) AddLast(v float64) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.AddLast(v)
	})
}

// UpdateLast sets the "last" field to the value that was provided on create.
func (u *TickerUpsertBulk) UpdateLast() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateLast()
	})
}

// ClearLast clears the value of the "last" field.
func (u *TickerUpsertBulk) ClearLast() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.ClearLast()
	})
}

// SetVolume sets the "volume" field.
func (u *TickerUpsertBulk) SetVolume(v float64) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.SetVolume(v)
	})
}

// AddVolume adds v to the "volume" field.
func (u *TickerUpsertBulk) AddVolume(v float64) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.AddVolume(v)
	})
}

// UpdateVolume sets the "volume" field to the value that was provided on create.
func (u *TickerUpsertBulk) UpdateVolume() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateVolume()
	})
}

// ClearVolume clears the value of the "volume" field.
func (u *TickerUpsertBulk) ClearVolume() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.ClearVolume()
	})
}

// SetConvertedLast sets the "converted_last" field.
func (u *TickerUpsertBulk) SetConvertedLast(v models.ConvertedDetails) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.SetConvertedLast(v)
	})
}

// UpdateConvertedLast sets the "converted_last" field to the value that was provided on create.
func (u *TickerUpsertBulk) UpdateConvertedLast() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateConvertedLast()
	})
}

// ClearConvertedLast clears the value of the "converted_last" field.
func (u *TickerUpsertBulk) ClearConvertedLast() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.ClearConvertedLast()
	})
}

// SetConvertedVolume sets the "converted_volume" field.
func (u *TickerUpsertBulk) SetConvertedVolume(v models.ConvertedDetails) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.SetConvertedVolume(v)
	})
}

// UpdateConvertedVolume sets the "converted_volume" field to the value that was provided on create.
func (u *TickerUpsertBulk) UpdateConvertedVolume() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateConvertedVolume()
	})
}

// ClearConvertedVolume clears the value of the "converted_volume" field.
func (u *TickerUpsertBulk) ClearConvertedVolume() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.ClearConvertedVolume()
	})
}

// SetTrustScore sets the "trust_score" field.
func (u *TickerUpsertBulk) SetTrustScore(v string) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.SetTrustScore(v)
	})
}

// UpdateTrustScore sets the "trust_score" field to the value that was provided on create.
func (u *TickerUpsertBulk) UpdateTrustScore() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateTrustScore()
	})
}

// ClearTrustScore clears the value of the "trust_score" field.
func (u *TickerUpsertBulk) ClearTrustScore() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.ClearTrustScore()
	})
}

// SetBidAskSpreadPercentage sets the "bid_ask_spread_percentage" field.
func (u *TickerUpsertBulk) SetBidAskSpreadPercentage(v float64) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.SetBidAskSpreadPercentage(v)
	})
}

// AddBidAskSpreadPercentage adds v to the "bid_ask_spread_percentage" field.
func (u *TickerUpsertBulk) AddBidAskSpreadPercentage(v float64) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.AddBidAskSpreadPercentage(v)
	})
}

// UpdateBidAskSpreadPercentage sets the "bid_ask_spread_percentage" field to the value that was provided on create.
func (u *TickerUpsertBulk) UpdateBidAskSpreadPercentage() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateBidAskSpreadPercentage()
	})
}

// ClearBidAskSpreadPercentage clears the value of the "bid_ask_spread_percentage" field.
func (u *TickerUpsertBulk) ClearBidAskSpreadPercentage() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.ClearBidAskSpreadPercentage()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *TickerUpsertBulk) SetTimestamp(v time.Time) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *TickerUpsertBulk) UpdateTimestamp() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateTimestamp()
	})
}

// ClearTimestamp clears the value of the "timestamp" field.
func (u *TickerUpsertBulk) ClearTimestamp() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.ClearTimestamp()
	})
}

// SetLastTradedAt sets the "last_traded_at" field.
func (u *TickerUpsertBulk) SetLastTradedAt(v time.Time) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.SetLastTradedAt(v)
	})
}

// UpdateLastTradedAt sets the "last_traded_at" field to the value that was provided on create.
func (u *TickerUpsertBulk) UpdateLastTradedAt() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateLastTradedAt()
	})
}

// ClearLastTradedAt clears the value of the "last_traded_at" field.
func (u *TickerUpsertBulk) ClearLastTradedAt() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.ClearLastTradedAt()
	})
}

// SetLastFetchAt sets the "last_fetch_at" field.
func (u *TickerUpsertBulk) SetLastFetchAt(v time.Time) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.SetLastFetchAt(v)
	})
}

// UpdateLastFetchAt sets the "last_fetch_at" field to the value that was provided on create.
func (u *TickerUpsertBulk) UpdateLastFetchAt() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateLastFetchAt()
	})
}

// ClearLastFetchAt clears the value of the "last_fetch_at" field.
func (u *TickerUpsertBulk) ClearLastFetchAt() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.ClearLastFetchAt()
	})
}

// SetIsAnomaly sets the "is_anomaly" field.
func (u *TickerUpsertBulk) SetIsAnomaly(v bool) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.SetIsAnomaly(v)
	})
}

// UpdateIsAnomaly sets the "is_anomaly" field to the value that was provided on create.
func (u *TickerUpsertBulk) UpdateIsAnomaly() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateIsAnomaly()
	})
}

// ClearIsAnomaly clears the value of the "is_anomaly" field.
func (u *TickerUpsertBulk) ClearIsAnomaly() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.ClearIsAnomaly()
	})
}

// SetIsStale sets the "is_stale" field.
func (u *TickerUpsertBulk) SetIsStale(v bool) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.SetIsStale(v)
	})
}

// UpdateIsStale sets the "is_stale" field to the value that was provided on create.
func (u *TickerUpsertBulk) UpdateIsStale() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateIsStale()
	})
}

// ClearIsStale clears the value of the "is_stale" field.
func (u *TickerUpsertBulk) ClearIsStale() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.ClearIsStale()
	})
}

// SetTradeURL sets the "trade_url" field.
func (u *TickerUpsertBulk) SetTradeURL(v string) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.SetTradeURL(v)
	})
}

// UpdateTradeURL sets the "trade_url" field to the value that was provided on create.
func (u *TickerUpsertBulk) UpdateTradeURL() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateTradeURL()
	})
}

// ClearTradeURL clears the value of the "trade_url" field.
func (u *TickerUpsertBulk) ClearTradeURL() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.ClearTradeURL()
	})
}

// SetTokenInfoURL sets the "token_info_url" field.
func (u *TickerUpsertBulk) SetTokenInfoURL(v string) *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.SetTokenInfoURL(v)
	})
}

// UpdateTokenInfoURL sets the "token_info_url" field to the value that was provided on create.
func (u *TickerUpsertBulk) UpdateTokenInfoURL() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.UpdateTokenInfoURL()
	})
}

// ClearTokenInfoURL clears the value of the "token_info_url" field.
func (u *TickerUpsertBulk) ClearTokenInfoURL() *TickerUpsertBulk {
	return u.Update(func(s *TickerUpsert) {
		s.ClearTokenInfoURL()
	})
}

// Exec executes the query.
func (u *TickerUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entities: OnConflict was set for builder %d. Set it on the TickerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for TickerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TickerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
