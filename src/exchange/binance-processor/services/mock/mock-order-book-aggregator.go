// Code generated by MockGen. DO NOT EDIT.
// Source: order-book-aggregator.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	services "github.com/omiga-group/omiga/src/exchange/binance-processor/services"
)

// MockOrderBookAggregator is a mock of OrderBookAggregator interface.
type MockOrderBookAggregator struct {
	ctrl     *gomock.Controller
	recorder *MockOrderBookAggregatorMockRecorder
}

// MockOrderBookAggregatorMockRecorder is the mock recorder for MockOrderBookAggregator.
type MockOrderBookAggregatorMockRecorder struct {
	mock *MockOrderBookAggregator
}

// NewMockOrderBookAggregator creates a new mock instance.
func NewMockOrderBookAggregator(ctrl *gomock.Controller) *MockOrderBookAggregator {
	mock := &MockOrderBookAggregator{ctrl: ctrl}
	mock.recorder = &MockOrderBookAggregatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderBookAggregator) EXPECT() *MockOrderBookAggregatorMockRecorder {
	return m.recorder
}

// UpdateOrderBook mocks base method.
func (m *MockOrderBookAggregator) UpdateOrderBook(symbol string, orderBook []services.BinanceOrderBookEntry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateOrderBook", symbol, orderBook)
}

// UpdateOrderBook indicates an expected call of UpdateOrderBook.
func (mr *MockOrderBookAggregatorMockRecorder) UpdateOrderBook(symbol, orderBook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderBook", reflect.TypeOf((*MockOrderBookAggregator)(nil).UpdateOrderBook), symbol, orderBook)
}
