// Code generated by MockGen. DO NOT EDIT.
// Source: trading_pair_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/omiga-group/omiga/src/exchange/shared/models"
)

// MockTradingPairRepository is a mock of TradingPairRepository interface.
type MockTradingPairRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTradingPairRepositoryMockRecorder
}

// MockTradingPairRepositoryMockRecorder is the mock recorder for MockTradingPairRepository.
type MockTradingPairRepositoryMockRecorder struct {
	mock *MockTradingPairRepository
}

// NewMockTradingPairRepository creates a new mock instance.
func NewMockTradingPairRepository(ctrl *gomock.Controller) *MockTradingPairRepository {
	mock := &MockTradingPairRepository{ctrl: ctrl}
	mock.recorder = &MockTradingPairRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradingPairRepository) EXPECT() *MockTradingPairRepositoryMockRecorder {
	return m.recorder
}

// CreateTradingPairs mocks base method.
func (m *MockTradingPairRepository) CreateTradingPairs(ctx context.Context, exchangeId string, tradingPairs []models.TradingPair) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTradingPairs", ctx, exchangeId, tradingPairs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTradingPairs indicates an expected call of CreateTradingPairs.
func (mr *MockTradingPairRepositoryMockRecorder) CreateTradingPairs(ctx, exchangeId, tradingPairs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTradingPairs", reflect.TypeOf((*MockTradingPairRepository)(nil).CreateTradingPairs), ctx, exchangeId, tradingPairs)
}
