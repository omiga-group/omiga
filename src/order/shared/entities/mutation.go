// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/omiga-group/omiga/src/order/shared/entities/order"
	"github.com/omiga-group/omiga/src/order/shared/entities/outbox"
	"github.com/omiga-group/omiga/src/order/shared/entities/predicate"
	"github.com/omiga-group/omiga/src/order/shared/models"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeOrder  = "Order"
	TypeOutbox = "Outbox"
)

// OrderMutation represents an operation that mutates the Order nodes in the graph.
type OrderMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	order_details       *models.OrderDetails
	preferred_exchanges *[]models.Exchange
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*Order, error)
	predicates          []predicate.Order
}

var _ ent.Mutation = (*OrderMutation)(nil)

// orderOption allows management of the mutation configuration using functional options.
type orderOption func(*OrderMutation)

// newOrderMutation creates new mutation for the Order entity.
func newOrderMutation(c config, op Op, opts ...orderOption) *OrderMutation {
	m := &OrderMutation{
		config:        c,
		op:            op,
		typ:           TypeOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderID sets the ID field of the mutation.
func withOrderID(id int) orderOption {
	return func(m *OrderMutation) {
		var (
			err   error
			once  sync.Once
			value *Order
		)
		m.oldValue = func(ctx context.Context) (*Order, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Order.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrder sets the old Order of the mutation.
func withOrder(node *Order) orderOption {
	return func(m *OrderMutation) {
		m.oldValue = func(context.Context) (*Order, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Order.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOrderDetails sets the "order_details" field.
func (m *OrderMutation) SetOrderDetails(md models.OrderDetails) {
	m.order_details = &md
}

// OrderDetails returns the value of the "order_details" field in the mutation.
func (m *OrderMutation) OrderDetails() (r models.OrderDetails, exists bool) {
	v := m.order_details
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderDetails returns the old "order_details" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldOrderDetails(ctx context.Context) (v models.OrderDetails, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderDetails is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderDetails requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderDetails: %w", err)
	}
	return oldValue.OrderDetails, nil
}

// ResetOrderDetails resets all changes to the "order_details" field.
func (m *OrderMutation) ResetOrderDetails() {
	m.order_details = nil
}

// SetPreferredExchanges sets the "preferred_exchanges" field.
func (m *OrderMutation) SetPreferredExchanges(value []models.Exchange) {
	m.preferred_exchanges = &value
}

// PreferredExchanges returns the value of the "preferred_exchanges" field in the mutation.
func (m *OrderMutation) PreferredExchanges() (r []models.Exchange, exists bool) {
	v := m.preferred_exchanges
	if v == nil {
		return
	}
	return *v, true
}

// OldPreferredExchanges returns the old "preferred_exchanges" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPreferredExchanges(ctx context.Context) (v []models.Exchange, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPreferredExchanges is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPreferredExchanges requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPreferredExchanges: %w", err)
	}
	return oldValue.PreferredExchanges, nil
}

// ResetPreferredExchanges resets all changes to the "preferred_exchanges" field.
func (m *OrderMutation) ResetPreferredExchanges() {
	m.preferred_exchanges = nil
}

// Where appends a list predicates to the OrderMutation builder.
func (m *OrderMutation) Where(ps ...predicate.Order) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Order).
func (m *OrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.order_details != nil {
		fields = append(fields, order.FieldOrderDetails)
	}
	if m.preferred_exchanges != nil {
		fields = append(fields, order.FieldPreferredExchanges)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case order.FieldOrderDetails:
		return m.OrderDetails()
	case order.FieldPreferredExchanges:
		return m.PreferredExchanges()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case order.FieldOrderDetails:
		return m.OldOrderDetails(ctx)
	case order.FieldPreferredExchanges:
		return m.OldPreferredExchanges(ctx)
	}
	return nil, fmt.Errorf("unknown Order field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case order.FieldOrderDetails:
		v, ok := value.(models.OrderDetails)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderDetails(v)
		return nil
	case order.FieldPreferredExchanges:
		v, ok := value.([]models.Exchange)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPreferredExchanges(v)
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Order numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Order nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderMutation) ResetField(name string) error {
	switch name {
	case order.FieldOrderDetails:
		m.ResetOrderDetails()
		return nil
	case order.FieldPreferredExchanges:
		m.ResetPreferredExchanges()
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Order unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Order edge %s", name)
}

// OutboxMutation represents an operation that mutates the Outbox nodes in the graph.
type OutboxMutation struct {
	config
	op                Op
	typ               string
	id                *int
	timestamp         *time.Time
	topic             *string
	key               *string
	payload           *[]byte
	headers           *map[string]string
	retry_count       *int
	addretry_count    *int
	status            *outbox.Status
	last_retry        *time.Time
	processing_errors *[]string
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Outbox, error)
	predicates        []predicate.Outbox
}

var _ ent.Mutation = (*OutboxMutation)(nil)

// outboxOption allows management of the mutation configuration using functional options.
type outboxOption func(*OutboxMutation)

// newOutboxMutation creates new mutation for the Outbox entity.
func newOutboxMutation(c config, op Op, opts ...outboxOption) *OutboxMutation {
	m := &OutboxMutation{
		config:        c,
		op:            op,
		typ:           TypeOutbox,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOutboxID sets the ID field of the mutation.
func withOutboxID(id int) outboxOption {
	return func(m *OutboxMutation) {
		var (
			err   error
			once  sync.Once
			value *Outbox
		)
		m.oldValue = func(ctx context.Context) (*Outbox, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Outbox.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOutbox sets the old Outbox of the mutation.
func withOutbox(node *Outbox) outboxOption {
	return func(m *OutboxMutation) {
		m.oldValue = func(context.Context) (*Outbox, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OutboxMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OutboxMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OutboxMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OutboxMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Outbox.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTimestamp sets the "timestamp" field.
func (m *OutboxMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *OutboxMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *OutboxMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetTopic sets the "topic" field.
func (m *OutboxMutation) SetTopic(s string) {
	m.topic = &s
}

// Topic returns the value of the "topic" field in the mutation.
func (m *OutboxMutation) Topic() (r string, exists bool) {
	v := m.topic
	if v == nil {
		return
	}
	return *v, true
}

// OldTopic returns the old "topic" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldTopic(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTopic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTopic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopic: %w", err)
	}
	return oldValue.Topic, nil
}

// ResetTopic resets all changes to the "topic" field.
func (m *OutboxMutation) ResetTopic() {
	m.topic = nil
}

// SetKey sets the "key" field.
func (m *OutboxMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *OutboxMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *OutboxMutation) ResetKey() {
	m.key = nil
}

// SetPayload sets the "payload" field.
func (m *OutboxMutation) SetPayload(b []byte) {
	m.payload = &b
}

// Payload returns the value of the "payload" field in the mutation.
func (m *OutboxMutation) Payload() (r []byte, exists bool) {
	v := m.payload
	if v == nil {
		return
	}
	return *v, true
}

// OldPayload returns the old "payload" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldPayload(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayload: %w", err)
	}
	return oldValue.Payload, nil
}

// ResetPayload resets all changes to the "payload" field.
func (m *OutboxMutation) ResetPayload() {
	m.payload = nil
}

// SetHeaders sets the "headers" field.
func (m *OutboxMutation) SetHeaders(value map[string]string) {
	m.headers = &value
}

// Headers returns the value of the "headers" field in the mutation.
func (m *OutboxMutation) Headers() (r map[string]string, exists bool) {
	v := m.headers
	if v == nil {
		return
	}
	return *v, true
}

// OldHeaders returns the old "headers" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldHeaders(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeaders is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeaders requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeaders: %w", err)
	}
	return oldValue.Headers, nil
}

// ResetHeaders resets all changes to the "headers" field.
func (m *OutboxMutation) ResetHeaders() {
	m.headers = nil
}

// SetRetryCount sets the "retry_count" field.
func (m *OutboxMutation) SetRetryCount(i int) {
	m.retry_count = &i
	m.addretry_count = nil
}

// RetryCount returns the value of the "retry_count" field in the mutation.
func (m *OutboxMutation) RetryCount() (r int, exists bool) {
	v := m.retry_count
	if v == nil {
		return
	}
	return *v, true
}

// OldRetryCount returns the old "retry_count" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldRetryCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetryCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetryCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetryCount: %w", err)
	}
	return oldValue.RetryCount, nil
}

// AddRetryCount adds i to the "retry_count" field.
func (m *OutboxMutation) AddRetryCount(i int) {
	if m.addretry_count != nil {
		*m.addretry_count += i
	} else {
		m.addretry_count = &i
	}
}

// AddedRetryCount returns the value that was added to the "retry_count" field in this mutation.
func (m *OutboxMutation) AddedRetryCount() (r int, exists bool) {
	v := m.addretry_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetRetryCount resets all changes to the "retry_count" field.
func (m *OutboxMutation) ResetRetryCount() {
	m.retry_count = nil
	m.addretry_count = nil
}

// SetStatus sets the "status" field.
func (m *OutboxMutation) SetStatus(o outbox.Status) {
	m.status = &o
}

// Status returns the value of the "status" field in the mutation.
func (m *OutboxMutation) Status() (r outbox.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldStatus(ctx context.Context) (v outbox.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *OutboxMutation) ResetStatus() {
	m.status = nil
}

// SetLastRetry sets the "last_retry" field.
func (m *OutboxMutation) SetLastRetry(t time.Time) {
	m.last_retry = &t
}

// LastRetry returns the value of the "last_retry" field in the mutation.
func (m *OutboxMutation) LastRetry() (r time.Time, exists bool) {
	v := m.last_retry
	if v == nil {
		return
	}
	return *v, true
}

// OldLastRetry returns the old "last_retry" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldLastRetry(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastRetry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastRetry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastRetry: %w", err)
	}
	return oldValue.LastRetry, nil
}

// ClearLastRetry clears the value of the "last_retry" field.
func (m *OutboxMutation) ClearLastRetry() {
	m.last_retry = nil
	m.clearedFields[outbox.FieldLastRetry] = struct{}{}
}

// LastRetryCleared returns if the "last_retry" field was cleared in this mutation.
func (m *OutboxMutation) LastRetryCleared() bool {
	_, ok := m.clearedFields[outbox.FieldLastRetry]
	return ok
}

// ResetLastRetry resets all changes to the "last_retry" field.
func (m *OutboxMutation) ResetLastRetry() {
	m.last_retry = nil
	delete(m.clearedFields, outbox.FieldLastRetry)
}

// SetProcessingErrors sets the "processing_errors" field.
func (m *OutboxMutation) SetProcessingErrors(s []string) {
	m.processing_errors = &s
}

// ProcessingErrors returns the value of the "processing_errors" field in the mutation.
func (m *OutboxMutation) ProcessingErrors() (r []string, exists bool) {
	v := m.processing_errors
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessingErrors returns the old "processing_errors" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldProcessingErrors(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessingErrors is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessingErrors requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessingErrors: %w", err)
	}
	return oldValue.ProcessingErrors, nil
}

// ClearProcessingErrors clears the value of the "processing_errors" field.
func (m *OutboxMutation) ClearProcessingErrors() {
	m.processing_errors = nil
	m.clearedFields[outbox.FieldProcessingErrors] = struct{}{}
}

// ProcessingErrorsCleared returns if the "processing_errors" field was cleared in this mutation.
func (m *OutboxMutation) ProcessingErrorsCleared() bool {
	_, ok := m.clearedFields[outbox.FieldProcessingErrors]
	return ok
}

// ResetProcessingErrors resets all changes to the "processing_errors" field.
func (m *OutboxMutation) ResetProcessingErrors() {
	m.processing_errors = nil
	delete(m.clearedFields, outbox.FieldProcessingErrors)
}

// Where appends a list predicates to the OutboxMutation builder.
func (m *OutboxMutation) Where(ps ...predicate.Outbox) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OutboxMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Outbox).
func (m *OutboxMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OutboxMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.timestamp != nil {
		fields = append(fields, outbox.FieldTimestamp)
	}
	if m.topic != nil {
		fields = append(fields, outbox.FieldTopic)
	}
	if m.key != nil {
		fields = append(fields, outbox.FieldKey)
	}
	if m.payload != nil {
		fields = append(fields, outbox.FieldPayload)
	}
	if m.headers != nil {
		fields = append(fields, outbox.FieldHeaders)
	}
	if m.retry_count != nil {
		fields = append(fields, outbox.FieldRetryCount)
	}
	if m.status != nil {
		fields = append(fields, outbox.FieldStatus)
	}
	if m.last_retry != nil {
		fields = append(fields, outbox.FieldLastRetry)
	}
	if m.processing_errors != nil {
		fields = append(fields, outbox.FieldProcessingErrors)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OutboxMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case outbox.FieldTimestamp:
		return m.Timestamp()
	case outbox.FieldTopic:
		return m.Topic()
	case outbox.FieldKey:
		return m.Key()
	case outbox.FieldPayload:
		return m.Payload()
	case outbox.FieldHeaders:
		return m.Headers()
	case outbox.FieldRetryCount:
		return m.RetryCount()
	case outbox.FieldStatus:
		return m.Status()
	case outbox.FieldLastRetry:
		return m.LastRetry()
	case outbox.FieldProcessingErrors:
		return m.ProcessingErrors()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OutboxMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case outbox.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case outbox.FieldTopic:
		return m.OldTopic(ctx)
	case outbox.FieldKey:
		return m.OldKey(ctx)
	case outbox.FieldPayload:
		return m.OldPayload(ctx)
	case outbox.FieldHeaders:
		return m.OldHeaders(ctx)
	case outbox.FieldRetryCount:
		return m.OldRetryCount(ctx)
	case outbox.FieldStatus:
		return m.OldStatus(ctx)
	case outbox.FieldLastRetry:
		return m.OldLastRetry(ctx)
	case outbox.FieldProcessingErrors:
		return m.OldProcessingErrors(ctx)
	}
	return nil, fmt.Errorf("unknown Outbox field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OutboxMutation) SetField(name string, value ent.Value) error {
	switch name {
	case outbox.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case outbox.FieldTopic:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopic(v)
		return nil
	case outbox.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case outbox.FieldPayload:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayload(v)
		return nil
	case outbox.FieldHeaders:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeaders(v)
		return nil
	case outbox.FieldRetryCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetryCount(v)
		return nil
	case outbox.FieldStatus:
		v, ok := value.(outbox.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case outbox.FieldLastRetry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastRetry(v)
		return nil
	case outbox.FieldProcessingErrors:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessingErrors(v)
		return nil
	}
	return fmt.Errorf("unknown Outbox field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OutboxMutation) AddedFields() []string {
	var fields []string
	if m.addretry_count != nil {
		fields = append(fields, outbox.FieldRetryCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OutboxMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case outbox.FieldRetryCount:
		return m.AddedRetryCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OutboxMutation) AddField(name string, value ent.Value) error {
	switch name {
	case outbox.FieldRetryCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRetryCount(v)
		return nil
	}
	return fmt.Errorf("unknown Outbox numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OutboxMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(outbox.FieldLastRetry) {
		fields = append(fields, outbox.FieldLastRetry)
	}
	if m.FieldCleared(outbox.FieldProcessingErrors) {
		fields = append(fields, outbox.FieldProcessingErrors)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OutboxMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OutboxMutation) ClearField(name string) error {
	switch name {
	case outbox.FieldLastRetry:
		m.ClearLastRetry()
		return nil
	case outbox.FieldProcessingErrors:
		m.ClearProcessingErrors()
		return nil
	}
	return fmt.Errorf("unknown Outbox nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OutboxMutation) ResetField(name string) error {
	switch name {
	case outbox.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case outbox.FieldTopic:
		m.ResetTopic()
		return nil
	case outbox.FieldKey:
		m.ResetKey()
		return nil
	case outbox.FieldPayload:
		m.ResetPayload()
		return nil
	case outbox.FieldHeaders:
		m.ResetHeaders()
		return nil
	case outbox.FieldRetryCount:
		m.ResetRetryCount()
		return nil
	case outbox.FieldStatus:
		m.ResetStatus()
		return nil
	case outbox.FieldLastRetry:
		m.ResetLastRetry()
		return nil
	case outbox.FieldProcessingErrors:
		m.ResetProcessingErrors()
		return nil
	}
	return fmt.Errorf("unknown Outbox field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OutboxMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OutboxMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OutboxMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OutboxMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OutboxMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OutboxMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OutboxMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Outbox unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OutboxMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Outbox edge %s", name)
}
