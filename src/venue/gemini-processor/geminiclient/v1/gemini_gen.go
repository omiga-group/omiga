// Package geminiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package geminiv1

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// PriceFeed defines model for priceFeed.
type PriceFeed struct {
	Pair                 string                 `json:"pair"`
	PercentChange24h     string                 `json:"percentChange24h"`
	Price                string                 `json:"price"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Symbol defines model for symbol.
type Symbol = string

// TradingPair defines model for tradingPair.
type TradingPair struct {
	BaseCurrency         string                 `json:"base_currency"`
	MinOrderSize         string                 `json:"min_order_size"`
	QuoteCurrency        string                 `json:"quote_currency"`
	QuoteIncrement       float64                `json:"quote_increment"`
	Status               string                 `json:"status"`
	Symbol               string                 `json:"symbol"`
	TickSize             float64                `json:"tick_size"`
	WrapEnabled          bool                   `json:"wrap_enabled"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Getter for additional properties for PriceFeed. Returns the specified
// element and whether it was found
func (a PriceFeed) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PriceFeed
func (a *PriceFeed) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PriceFeed to handle AdditionalProperties
func (a *PriceFeed) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pair"]; found {
		err = json.Unmarshal(raw, &a.Pair)
		if err != nil {
			return fmt.Errorf("error reading 'pair': %w", err)
		}
		delete(object, "pair")
	}

	if raw, found := object["percentChange24h"]; found {
		err = json.Unmarshal(raw, &a.PercentChange24h)
		if err != nil {
			return fmt.Errorf("error reading 'percentChange24h': %w", err)
		}
		delete(object, "percentChange24h")
	}

	if raw, found := object["price"]; found {
		err = json.Unmarshal(raw, &a.Price)
		if err != nil {
			return fmt.Errorf("error reading 'price': %w", err)
		}
		delete(object, "price")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshalling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PriceFeed to handle AdditionalProperties
func (a PriceFeed) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["pair"], err = json.Marshal(a.Pair)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pair': %w", err)
	}

	object["percentChange24h"], err = json.Marshal(a.PercentChange24h)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'percentChange24h': %w", err)
	}

	object["price"], err = json.Marshal(a.Price)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'price': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TradingPair. Returns the specified
// element and whether it was found
func (a TradingPair) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TradingPair
func (a *TradingPair) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TradingPair to handle AdditionalProperties
func (a *TradingPair) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["base_currency"]; found {
		err = json.Unmarshal(raw, &a.BaseCurrency)
		if err != nil {
			return fmt.Errorf("error reading 'base_currency': %w", err)
		}
		delete(object, "base_currency")
	}

	if raw, found := object["min_order_size"]; found {
		err = json.Unmarshal(raw, &a.MinOrderSize)
		if err != nil {
			return fmt.Errorf("error reading 'min_order_size': %w", err)
		}
		delete(object, "min_order_size")
	}

	if raw, found := object["quote_currency"]; found {
		err = json.Unmarshal(raw, &a.QuoteCurrency)
		if err != nil {
			return fmt.Errorf("error reading 'quote_currency': %w", err)
		}
		delete(object, "quote_currency")
	}

	if raw, found := object["quote_increment"]; found {
		err = json.Unmarshal(raw, &a.QuoteIncrement)
		if err != nil {
			return fmt.Errorf("error reading 'quote_increment': %w", err)
		}
		delete(object, "quote_increment")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["symbol"]; found {
		err = json.Unmarshal(raw, &a.Symbol)
		if err != nil {
			return fmt.Errorf("error reading 'symbol': %w", err)
		}
		delete(object, "symbol")
	}

	if raw, found := object["tick_size"]; found {
		err = json.Unmarshal(raw, &a.TickSize)
		if err != nil {
			return fmt.Errorf("error reading 'tick_size': %w", err)
		}
		delete(object, "tick_size")
	}

	if raw, found := object["wrap_enabled"]; found {
		err = json.Unmarshal(raw, &a.WrapEnabled)
		if err != nil {
			return fmt.Errorf("error reading 'wrap_enabled': %w", err)
		}
		delete(object, "wrap_enabled")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshalling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TradingPair to handle AdditionalProperties
func (a TradingPair) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["base_currency"], err = json.Marshal(a.BaseCurrency)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'base_currency': %w", err)
	}

	object["min_order_size"], err = json.Marshal(a.MinOrderSize)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'min_order_size': %w", err)
	}

	object["quote_currency"], err = json.Marshal(a.QuoteCurrency)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'quote_currency': %w", err)
	}

	object["quote_increment"], err = json.Marshal(a.QuoteIncrement)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'quote_increment': %w", err)
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	object["symbol"], err = json.Marshal(a.Symbol)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'symbol': %w", err)
	}

	object["tick_size"], err = json.Marshal(a.TickSize)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tick_size': %w", err)
	}

	object["wrap_enabled"], err = json.Marshal(a.WrapEnabled)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'wrap_enabled': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetPriceFeed request
	GetPriceFeed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllSymbols request
	GetAllSymbols(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSymbolDetails request
	GetSymbolDetails(ctx context.Context, symbol string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetPriceFeed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPriceFeedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllSymbols(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllSymbolsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSymbolDetails(ctx context.Context, symbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSymbolDetailsRequest(c.Server, symbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetPriceFeedRequest generates requests for GetPriceFeed
func NewGetPriceFeedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pricefeed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllSymbolsRequest generates requests for GetAllSymbols
func NewGetAllSymbolsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/symbols")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSymbolDetailsRequest generates requests for GetSymbolDetails
func NewGetSymbolDetailsRequest(server string, symbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "symbol", runtime.ParamLocationPath, symbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/symbols/details/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetPriceFeed request
	GetPriceFeedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPriceFeedResponse, error)

	// GetAllSymbols request
	GetAllSymbolsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllSymbolsResponse, error)

	// GetSymbolDetails request
	GetSymbolDetailsWithResponse(ctx context.Context, symbol string, reqEditors ...RequestEditorFn) (*GetSymbolDetailsResponse, error)
}

type GetPriceFeedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PriceFeed
}

// Status returns HTTPResponse.Status
func (r GetPriceFeedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPriceFeedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllSymbolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Symbol
}

// Status returns HTTPResponse.Status
func (r GetAllSymbolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllSymbolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSymbolDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TradingPair
}

// Status returns HTTPResponse.Status
func (r GetSymbolDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSymbolDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetPriceFeedWithResponse request returning *GetPriceFeedResponse
func (c *ClientWithResponses) GetPriceFeedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPriceFeedResponse, error) {
	rsp, err := c.GetPriceFeed(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPriceFeedResponse(rsp)
}

// GetAllSymbolsWithResponse request returning *GetAllSymbolsResponse
func (c *ClientWithResponses) GetAllSymbolsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllSymbolsResponse, error) {
	rsp, err := c.GetAllSymbols(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllSymbolsResponse(rsp)
}

// GetSymbolDetailsWithResponse request returning *GetSymbolDetailsResponse
func (c *ClientWithResponses) GetSymbolDetailsWithResponse(ctx context.Context, symbol string, reqEditors ...RequestEditorFn) (*GetSymbolDetailsResponse, error) {
	rsp, err := c.GetSymbolDetails(ctx, symbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSymbolDetailsResponse(rsp)
}

// ParseGetPriceFeedResponse parses an HTTP response from a GetPriceFeedWithResponse call
func ParseGetPriceFeedResponse(rsp *http.Response) (*GetPriceFeedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPriceFeedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PriceFeed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllSymbolsResponse parses an HTTP response from a GetAllSymbolsWithResponse call
func ParseGetAllSymbolsResponse(rsp *http.Response) (*GetAllSymbolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllSymbolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Symbol
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSymbolDetailsResponse parses an HTTP response from a GetSymbolDetailsWithResponse call
func ParseGetSymbolDetailsResponse(rsp *http.Response) (*GetSymbolDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSymbolDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TradingPair
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
