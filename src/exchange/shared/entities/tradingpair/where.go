// Code generated by ent, DO NOT EDIT.

package tradingpair

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/internal"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Symbol applies equality check predicate on the "symbol" field. It's identical to SymbolEQ.
func Symbol(v string) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymbol), v))
	})
}

// BasePrecision applies equality check predicate on the "base_precision" field. It's identical to BasePrecisionEQ.
func BasePrecision(v int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBasePrecision), v))
	})
}

// CounterPrecision applies equality check predicate on the "counter_precision" field. It's identical to CounterPrecisionEQ.
func CounterPrecision(v int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCounterPrecision), v))
	})
}

// SymbolEQ applies the EQ predicate on the "symbol" field.
func SymbolEQ(v string) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymbol), v))
	})
}

// SymbolNEQ applies the NEQ predicate on the "symbol" field.
func SymbolNEQ(v string) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSymbol), v))
	})
}

// SymbolIn applies the In predicate on the "symbol" field.
func SymbolIn(vs ...string) predicate.TradingPair {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSymbol), v...))
	})
}

// SymbolNotIn applies the NotIn predicate on the "symbol" field.
func SymbolNotIn(vs ...string) predicate.TradingPair {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSymbol), v...))
	})
}

// SymbolGT applies the GT predicate on the "symbol" field.
func SymbolGT(v string) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSymbol), v))
	})
}

// SymbolGTE applies the GTE predicate on the "symbol" field.
func SymbolGTE(v string) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSymbol), v))
	})
}

// SymbolLT applies the LT predicate on the "symbol" field.
func SymbolLT(v string) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSymbol), v))
	})
}

// SymbolLTE applies the LTE predicate on the "symbol" field.
func SymbolLTE(v string) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSymbol), v))
	})
}

// SymbolContains applies the Contains predicate on the "symbol" field.
func SymbolContains(v string) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSymbol), v))
	})
}

// SymbolHasPrefix applies the HasPrefix predicate on the "symbol" field.
func SymbolHasPrefix(v string) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSymbol), v))
	})
}

// SymbolHasSuffix applies the HasSuffix predicate on the "symbol" field.
func SymbolHasSuffix(v string) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSymbol), v))
	})
}

// SymbolEqualFold applies the EqualFold predicate on the "symbol" field.
func SymbolEqualFold(v string) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSymbol), v))
	})
}

// SymbolContainsFold applies the ContainsFold predicate on the "symbol" field.
func SymbolContainsFold(v string) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSymbol), v))
	})
}

// BasePrecisionEQ applies the EQ predicate on the "base_precision" field.
func BasePrecisionEQ(v int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBasePrecision), v))
	})
}

// BasePrecisionNEQ applies the NEQ predicate on the "base_precision" field.
func BasePrecisionNEQ(v int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBasePrecision), v))
	})
}

// BasePrecisionIn applies the In predicate on the "base_precision" field.
func BasePrecisionIn(vs ...int) predicate.TradingPair {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBasePrecision), v...))
	})
}

// BasePrecisionNotIn applies the NotIn predicate on the "base_precision" field.
func BasePrecisionNotIn(vs ...int) predicate.TradingPair {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBasePrecision), v...))
	})
}

// BasePrecisionGT applies the GT predicate on the "base_precision" field.
func BasePrecisionGT(v int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBasePrecision), v))
	})
}

// BasePrecisionGTE applies the GTE predicate on the "base_precision" field.
func BasePrecisionGTE(v int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBasePrecision), v))
	})
}

// BasePrecisionLT applies the LT predicate on the "base_precision" field.
func BasePrecisionLT(v int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBasePrecision), v))
	})
}

// BasePrecisionLTE applies the LTE predicate on the "base_precision" field.
func BasePrecisionLTE(v int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBasePrecision), v))
	})
}

// BasePrecisionIsNil applies the IsNil predicate on the "base_precision" field.
func BasePrecisionIsNil() predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBasePrecision)))
	})
}

// BasePrecisionNotNil applies the NotNil predicate on the "base_precision" field.
func BasePrecisionNotNil() predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBasePrecision)))
	})
}

// CounterPrecisionEQ applies the EQ predicate on the "counter_precision" field.
func CounterPrecisionEQ(v int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCounterPrecision), v))
	})
}

// CounterPrecisionNEQ applies the NEQ predicate on the "counter_precision" field.
func CounterPrecisionNEQ(v int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCounterPrecision), v))
	})
}

// CounterPrecisionIn applies the In predicate on the "counter_precision" field.
func CounterPrecisionIn(vs ...int) predicate.TradingPair {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCounterPrecision), v...))
	})
}

// CounterPrecisionNotIn applies the NotIn predicate on the "counter_precision" field.
func CounterPrecisionNotIn(vs ...int) predicate.TradingPair {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCounterPrecision), v...))
	})
}

// CounterPrecisionGT applies the GT predicate on the "counter_precision" field.
func CounterPrecisionGT(v int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCounterPrecision), v))
	})
}

// CounterPrecisionGTE applies the GTE predicate on the "counter_precision" field.
func CounterPrecisionGTE(v int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCounterPrecision), v))
	})
}

// CounterPrecisionLT applies the LT predicate on the "counter_precision" field.
func CounterPrecisionLT(v int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCounterPrecision), v))
	})
}

// CounterPrecisionLTE applies the LTE predicate on the "counter_precision" field.
func CounterPrecisionLTE(v int) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCounterPrecision), v))
	})
}

// CounterPrecisionIsNil applies the IsNil predicate on the "counter_precision" field.
func CounterPrecisionIsNil() predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCounterPrecision)))
	})
}

// CounterPrecisionNotNil applies the NotNil predicate on the "counter_precision" field.
func CounterPrecisionNotNil() predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCounterPrecision)))
	})
}

// HasExchange applies the HasEdge predicate on the "exchange" edge.
func HasExchange() predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExchangeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExchangeTable, ExchangeColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Exchange
		step.Edge.Schema = schemaConfig.TradingPair
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExchangeWith applies the HasEdge predicate on the "exchange" edge with a given conditions (other predicates).
func HasExchangeWith(preds ...predicate.Exchange) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExchangeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExchangeTable, ExchangeColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Exchange
		step.Edge.Schema = schemaConfig.TradingPair
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBase applies the HasEdge predicate on the "base" edge.
func HasBase() predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BaseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BaseTable, BaseColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Coin
		step.Edge.Schema = schemaConfig.TradingPair
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBaseWith applies the HasEdge predicate on the "base" edge with a given conditions (other predicates).
func HasBaseWith(preds ...predicate.Coin) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BaseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BaseTable, BaseColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Coin
		step.Edge.Schema = schemaConfig.TradingPair
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCounter applies the HasEdge predicate on the "counter" edge.
func HasCounter() predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CounterTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CounterTable, CounterColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Coin
		step.Edge.Schema = schemaConfig.TradingPair
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCounterWith applies the HasEdge predicate on the "counter" edge with a given conditions (other predicates).
func HasCounterWith(preds ...predicate.Coin) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CounterInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CounterTable, CounterColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Coin
		step.Edge.Schema = schemaConfig.TradingPair
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TradingPair) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TradingPair) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TradingPair) predicate.TradingPair {
	return predicate.TradingPair(func(s *sql.Selector) {
		p(s.Not())
	})
}
