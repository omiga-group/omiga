// Code generated by ent, DO NOT EDIT.

package repositories

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/coin"
)

// CoinCreate is the builder for creating a Coin entity.
type CoinCreate struct {
	config
	mutation *CoinMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSymbol sets the "symbol" field.
func (cc *CoinCreate) SetSymbol(s string) *CoinCreate {
	cc.mutation.SetSymbol(s)
	return cc
}

// SetName sets the "name" field.
func (cc *CoinCreate) SetName(s string) *CoinCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cc *CoinCreate) SetNillableName(s *string) *CoinCreate {
	if s != nil {
		cc.SetName(*s)
	}
	return cc
}

// Mutation returns the CoinMutation object of the builder.
func (cc *CoinCreate) Mutation() *CoinMutation {
	return cc.mutation
}

// Save creates the Coin in the database.
func (cc *CoinCreate) Save(ctx context.Context) (*Coin, error) {
	var (
		err  error
		node *Coin
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("repositories: uninitialized hook (forgotten import repositories/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Coin)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CoinMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CoinCreate) SaveX(ctx context.Context) *Coin {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CoinCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CoinCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CoinCreate) check() error {
	if _, ok := cc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`repositories: missing required field "Coin.symbol"`)}
	}
	return nil
}

func (cc *CoinCreate) sqlSave(ctx context.Context) (*Coin, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CoinCreate) createSpec() (*Coin, *sqlgraph.CreateSpec) {
	var (
		_node = &Coin{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: coin.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: coin.FieldID,
			},
		}
	)
	_spec.Schema = cc.schemaConfig.Coin
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.Symbol(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coin.FieldSymbol,
		})
		_node.Symbol = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coin.FieldName,
		})
		_node.Name = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Coin.Create().
//		SetSymbol(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinUpsert) {
//			SetSymbol(v+v).
//		}).
//		Exec(ctx)
func (cc *CoinCreate) OnConflict(opts ...sql.ConflictOption) *CoinUpsertOne {
	cc.conflict = opts
	return &CoinUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Coin.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CoinCreate) OnConflictColumns(columns ...string) *CoinUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CoinUpsertOne{
		create: cc,
	}
}

type (
	// CoinUpsertOne is the builder for "upsert"-ing
	//  one Coin node.
	CoinUpsertOne struct {
		create *CoinCreate
	}

	// CoinUpsert is the "OnConflict" setter.
	CoinUpsert struct {
		*sql.UpdateSet
	}
)

// SetSymbol sets the "symbol" field.
func (u *CoinUpsert) SetSymbol(v string) *CoinUpsert {
	u.Set(coin.FieldSymbol, v)
	return u
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *CoinUpsert) UpdateSymbol() *CoinUpsert {
	u.SetExcluded(coin.FieldSymbol)
	return u
}

// SetName sets the "name" field.
func (u *CoinUpsert) SetName(v string) *CoinUpsert {
	u.Set(coin.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CoinUpsert) UpdateName() *CoinUpsert {
	u.SetExcluded(coin.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *CoinUpsert) ClearName() *CoinUpsert {
	u.SetNull(coin.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Coin.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CoinUpsertOne) UpdateNewValues() *CoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Coin.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CoinUpsertOne) Ignore() *CoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinUpsertOne) DoNothing() *CoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinCreate.OnConflict
// documentation for more info.
func (u *CoinUpsertOne) Update(set func(*CoinUpsert)) *CoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinUpsert{UpdateSet: update})
	}))
	return u
}

// SetSymbol sets the "symbol" field.
func (u *CoinUpsertOne) SetSymbol(v string) *CoinUpsertOne {
	return u.Update(func(s *CoinUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *CoinUpsertOne) UpdateSymbol() *CoinUpsertOne {
	return u.Update(func(s *CoinUpsert) {
		s.UpdateSymbol()
	})
}

// SetName sets the "name" field.
func (u *CoinUpsertOne) SetName(v string) *CoinUpsertOne {
	return u.Update(func(s *CoinUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CoinUpsertOne) UpdateName() *CoinUpsertOne {
	return u.Update(func(s *CoinUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *CoinUpsertOne) ClearName() *CoinUpsertOne {
	return u.Update(func(s *CoinUpsert) {
		s.ClearName()
	})
}

// Exec executes the query.
func (u *CoinUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("repositories: missing options for CoinCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CoinUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CoinUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CoinCreateBulk is the builder for creating many Coin entities in bulk.
type CoinCreateBulk struct {
	config
	builders []*CoinCreate
	conflict []sql.ConflictOption
}

// Save creates the Coin entities in the database.
func (ccb *CoinCreateBulk) Save(ctx context.Context) ([]*Coin, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Coin, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CoinMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CoinCreateBulk) SaveX(ctx context.Context) []*Coin {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CoinCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CoinCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Coin.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinUpsert) {
//			SetSymbol(v+v).
//		}).
//		Exec(ctx)
func (ccb *CoinCreateBulk) OnConflict(opts ...sql.ConflictOption) *CoinUpsertBulk {
	ccb.conflict = opts
	return &CoinUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Coin.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CoinCreateBulk) OnConflictColumns(columns ...string) *CoinUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CoinUpsertBulk{
		create: ccb,
	}
}

// CoinUpsertBulk is the builder for "upsert"-ing
// a bulk of Coin nodes.
type CoinUpsertBulk struct {
	create *CoinCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Coin.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CoinUpsertBulk) UpdateNewValues() *CoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Coin.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CoinUpsertBulk) Ignore() *CoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinUpsertBulk) DoNothing() *CoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinCreateBulk.OnConflict
// documentation for more info.
func (u *CoinUpsertBulk) Update(set func(*CoinUpsert)) *CoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinUpsert{UpdateSet: update})
	}))
	return u
}

// SetSymbol sets the "symbol" field.
func (u *CoinUpsertBulk) SetSymbol(v string) *CoinUpsertBulk {
	return u.Update(func(s *CoinUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *CoinUpsertBulk) UpdateSymbol() *CoinUpsertBulk {
	return u.Update(func(s *CoinUpsert) {
		s.UpdateSymbol()
	})
}

// SetName sets the "name" field.
func (u *CoinUpsertBulk) SetName(v string) *CoinUpsertBulk {
	return u.Update(func(s *CoinUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CoinUpsertBulk) UpdateName() *CoinUpsertBulk {
	return u.Update(func(s *CoinUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *CoinUpsertBulk) ClearName() *CoinUpsertBulk {
	return u.Update(func(s *CoinUpsert) {
		s.ClearName()
	})
}

// Exec executes the query.
func (u *CoinUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("repositories: OnConflict was set for builder %d. Set it on the CoinCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("repositories: missing options for CoinCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
