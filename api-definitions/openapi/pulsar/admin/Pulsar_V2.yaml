openapi: 3.0.1
info:
  title: Pulsar Admin REST API
  description: This provides the REST API for admin operations
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: v2
servers:
- url: /admin/v2
tags:
- name: bookies
- name: broker-stats
- name: brokers
- name: clusters
- name: namespaces
- name: non-persistent topic
- name: persistent topic
- name: resource-quotas
- name: resourcegroups
- name: schemas
- name: tenants
paths:
  /bookies/all:
    get:
      tags:
      - bookies
      summary: Gets raw information for all the bookies in the cluster
      operationId: getAllBookies
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookiesClusterInfo'
        403:
          description: Don't have admin permission
          content: {}
  /bookies/racks-info:
    get:
      tags:
      - bookies
      summary: Gets the rack placement information for all the bookies in the cluster
      operationId: getBookiesRackInfo
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/BookieInfo'
        403:
          description: Don't have admin permission
          content: {}
  /bookies/racks-info/{bookie}:
    get:
      tags:
      - bookies
      summary: Gets the rack placement information for a specific bookie in the cluster
      operationId: getBookieRackInfo
      parameters:
      - name: bookie
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookieInfo'
        403:
          description: Don't have admin permission
          content: {}
    post:
      tags:
      - bookies
      summary: Updates the rack placement information for a specific bookie in the
        cluster (note. bookie address format:`address:port`)
      operationId: updateBookieRackInfo
      parameters:
      - name: bookie
        in: path
        required: true
        schema:
          type: string
      - name: group
        in: query
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
    delete:
      tags:
      - bookies
      summary: Removed the rack placement information for a specific bookie in the
        cluster
      operationId: deleteBookieRackInfo
      parameters:
      - name: bookie
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
  /broker-stats/allocator-stats/{allocator}:
    get:
      tags:
      - broker-stats
      summary: Get the stats for the Netty allocator. Available allocators are 'default'
        and 'ml-cache'
      operationId: getAllocatorStats
      parameters:
      - name: allocator
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllocatorStats'
        403:
          description: Don't have admin permission
          content: {}
  /broker-stats/bookieops:
    get:
      tags:
      - broker-stats
      summary: Get pending bookie client op stats by namespace
      operationId: getPendingBookieOpsStats
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/PendingBookieOpsStats'
        403:
          description: Don't have admin permission
          content: {}
  /broker-stats/broker-resource-availability/{tenant}/{namespace}:
    get:
      tags:
      - broker-stats
      summary: Broker availability report
      description: This API gives the current broker availability in percent, each
        resource percentage usage is calculated and thensum of all of the resource
        usage percent is called broker-resource-availability<br/><br/>THIS API IS
        ONLY FOR USE BY TESTING FOR CONFIRMING NAMESPACE ALLOCATION ALGORITHM
      operationId: getBrokerResourceAvailability
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/ResourceUnit'
        403:
          description: Don't have admin permission
          content: {}
        409:
          description: Load-manager doesn't support operation
          content: {}
  /broker-stats/load-report:
    get:
      tags:
      - broker-stats
      summary: Get Load for this broker
      description: consists of topics stats & systemResourceUsage
      operationId: getLoadReport
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadReport'
        403:
          description: Don't have admin permission
          content: {}
  /broker-stats/mbeans:
    get:
      tags:
      - broker-stats
      summary: Get all the mbean details of this broker JVM
      operationId: getMBeans
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Metrics'
        403:
          description: Don't have admin permission
          content: {}
  /broker-stats/metrics:
    get:
      tags:
      - broker-stats
      summary: Gets the metrics for Monitoring
      description: Requested should be executed by Monitoring agent on each broker
        to fetch the metrics
      operationId: getBrokerStatsMetrics
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Metrics'
        403:
          description: Don't have admin permission
          content: {}
  /broker-stats/topics:
    get:
      tags:
      - broker-stats
      summary: Get all the topic stats by namespace
      operationId: getTopics2
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputStream'
        403:
          description: Don't have admin permission
          content: {}
  /brokers:
    get:
      tags:
      - brokers
      summary: Get the list of active brokers (web service addresses) in the local
        cluster.If authorization is not enabled
      operationId: getActiveBrokers
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
        401:
          description: Authentication required
          content: {}
        403:
          description: This operation requires super-user access
          content: {}
  /brokers/backlog-quota-check:
    get:
      tags:
      - brokers
      summary: An REST endpoint to trigger backlogQuotaCheck
      operationId: backlogQuotaCheck
      responses:
        200:
          description: Everything is OK
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        500:
          description: Internal server error
          content: {}
  /brokers/configuration:
    get:
      tags:
      - brokers
      summary: Get all updatable dynamic configurations's name
      operationId: getDynamicConfigurationName
      responses:
        403:
          description: You don't have admin permission to get configuration
          content: {}
  /brokers/configuration/runtime:
    get:
      tags:
      - brokers
      summary: Get all runtime configurations. This operation requires Pulsar super-user
        privileges.
      operationId: getRuntimeConfiguration
      responses:
        403:
          description: Don't have admin permission
          content: {}
  /brokers/configuration/values:
    get:
      tags:
      - brokers
      summary: Get value of all dynamic configurations' value overridden on local
        config
      operationId: getAllDynamicConfigurations
      responses:
        403:
          description: You don't have admin permission to view configuration
          content: {}
        404:
          description: Configuration not found
          content: {}
        500:
          description: Internal server error
          content: {}
  /brokers/configuration/{configName}:
    delete:
      tags:
      - brokers
      summary: Delete dynamic ServiceConfiguration into metadata only. This operation
        requires Pulsar super-user privileges.
      operationId: deleteDynamicConfiguration
      parameters:
      - name: configName
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: Service configuration updated successfully
          content: {}
        403:
          description: You don't have admin permission to update service-configuration
          content: {}
        412:
          description: Invalid dynamic-config value
          content: {}
        500:
          description: Internal server error
          content: {}
  /brokers/configuration/{configName}/{configValue}:
    post:
      tags:
      - brokers
      summary: Update dynamic serviceconfiguration into zk only. This operation requires
        Pulsar super-user privileges.
      operationId: updateDynamicConfiguration
      parameters:
      - name: configName
        in: path
        required: true
        schema:
          type: string
      - name: configValue
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: Service configuration updated successfully
          content: {}
        403:
          description: You don't have admin permission to update service-configuration
          content: {}
        404:
          description: Configuration not found
          content: {}
        412:
          description: Invalid dynamic-config value
          content: {}
        500:
          description: Internal server error
          content: {}
  /brokers/health:
    get:
      tags:
      - brokers
      summary: Run a healthCheck against the broker
      operationId: healthCheck
      parameters:
      - name: topicVersion
        in: query
        schema:
          type: string
          enum:
          - V1
          - V2
      responses:
        200:
          description: Everything is OK
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Cluster doesn't exist
          content: {}
        500:
          description: Internal server error
          content: {}
  /brokers/internal-configuration:
    get:
      tags:
      - brokers
      summary: Get the internal configuration data
      operationId: getInternalConfigurationData
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalConfigurationData'
        403:
          description: Don't have admin permission
          content: {}
  /brokers/leaderBroker:
    get:
      tags:
      - brokers
      summary: Get the information of the leader broker.
      operationId: getLeaderBroker
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrokerInfo'
        401:
          description: Authentication required
          content: {}
        403:
          description: This operation requires super-user access
          content: {}
        404:
          description: Leader broker not found
          content: {}
  /brokers/ready:
    get:
      tags:
      - brokers
      summary: Check if the broker is fully initialized
      operationId: isReady
      responses:
        200:
          description: Broker is ready
          content: {}
        500:
          description: Broker is not ready
          content: {}
  /brokers/shutdown:
    post:
      tags:
      - brokers
      summary: Shutdown broker gracefully.
      operationId: shutDownBrokerGracefully
      parameters:
      - name: maxConcurrentUnloadPerSec
        in: query
        description: if the value absent(value=0) means no concurrent limitation.
        schema:
          type: integer
          format: int32
      - name: forcedTerminateTopic
        in: query
        schema:
          type: boolean
          default: true
      responses:
        204:
          description: Execute shutdown command successfully
          content: {}
        403:
          description: You don't have admin permission to update service-configuration
          content: {}
        500:
          description: Internal server error
          content: {}
  /brokers/version:
    get:
      tags:
      - brokers
      summary: Get version of current broker
      operationId: version
      responses:
        200:
          description: Everything is OK
          content:
            application/json:
              schema:
                type: string
        500:
          description: Internal server error
          content: {}
  /brokers/{clusterName}/{broker-webserviceurl}/ownedNamespaces:
    get:
      tags:
      - brokers
      summary: Get the list of namespaces served by the specific broker
      operationId: getOwnedNamespaces
      parameters:
      - name: clusterName
        in: path
        required: true
        schema:
          type: string
      - name: broker-webserviceurl
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/NamespaceOwnershipStatus'
        307:
          description: Current broker doesn't serve the cluster
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Cluster doesn't exist
          content: {}
  /brokers/{cluster}:
    get:
      tags:
      - brokers
      summary: Get the list of active brokers (web service addresses) in the cluster.If
        authorization is not enabled, any cluster name is valid.
      operationId: getActiveClusterBrokers
      parameters:
      - name: cluster
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
        307:
          description: Current broker doesn't serve this cluster
          content: {}
        401:
          description: Authentication required
          content: {}
        403:
          description: This operation requires super-user access
          content: {}
        404:
          description: 'Cluster does not exist: cluster={clustername}'
          content: {}
  /clusters:
    get:
      tags:
      - clusters
      summary: Get the list of all the Pulsar clusters.
      operationId: getClusters
      responses:
        200:
          description: Return a list of clusters.
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
        500:
          description: Internal server error.
          content: {}
  /clusters/{cluster}:
    get:
      tags:
      - clusters
      summary: Get the configuration for the specified cluster.
      description: This operation requires Pulsar superuser privileges.
      operationId: getCluster
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        schema:
          type: string
      responses:
        200:
          description: Return the cluster data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterData'
        403:
          description: Don't have admin permission.
          content: {}
        404:
          description: Cluster doesn't exist.
          content: {}
        500:
          description: Internal server error.
          content: {}
    put:
      tags:
      - clusters
      summary: Create a new cluster.
      description: This operation requires Pulsar superuser privileges, and the name
        cannot contain the '/' characters.
      operationId: createCluster
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        schema:
          type: string
      requestBody:
        description: The cluster data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ClusterData'
        required: true
      responses:
        204:
          description: Cluster has been created.
          content: {}
        403:
          description: You don't have admin permission to create the cluster.
          content: {}
        409:
          description: Cluster already exists.
          content: {}
        412:
          description: Cluster name is not valid.
          content: {}
        500:
          description: Internal server error.
          content: {}
      x-codegen-request-body-name: body
    post:
      tags:
      - clusters
      summary: Update the configuration for a cluster.
      description: This operation requires Pulsar superuser privileges.
      operationId: updateCluster
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        schema:
          type: string
      requestBody:
        description: The cluster data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ClusterData'
        required: true
      responses:
        204:
          description: Cluster has been updated.
          content: {}
        403:
          description: Don't have admin permission or policies are read-only.
          content: {}
        404:
          description: Cluster doesn't exist.
          content: {}
        500:
          description: Internal server error.
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - clusters
      summary: Delete an existing cluster.
      description: This operation requires Pulsar superuser privileges.
      operationId: deleteCluster
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        schema:
          type: string
      responses:
        204:
          description: Cluster has been deleted.
          content: {}
        403:
          description: Don't have admin permission or policies are read-only.
          content: {}
        404:
          description: Cluster doesn't exist.
          content: {}
        412:
          description: Cluster is not empty.
          content: {}
        500:
          description: Internal server error.
          content: {}
  /clusters/{cluster}/failureDomains:
    get:
      tags:
      - clusters
      summary: Get the cluster failure domains.
      description: This operation requires Pulsar superuser privileges.
      operationId: getFailureDomains
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/FailureDomain'
        403:
          description: Don't have admin permission
          content: {}
        500:
          description: Internal server error
          content: {}
  /clusters/{cluster}/failureDomains/{domainName}:
    get:
      tags:
      - clusters
      summary: Get a domain in a cluster
      description: This operation requires Pulsar superuser privileges.
      operationId: getDomain
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        schema:
          type: string
      - name: domainName
        in: path
        description: The failure domain name
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureDomain'
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: FailureDomain doesn't exist
          content: {}
        412:
          description: Cluster doesn't exist
          content: {}
        500:
          description: Internal server error
          content: {}
    post:
      tags:
      - clusters
      summary: Set the failure domain of the cluster.
      description: This operation requires Pulsar superuser privileges.
      operationId: setFailureDomain
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        schema:
          type: string
      - name: domainName
        in: path
        description: The failure domain name
        required: true
        schema:
          type: string
      requestBody:
        description: The configuration data of a failure domain
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/FailureDomain'
        required: true
      responses:
        403:
          description: Don't have admin permission.
          content: {}
        404:
          description: Failure domain doesn't exist.
          content: {}
        409:
          description: Broker already exists in another domain.
          content: {}
        412:
          description: Cluster doesn't exist.
          content: {}
        500:
          description: Internal server error.
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - clusters
      summary: Delete the failure domain of the cluster
      description: This operation requires Pulsar superuser privileges.
      operationId: deleteFailureDomain
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        schema:
          type: string
      - name: domainName
        in: path
        description: The failure domain name
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission or policy is read only
          content: {}
        404:
          description: FailureDomain doesn't exist
          content: {}
        412:
          description: Cluster doesn't exist
          content: {}
        500:
          description: Internal server error
          content: {}
  /clusters/{cluster}/namespaceIsolationPolicies:
    get:
      tags:
      - clusters
      summary: Get the namespace isolation policies assigned to the cluster.
      description: This operation requires Pulsar superuser privileges.
      operationId: getNamespaceIsolationPolicies
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/NamespaceIsolationData'
        403:
          description: Don't have admin permission.
          content: {}
        404:
          description: Cluster doesn't exist.
          content: {}
        500:
          description: Internal server error.
          content: {}
  /clusters/{cluster}/namespaceIsolationPolicies/brokers:
    get:
      tags:
      - clusters
      summary: Get list of brokers with namespace-isolation policies attached to them.
      description: This operation requires Pulsar superuser privileges.
      operationId: getBrokersWithNamespaceIsolationPolicy
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/BrokerNamespaceIsolationData'
        403:
          description: Don't have admin permission.
          content: {}
        404:
          description: Namespace-isolation policies not found.
          content: {}
        412:
          description: Cluster doesn't exist.
          content: {}
        500:
          description: Internal server error.
          content: {}
  /clusters/{cluster}/namespaceIsolationPolicies/brokers/{broker}:
    get:
      tags:
      - clusters
      summary: Get a broker with namespace-isolation policies attached to it.
      description: This operation requires Pulsar superuser privileges.
      operationId: getBrokerWithNamespaceIsolationPolicy
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        schema:
          type: string
      - name: broker
        in: path
        description: The broker name (<broker-hostname>:<web-service-port>)
        required: true
        schema:
          type: string
        example: broker1:8080
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrokerNamespaceIsolationData'
        403:
          description: Don't have admin permission.
          content: {}
        404:
          description: Namespace-isolation policies/ Broker not found.
          content: {}
        412:
          description: Cluster doesn't exist.
          content: {}
        500:
          description: Internal server error.
          content: {}
  /clusters/{cluster}/namespaceIsolationPolicies/{policyName}:
    get:
      tags:
      - clusters
      summary: Get the single namespace isolation policy assigned to the cluster.
      description: This operation requires Pulsar superuser privileges.
      operationId: getNamespaceIsolationPolicy
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        schema:
          type: string
      - name: policyName
        in: path
        description: The name of the namespace isolation policy
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamespaceIsolationData'
        403:
          description: Don't have admin permission.
          content: {}
        404:
          description: Policy doesn't exist.
          content: {}
        412:
          description: Cluster doesn't exist.
          content: {}
        500:
          description: Internal server error.
          content: {}
    post:
      tags:
      - clusters
      summary: Set namespace isolation policy.
      description: This operation requires Pulsar superuser privileges.
      operationId: setNamespaceIsolationPolicy
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        schema:
          type: string
      - name: policyName
        in: path
        description: The namespace isolation policy name
        required: true
        schema:
          type: string
      requestBody:
        description: The namespace isolation policy data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NamespaceIsolationData'
        required: true
      responses:
        400:
          description: Namespace isolation policy data is invalid.
          content: {}
        403:
          description: Don't have admin permission or policies are read-only.
          content: {}
        404:
          description: Namespace isolation policy doesn't exist.
          content: {}
        412:
          description: Cluster doesn't exist.
          content: {}
        500:
          description: Internal server error.
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - clusters
      summary: Delete namespace isolation policy.
      description: This operation requires Pulsar superuser privileges.
      operationId: deleteNamespaceIsolationPolicy
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        schema:
          type: string
      - name: policyName
        in: path
        description: The namespace isolation policy name
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission or policies are read only.
          content: {}
        404:
          description: Namespace isolation policy doesn't exist.
          content: {}
        412:
          description: Cluster doesn't exist.
          content: {}
        500:
          description: Internal server error.
          content: {}
  /clusters/{cluster}/peers:
    get:
      tags:
      - clusters
      summary: Get the peer-cluster data for the specified cluster.
      description: This operation requires Pulsar superuser privileges.
      operationId: getPeerCluster
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
        403:
          description: Don't have admin permission.
          content: {}
        404:
          description: Cluster doesn't exist.
          content: {}
        500:
          description: Internal server error.
          content: {}
    post:
      tags:
      - clusters
      summary: Update peer-cluster-list for a cluster.
      description: This operation requires Pulsar superuser privileges.
      operationId: setPeerClusterNames
      parameters:
      - name: cluster
        in: path
        description: The cluster name
        required: true
        schema:
          type: string
      requestBody:
        description: The list of peer cluster names
        content:
          '*/*':
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        204:
          description: Cluster has been updated.
          content: {}
        403:
          description: Don't have admin permission or policies are read-only.
          content: {}
        404:
          description: Cluster doesn't exist.
          content: {}
        412:
          description: Peer cluster doesn't exist.
          content: {}
        500:
          description: Internal server error.
          content: {}
      x-codegen-request-body-name: body
  /namespaces/{cluster}/antiAffinity/{group}:
    get:
      tags:
      - namespaces
      summary: Get all namespaces that are grouped by given anti-affinity group in
        a given cluster. api can be only accessed by admin of any of the existing
        tenant
      operationId: getAntiAffinityNamespaces
      parameters:
      - name: cluster
        in: path
        required: true
        schema:
          type: string
      - name: group
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: query
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        403:
          description: Don't have admin permission
          content: {}
        412:
          description: Cluster not exist/Anti-affinity group can't be empty.
          content: {}
  /namespaces/{property}/{namespace}/persistence/bookieAffinity:
    get:
      tags:
      - namespaces
      summary: Get the bookie-affinity-group from namespace-local policy.
      operationId: getBookieAffinityGroup
      parameters:
      - name: property
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookieAffinityGroupData'
        307:
          description: Current broker doesn't serve the namespace
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
    delete:
      tags:
      - namespaces
      summary: Delete the bookie-affinity-group from namespace-local policy.
      operationId: deleteBookieAffinityGroup
      parameters:
      - name: property
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}:
    get:
      tags:
      - namespaces
      summary: Get the list of all the namespaces for a certain tenant.
      operationId: getTenantNamespaces
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}:
    get:
      tags:
      - namespaces
      summary: Get the dump all the policies specified for a namespace.
      operationId: getPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policies'
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
    put:
      tags:
      - namespaces
      summary: Creates a new namespace with the specified policies
      operationId: createNamespace
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Policies for the namespace
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policies'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster doesn't exist
          content: {}
        409:
          description: Namespace already exists
          content: {}
        412:
          description: Namespace name is not valid
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Delete a namespace and all the topics under it.
      operationId: deleteNamespace
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: force
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        405:
          description: Broker doesn't allow forced deletion of namespaces
          content: {}
        409:
          description: Namespace is not empty
          content: {}
  /namespaces/{tenant}/{namespace}/antiAffinity:
    get:
      tags:
      - namespaces
      summary: Get anti-affinity group of a namespace.
      operationId: getNamespaceAntiAffinityGroup
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Set anti-affinity group for a namespace
      operationId: setNamespaceAntiAffinityGroup
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Anti-affinity group for the specified namespace
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        412:
          description: Invalid antiAffinityGroup
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Remove anti-affinity group of a namespace.
      operationId: removeNamespaceAntiAffinityGroup
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/autoSubscriptionCreation:
    get:
      tags:
      - namespaces
      summary: Get autoSubscriptionCreation info in a namespace
      operationId: getAutoSubscriptionCreation
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or namespace doesn't exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Override broker's allowAutoSubscriptionCreation setting for a namespace
      operationId: setAutoSubscriptionCreation
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Settings for automatic subscription creation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutoSubscriptionCreationOverride'
        required: false
      responses:
        400:
          description: Invalid autoSubscriptionCreation override
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Remove override of broker's allowAutoSubscriptionCreation in a namespace
      operationId: removeAutoSubscriptionCreation
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}/autoTopicCreation:
    get:
      tags:
      - namespaces
      summary: Get autoTopicCreation info in a namespace
      operationId: getAutoTopicCreation
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or namespace doesn't exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Override broker's allowAutoTopicCreation setting for a namespace
      operationId: setAutoTopicCreation
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Settings for automatic topic creation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutoTopicCreationOverride'
        required: true
      responses:
        400:
          description: Invalid autoTopicCreation override
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        406:
          description: The number of partitions should be less than or equal to maxNumPartitionsPerPartitionedTopic
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Remove override of broker's allowAutoTopicCreation in a namespace
      operationId: removeAutoTopicCreation
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}/backlogQuota:
    post:
      tags:
      - namespaces
      summary: ' Set a backlog quota for all the topics on a namespace.'
      operationId: setNamespaceBacklogQuota
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: backlogQuotaType
        in: query
        schema:
          type: string
          enum:
          - destination_storage
          - message_age
      requestBody:
        description: Backlog quota for all topics of the specified namespace
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BacklogQuota'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Specified backlog quota exceeds retention quota. Increase retention
            quota and retry request
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Remove a backlog quota policy from a namespace.
      operationId: removeNamesapceBacklogQuota
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: backlogQuotaType
        in: query
        schema:
          type: string
          enum:
          - destination_storage
          - message_age
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/backlogQuotaMap:
    get:
      tags:
      - namespaces
      summary: Get backlog quota map on a namespace.
      operationId: getNamespaceBacklogQuotaMap
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
  /namespaces/{tenant}/{namespace}/bundles:
    get:
      tags:
      - namespaces
      summary: Get the bundles split data.
      operationId: getBundlesData
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        412:
          description: Namespace is not setup to split in bundles
          content: {}
  /namespaces/{tenant}/{namespace}/clearBacklog:
    post:
      tags:
      - namespaces
      summary: Clear backlog for all topics on a namespace.
      operationId: clearNamespaceBacklog
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin or operate permission on the namespace
          content: {}
        404:
          description: Namespace does not exist
          content: {}
  /namespaces/{tenant}/{namespace}/clearBacklog/{subscription}:
    post:
      tags:
      - namespaces
      summary: Clear backlog for a given subscription on all topics on a namespace.
      operationId: clearNamespaceBacklogForSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: subscription
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin or operate permission on the namespace
          content: {}
        404:
          description: Namespace does not exist
          content: {}
  /namespaces/{tenant}/{namespace}/compactionThreshold:
    get:
      tags:
      - namespaces
      summary: Maximum number of uncompacted bytes in topics before compaction is
        triggered.
      description: The backlog size is compared to the threshold periodically. A threshold
        of 0 disabled automatic compaction
      operationId: getNamespaceCompactionThreshold
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace doesn't exist
          content: {}
    put:
      tags:
      - namespaces
      summary: Set maximum number of uncompacted bytes in a topic before compaction
        is triggered.
      description: The backlog size is compared to the threshold periodically. A threshold
        of 0 disabled automatic compaction
      operationId: setNamespaceCompactionThreshold
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Maximum number of uncompacted bytes in a topic of the specified
          namespace
        content:
          application/json:
            schema:
              type: integer
              format: int64
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace doesn't exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: compactionThreshold value is not valid
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Delete maximum number of uncompacted bytes in a topic before compaction
        is triggered.
      description: The backlog size is compared to the threshold periodically. A threshold
        of 0 disabled automatic compaction
      operationId: deleteCompactionThreshold
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace doesn't exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/deduplication:
    get:
      tags:
      - namespaces
      summary: Get broker side deduplication for all topics in a namespace
      operationId: getNamespaceDeduplication
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Enable or disable broker side deduplication for all topics in a namespace
      operationId: modifyDeduplication
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Flag for disabling or enabling broker side deduplication for
          all topics in the specified namespace
        content:
          application/json:
            schema:
              type: boolean
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Remove broker side deduplication for all topics in a namespace
      operationId: removeNamespaceDeduplication
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}/deduplicationSnapshotInterval:
    get:
      tags:
      - namespaces
      summary: Get deduplicationSnapshotInterval config on a namespace.
      operationId: getNamespaceDeduplicationSnapshotInterval
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Set deduplicationSnapshotInterval config on a namespace.
      operationId: setNamespaceDeduplicationSnapshotInterval
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Interval to take deduplication snapshot per topic
        content:
          application/json:
            schema:
              type: integer
              format: int32
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/delayedDelivery:
    get:
      tags:
      - namespaces
      summary: Get delayed delivery messages config on a namespace.
      operationId: getNamespaceDelayedDeliveryPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - namespaces
      summary: Set delayed delivery messages config on a namespace.
      operationId: setNamespaceDelayedDeliveryPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Delayed delivery policies for the specified namespace
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelayedDeliveryPolicies'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Delete delayed delivery messages config on a namespace.
      operationId: removeDelayedDeliveryPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}/dispatchRate:
    get:
      tags:
      - namespaces
      summary: Get dispatch-rate configured for the namespace, null means dispatch-rate
        not configured, -1 means msg-dispatch-rate or byte-dispatch-rate not configured
        in dispatch-rate yet
      operationId: getNamespaceDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Set dispatch-rate throttling for all topics of the namespace
      operationId: setNamespaceDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Dispatch rate for all topics of the specified namespace
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Delete dispatch-rate throttling for all topics of the namespace
      operationId: deleteDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
  /namespaces/{tenant}/{namespace}/encryptionRequired:
    get:
      tags:
      - namespaces
      summary: Get message encryption required status in a namespace
      operationId: getEncryptionRequired
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or namespace doesn't exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Message encryption is required or not for all topics in a namespace
      operationId: modifyEncryptionRequired
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Flag defining if message encryption is required
        content:
          application/json:
            schema:
              type: boolean
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/entryFilters:
    get:
      tags:
      - namespaces
      summary: Get maxConsumersPerSubscription config on a namespace.
      operationId: getNamespaceEntryFiltersPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Set entry filters for namespace
      operationId: setEntryFiltersPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: entry filters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntryFilters'
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Remove entry filters for namespace
      operationId: removeNamespaceEntryFilters
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        412:
          description: Invalid TTL
          content: {}
  /namespaces/{tenant}/{namespace}/inactiveTopicPolicies:
    get:
      tags:
      - namespaces
      summary: Get inactive topic policies config on a namespace.
      operationId: getNamespaceInactiveTopicPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - namespaces
      summary: Set inactive topic policies config on a namespace.
      operationId: setNamespaceInactiveTopicPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Inactive topic policies for the specified namespace
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InactiveTopicPolicies'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Remove inactive topic policies from a namespace.
      operationId: removeInactiveTopicPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/isAllowAutoUpdateSchema:
    get:
      tags:
      - namespaces
      summary: The flag of whether allow auto update schema
      operationId: getIsAllowAutoUpdateSchema
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace doesn't exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - namespaces
      summary: Update flag of whether allow auto update schema
      operationId: setIsAllowAutoUpdateSchema
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Flag of whether to allow auto update schema
        content:
          application/json:
            schema:
              type: boolean
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace doesn't exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/maxConsumersPerSubscription:
    get:
      tags:
      - namespaces
      summary: Get maxConsumersPerSubscription config on a namespace.
      operationId: getNamespaceMaxConsumersPerSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: ' Set maxConsumersPerSubscription configuration on a namespace.'
      operationId: setNamespaceMaxConsumersPerSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Number of maximum consumers per subscription
        content:
          application/json:
            schema:
              type: integer
              format: int32
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: maxConsumersPerSubscription value is not valid
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: ' Set maxConsumersPerSubscription configuration on a namespace.'
      operationId: removeNamespaceMaxConsumersPerSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: maxConsumersPerSubscription value is not valid
          content: {}
  /namespaces/{tenant}/{namespace}/maxConsumersPerTopic:
    get:
      tags:
      - namespaces
      summary: Get maxConsumersPerTopic config on a namespace.
      operationId: getNamespaceMaxConsumersPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: ' Set maxConsumersPerTopic configuration on a namespace.'
      operationId: setNamespaceMaxConsumersPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Number of maximum consumers per topic
        content:
          application/json:
            schema:
              type: integer
              format: int32
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: maxConsumersPerTopic value is not valid
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Remove maxConsumersPerTopic configuration on a namespace.
      operationId: removeNamespaceMaxConsumersPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/maxProducersPerTopic:
    get:
      tags:
      - namespaces
      summary: Get maxProducersPerTopic config on a namespace.
      operationId: getNamespaceMaxProducersPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: ' Set maxProducersPerTopic configuration on a namespace.'
      operationId: setNamespaceMaxProducersPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Number of maximum producers per topic
        content:
          application/json:
            schema:
              type: integer
              format: int32
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: maxProducersPerTopic value is not valid
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Remove maxProducersPerTopic configuration on a namespace.
      operationId: removeNamespaceMaxProducersPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/maxSubscriptionsPerTopic:
    get:
      tags:
      - namespaces
      summary: Get maxSubscriptionsPerTopic config on a namespace.
      operationId: getNamespaceMaxSubscriptionsPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: ' Set maxSubscriptionsPerTopic configuration on a namespace.'
      operationId: setNamespaceMaxSubscriptionsPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Number of maximum subscriptions per topic
        content:
          application/json:
            schema:
              type: integer
              format: int32
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: maxUnackedMessagesPerSubscription value is not valid
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Remove maxSubscriptionsPerTopic configuration on a namespace.
      operationId: removeNamespaceMaxSubscriptionsPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/maxTopicsPerNamespace:
    get:
      tags:
      - namespaces
      summary: Get maxTopicsPerNamespace config on a namespace.
      operationId: getNamespaceMaxTopicsPerNamespace
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Set maxTopicsPerNamespace config on a namespace.
      operationId: setNamespaceMaxTopicsPerNamespace
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Number of maximum topics for specific namespace
        content:
          application/json:
            schema:
              type: integer
              format: int32
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or namespace doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Set maxTopicsPerNamespace config on a namespace.
      operationId: deleteNamespaceMaxTopicsPerNamespace
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or namespace doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}/maxUnackedMessagesPerConsumer:
    get:
      tags:
      - namespaces
      summary: Get maxUnackedMessagesPerConsumer config on a namespace.
      operationId: getNamespaceMaxUnackedMessagesPerConsumer
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: ' Set maxConsumersPerTopic configuration on a namespace.'
      operationId: setNamespaceMaxUnackedMessagesPerConsumer
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Number of maximum unacked messages per consumer
        content:
          application/json:
            schema:
              type: integer
              format: int32
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: maxUnackedMessagesPerConsumer value is not valid
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Remove maxUnackedMessagesPerConsumer config on a namespace.
      operationId: removeNamespaceMaxUnackedmessagesPerConsumer
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
  /namespaces/{tenant}/{namespace}/maxUnackedMessagesPerSubscription:
    get:
      tags:
      - namespaces
      summary: Get maxUnackedMessagesPerSubscription config on a namespace.
      operationId: getNamespaceMaxUnackedmessagesPerSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: ' Set maxUnackedMessagesPerSubscription configuration on a namespace.'
      operationId: setNamespaceMaxUnackedMessagesPerSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Number of maximum unacked messages per subscription
        content:
          application/json:
            schema:
              type: integer
              format: int32
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: maxUnackedMessagesPerSubscription value is not valid
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Remove maxUnackedMessagesPerSubscription config on a namespace.
      operationId: removeNamespaceMaxUnackedmessagesPerSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
  /namespaces/{tenant}/{namespace}/messageTTL:
    get:
      tags:
      - namespaces
      summary: Get the message TTL for the namespace
      operationId: getNamespaceMessageTTL
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int32
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Set message TTL in seconds for namespace
      operationId: setNamespaceMessageTTL
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: TTL in seconds for the specified namespace
        content:
          application/json:
            schema:
              type: integer
              format: int32
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        412:
          description: Invalid TTL
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Remove message TTL in seconds for namespace
      operationId: removeNamespaceMessageTTL
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        412:
          description: Invalid TTL
          content: {}
  /namespaces/{tenant}/{namespace}/offloadDeletionLagMs:
    get:
      tags:
      - namespaces
      summary: Number of milliseconds to wait before deleting a ledger segment which
        has been offloaded from the Pulsar cluster's local storage (i.e. BookKeeper)
      description: A negative value denotes that deletion has been completely disabled.
        'null' denotes that the topics in the namespace will fall back to the broker
        default for deletion lag.
      operationId: getNamespaceOffloadDeletionLag
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace doesn't exist
          content: {}
    put:
      tags:
      - namespaces
      summary: Set number of milliseconds to wait before deleting a ledger segment
        which has been offloaded from the Pulsar cluster's local storage (i.e. BookKeeper)
      description: A negative value disables the deletion completely.
      operationId: setNamespaceOffloadDeletionLag
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: New number of milliseconds to wait before deleting a ledger segment
          which has been offloaded
        content:
          application/json:
            schema:
              type: integer
              format: int64
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace doesn't exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: offloadDeletionLagMs value is not valid
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Clear the namespace configured offload deletion lag. The topics in
        the namespace will fallback to using the default configured deletion lag for
        the broker
      operationId: clearOffloadDeletionLag
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace doesn't exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/offloadPolicies:
    get:
      tags:
      - namespaces
      summary: Get offload configuration on a namespace.
      operationId: getNamespaceOffloadPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: ' Set offload configuration on a namespace.'
      operationId: setNamespaceOffloadPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Offload policies for the specified namespace
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OffloadPoliciesImpl'
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: OffloadPolicies is empty or driver is not supported or bucket
            is not valid
          content: {}
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/offloadThreshold:
    get:
      tags:
      - namespaces
      summary: Maximum number of bytes stored on the pulsar cluster for a topic, before
        the broker will start offloading to longterm storage
      description: A negative value disables automatic offloading
      operationId: getNamespaceOffloadThreshold
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace doesn't exist
          content: {}
    put:
      tags:
      - namespaces
      summary: Set maximum number of bytes stored on the pulsar cluster for a topic,
        before the broker will start offloading to longterm storage
      description: '-1 will revert to using the cluster default. A negative value
        disables automatic offloading. '
      operationId: setNamespaceOffloadThreshold
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Maximum number of bytes stored on the pulsar cluster for a topic
          of the specified namespace
        content:
          application/json:
            schema:
              type: integer
              format: int64
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace doesn't exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: offloadThreshold value is not valid
          content: {}
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/permissions:
    get:
      tags:
      - namespaces
      summary: Retrieve the permissions for a namespace.
      operationId: getPermissions
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        409:
          description: Namespace is not empty
          content: {}
  /namespaces/{tenant}/{namespace}/permissions/subscription:
    get:
      tags:
      - namespaces
      summary: Retrieve the permissions for a subscription.
      operationId: getPermissionOnSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        409:
          description: Namespace is not empty
          content: {}
  /namespaces/{tenant}/{namespace}/permissions/{role}:
    post:
      tags:
      - namespaces
      summary: Grant a new permission to a role on a namespace.
      operationId: grantPermissionOnNamespace
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: role
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: List of permissions for the specified role
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                enum:
                - produce
                - consume
                - functions
                - sources
                - sinks
                - packages
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        501:
          description: Authorization is not enabled
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Revoke all permissions to a role on a namespace.
      operationId: revokePermissionsOnNamespace
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: role
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}/persistence:
    get:
      tags:
      - namespaces
      summary: Get the persistence configuration for a namespace.
      operationId: getNamespacePersistence
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - namespaces
      summary: Set the persistence configuration for all the topics on a namespace.
      operationId: setNamespacePersistence
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Persistence policies for the specified namespace
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistencePolicies'
        required: true
      responses:
        400:
          description: Invalid persistence policies
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Delete the persistence configuration for all topics on a namespace
      operationId: deletePersistence
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
  /namespaces/{tenant}/{namespace}/persistence/bookieAffinity:
    post:
      tags:
      - namespaces
      summary: Set the bookie-affinity-group to namespace-persistent policy.
      operationId: setBookieAffinityGroup
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Bookie affinity group for the specified namespace
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookieAffinityGroupData'
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/properties:
    get:
      tags:
      - namespaces
      summary: Get key value pair properties for a given namespace.
      operationId: getNamespaceProperties
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or namespace doesn't exist
          content: {}
    put:
      tags:
      - namespaces
      summary: Put key value pairs property on a namespace.
      operationId: setProperties
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Key value pair properties for the namespace
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or namespace doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Clear properties on a given namespace.
      operationId: clearProperties
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or namespace doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}/property/{key}:
    get:
      tags:
      - namespaces
      summary: Get property value for a given key on a namespace.
      operationId: getProperty
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or namespace doesn't exist
          content: {}
    delete:
      tags:
      - namespaces
      summary: Get property value for a given key on a namespace.
      operationId: removeProperty
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or namespace doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}/property/{key}/{value}:
    put:
      tags:
      - namespaces
      summary: Put a key value pair property on a namespace.
      operationId: setProperty
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: value
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or namespace doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}/removeOffloadPolicies:
    delete:
      tags:
      - namespaces
      summary: ' Set offload configuration on a namespace.'
      operationId: removeNamespaceOffloadPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: OffloadPolicies is empty or driver is not supported or bucket
            is not valid
          content: {}
  /namespaces/{tenant}/{namespace}/replication:
    get:
      tags:
      - namespaces
      summary: Get the replication clusters for a namespace.
      operationId: getNamespaceReplicationClusters
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        412:
          description: Namespace is not global
          content: {}
    post:
      tags:
      - namespaces
      summary: Set the replication clusters for a namespace.
      operationId: setNamespaceReplicationClusters
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: List of replication clusters
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        409:
          description: Peer-cluster can't be part of replication-cluster
          content: {}
        412:
          description: Namespace is not global or invalid cluster ids
          content: {}
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/replicatorDispatchRate:
    get:
      tags:
      - namespaces
      summary: Get replicator dispatch-rate configured for the namespace, null means
        replicator dispatch-rate not configured, -1 means msg-dispatch-rate or byte-dispatch-rate
        not configured in dispatch-rate yet
      operationId: getNamespaceReplicatorDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Set replicator dispatch-rate throttling for all topics of the namespace
      operationId: setNamespaceReplicatorDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Replicator dispatch rate for all topics of the specified namespace
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Remove replicator dispatch-rate throttling for all topics of the namespace
      operationId: removeNamespaceReplicatorDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
  /namespaces/{tenant}/{namespace}/resourcegroup:
    get:
      tags:
      - namespaces
      summary: Get the resource group attached to the namespace
      operationId: getNamespaceResourceGroup
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
    delete:
      tags:
      - namespaces
      summary: Delete resourcegroup for a namespace
      operationId: removeNamespaceResourceGroup
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        412:
          description: Invalid resourcegroup
          content: {}
  /namespaces/{tenant}/{namespace}/resourcegroup/{resourcegroup}:
    post:
      tags:
      - namespaces
      summary: Set resourcegroup for a namespace
      operationId: setNamespaceResourceGroup
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: resourcegroup
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        412:
          description: Invalid resourcegroup
          content: {}
  /namespaces/{tenant}/{namespace}/retention:
    get:
      tags:
      - namespaces
      summary: Get retention config on a namespace.
      operationId: getNamespaceRetention
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: ' Set retention configuration on a namespace.'
      operationId: setNamespaceRetention
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Retention policies for the specified namespace
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetentionPolicies'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Retention Quota must exceed backlog quota
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: ' Remove retention configuration on a namespace.'
      operationId: removeNamespaceRetention
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Retention policies for the specified namespace
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetentionPolicies'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Retention Quota must exceed backlog quota
          content: {}
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/scanOffloadedLedgers:
    get:
      tags:
      - namespaces
      summary: Trigger the scan of offloaded Ledgers on the LedgerOffloader for the
        given namespace
      operationId: scanOffloadedLedgers
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}/schemaAutoUpdateCompatibilityStrategy:
    get:
      tags:
      - namespaces
      summary: The strategy used to check the compatibility of new schemas, provided
        by producers, before automatically updating the schema
      description: The value AutoUpdateDisabled prevents producers from updating the
        schema.  If set to AutoUpdateDisabled, schemas must be updated through the
        REST api
      operationId: getSchemaAutoUpdateCompatibilityStrategy
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                enum:
                - AutoUpdateDisabled
                - Backward
                - Forward
                - Full
                - AlwaysCompatible
                - BackwardTransitive
                - ForwardTransitive
                - FullTransitive
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace doesn't exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
    put:
      tags:
      - namespaces
      summary: Update the strategy used to check the compatibility of new schemas,
        provided by producers, before automatically updating the schema
      description: The value AutoUpdateDisabled prevents producers from updating the
        schema.  If set to AutoUpdateDisabled, schemas must be updated through the
        REST api
      operationId: setSchemaAutoUpdateCompatibilityStrategy
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Strategy used to check the compatibility of new schemas
        content:
          application/json:
            schema:
              type: string
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace doesn't exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/schemaCompatibilityStrategy:
    get:
      tags:
      - namespaces
      summary: 'The strategy of the namespace schema compatibility '
      operationId: getNamespaceSchemaCompatibilityStrategy
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace doesn't exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
    put:
      tags:
      - namespaces
      summary: Update the strategy used to check the compatibility of new schema
      operationId: setNamespaceSchemaCompatibilityStrategy
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Strategy used to check the compatibility of new schema
        content:
          application/json:
            schema:
              type: string
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace doesn't exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/schemaValidationEnforced:
    get:
      tags:
      - namespaces
      summary: Get schema validation enforced flag for namespace.
      description: If the flag is set to true, when a producer without a schema attempts
        to produce to a topic with schema in this namespace, the producer will be
        failed to connect. PLEASE be carefully on using this, since non-java clients
        don't support schema.if you enable this setting, it will cause non-java clients
        failed to produce.
      operationId: getSchemaValidtionEnforced
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenants or Namespace doesn't exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Set schema validation enforced flag on namespace.
      description: If the flag is set to true, when a producer without a schema attempts
        to produce to a topic with schema in this namespace, the producer will be
        failed to connect. PLEASE be carefully on using this, since non-java clients
        don't support schema.if you enable this setting, it will cause non-java clients
        failed to produce.
      operationId: setNamespaceSchemaValidationEnforced
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Flag of whether validation is enforced on the specified namespace
        content:
          application/json:
            schema:
              type: boolean
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or Namespace doesn't exist
          content: {}
        412:
          description: schemaValidationEnforced value is not valid
          content: {}
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/subscribeRate:
    get:
      tags:
      - namespaces
      summary: Get subscribe-rate configured for the namespace
      operationId: getNamespaceSubscribeRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Set subscribe-rate throttling for all topics of the namespace
      operationId: setNamespaceSubscribeRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Subscribe rate for all topics of the specified namespace
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribeRate'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Delete subscribe-rate throttling for all topics of the namespace
      operationId: deleteSubscribeRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
  /namespaces/{tenant}/{namespace}/subscriptionAuthMode:
    get:
      tags:
      - namespaces
      summary: Get subscription auth mode in a namespace
      operationId: getSubscriptionAuthMode
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or namespace doesn't exist
          content: {}
    post:
      tags:
      - namespaces
      summary: ' Set a subscription auth mode for all the topics on a namespace.'
      operationId: setNamespaceSubscriptionAuthMode
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Subscription auth mode for all topics of the specified namespace
        content:
          application/json:
            schema:
              type: string
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/subscriptionDispatchRate:
    get:
      tags:
      - namespaces
      summary: Get subscription dispatch-rate configured for the namespace, null means
        subscription dispatch-rate not configured, -1 means msg-dispatch-rate or byte-dispatch-rate
        not configured in dispatch-rate yet
      operationId: getNamespaceSubscriptionDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Set Subscription dispatch-rate throttling for all topics of the namespace
      operationId: setNamespaceSubscriptionDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Subscription dispatch rate for all topics of the specified namespace
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Delete Subscription dispatch-rate throttling for all topics of the
        namespace
      operationId: deleteSubscriptionDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
  /namespaces/{tenant}/{namespace}/subscriptionExpirationTime:
    get:
      tags:
      - namespaces
      summary: Get the subscription expiration time for the namespace
      operationId: getSubscriptionExpirationTime
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
    post:
      tags:
      - namespaces
      summary: Set subscription expiration time in minutes for namespace
      operationId: setNamespaceSubscriptionExpirationTime
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Expiration time in minutes for the specified namespace
        content:
          application/json:
            schema:
              type: integer
              format: int32
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        412:
          description: Invalid expiration time
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: Remove subscription expiration time for namespace
      operationId: removeSubscriptionExpirationTime
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}/subscriptionTypesEnabled:
    get:
      tags:
      - namespaces
      summary: The set of whether allow subscription types
      operationId: getNamespaceSubscriptionTypesEnabled
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace doesn't exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - namespaces
      summary: Update set of whether allow share sub type
      operationId: setNamespaceSubscriptionTypesEnabled
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Set of whether allow subscription types
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                enum:
                - Exclusive
                - Shared
                - Failover
                - Key_Shared
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace doesn't exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - namespaces
      summary: ' Remove subscription types enabled on a namespace.'
      operationId: removeNamespaceSubscriptionTypesEnabled
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or Namespace does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /namespaces/{tenant}/{namespace}/topics:
    get:
      tags:
      - namespaces
      summary: Get the list of all the topics under a certain namespace.
      operationId: getTopics
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: mode
        in: query
        schema:
          type: string
          default: PERSISTENT
          enum:
          - PERSISTENT
          - NON_PERSISTENT
          - ALL
      - name: includeSystemTopic
        in: query
        description: Include system topic
        schema:
          type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
        403:
          description: Don't have admin or operate permission on the namespace
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
  /namespaces/{tenant}/{namespace}/unload:
    put:
      tags:
      - namespaces
      summary: Unload namespace
      description: Unload an active namespace from the current broker serving it.
        Performing this operation will let the brokerremoves all producers, consumers,
        and connections using this namespace, and close all topics (includingtheir
        persistent store). During that operation, the namespace is marked as tentatively
        unavailable until thebroker completes the unloading action. This operation
        requires strictly super user privileges, since it wouldresult in non-persistent
        message loss and unexpected connection closure to the clients.
      operationId: unloadNamespace
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        307:
          description: Current broker doesn't serve the namespace
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or namespace doesn't exist
          content: {}
        412:
          description: Namespace is already unloaded or Namespace has bundles activated
          content: {}
  /namespaces/{tenant}/{namespace}/unsubscribe/{subscription}:
    post:
      tags:
      - namespaces
      summary: Unsubscribes the given subscription on all topics on a namespace.
      operationId: unsubscribeNamespace
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: subscription
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin or operate permission on the namespacen
          content: {}
        404:
          description: Namespace does not exist
          content: {}
  /namespaces/{tenant}/{namespace}/{bundle}:
    delete:
      tags:
      - namespaces
      summary: Delete a namespace bundle and all the topics under it.
      operationId: deleteNamespaceBundle
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: bundle
        in: path
        required: true
        schema:
          type: string
      - name: force
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace doesn't exist
          content: {}
        409:
          description: Namespace bundle is not empty
          content: {}
  /namespaces/{tenant}/{namespace}/{bundle}/clearBacklog:
    post:
      tags:
      - namespaces
      summary: Clear backlog for all topics on a namespace bundle.
      operationId: clearNamespaceBundleBacklog
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: bundle
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace
          content: {}
        403:
          description: Don't have admin or operate permission on the namespace
          content: {}
        404:
          description: Namespace does not exist
          content: {}
  /namespaces/{tenant}/{namespace}/{bundle}/clearBacklog/{subscription}:
    post:
      tags:
      - namespaces
      summary: Clear backlog for a given subscription on all topics on a namespace
        bundle.
      operationId: clearNamespaceBundleBacklogForSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: subscription
        in: path
        required: true
        schema:
          type: string
      - name: bundle
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace
          content: {}
        403:
          description: Don't have admin or operate permission on the namespace
          content: {}
        404:
          description: Namespace does not exist
          content: {}
  /namespaces/{tenant}/{namespace}/{bundle}/split:
    put:
      tags:
      - namespaces
      summary: Split a namespace bundle
      operationId: splitNamespaceBundle
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: bundle
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      - name: unload
        in: query
        schema:
          type: boolean
          default: false
      - name: splitAlgorithmName
        in: query
        schema:
          type: string
      requestBody:
        description: splitBoundaries
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int64
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace
          content: {}
        403:
          description: Don't have admin permission
          content: {}
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/{bundle}/topicHashPositions:
    get:
      tags:
      - namespaces
      summary: Get hash positions for topics
      operationId: getTopicHashPositions
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: bundle
        in: path
        required: true
        schema:
          type: string
      - name: topics
        in: query
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
  /namespaces/{tenant}/{namespace}/{bundle}/unload:
    put:
      tags:
      - namespaces
      summary: Unload a namespace bundle
      operationId: unloadNamespaceBundle
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: bundle
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace
          content: {}
        403:
          description: Don't have admin permission
          content: {}
  /namespaces/{tenant}/{namespace}/{bundle}/unsubscribe/{subscription}:
    post:
      tags:
      - namespaces
      summary: Unsubscribes the given subscription on all topics on a namespace bundle.
      operationId: unsubscribeNamespaceBundle
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: subscription
        in: path
        required: true
        schema:
          type: string
      - name: bundle
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin or operate permission on the namespace
          content: {}
        404:
          description: Namespace does not exist
          content: {}
  /non-persistent/{tenant}/{namespace}:
    get:
      tags:
      - non-persistent topic
      summary: Get the list of non-persistent topics under a namespace.
      operationId: getNonPersistentTopicList
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: bundle
        in: query
        description: Specify the bundle name
        schema:
          type: string
      - name: includeSystemTopic
        in: query
        description: Include system topic
        schema:
          type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        401:
          description: Don't have permission to manage resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: The tenant/namespace does not exist
          content: {}
        412:
          description: Namespace name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/partitioned:
    get:
      tags:
      - non-persistent topic
      summary: Get the list of partitioned topics under a namespace.
      operationId: getNonPersistentPartitionedTopicList
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: includeSystemTopic
        in: query
        description: Include system topic
        schema:
          type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin or operate permission on the namespace
          content: {}
        404:
          description: tenant/namespace/topic doesn't exit
          content: {}
        412:
          description: Namespace name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
  /non-persistent/{tenant}/{namespace}/{bundle}:
    get:
      tags:
      - non-persistent topic
      summary: Get the list of non-persistent topics under a namespace bundle.
      operationId: getListFromBundle
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: bundle
        in: path
        description: Bundle range of a topic
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        401:
          description: Don't have permission to manage resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace doesn't exist
          content: {}
        412:
          description: Namespace name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}:
    put:
      tags:
      - non-persistent topic
      summary: Create a non-partitioned topic.
      description: This is the only REST endpoint from which non-partitioned topics
        could be created.
      operationId: createNonPersistentTopicNonPartitionedTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Key value pair properties for the topic metadata
        content:
          '*/*':
            schema:
              type: object
              additionalProperties:
                type: string
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        409:
          description: Partitioned topic already exist
          content: {}
        412:
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Delete a topic.
      description: The topic cannot be deleted if delete is not forcefully and there's
        any active subscription or producer connected to the it. Force delete ignores
        connected clients and deletes topic by explicitly closing them.
      operationId: deleteNonPersistentTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: force
        in: query
        description: Stop all producer/consumer/replicator and delete topic forcefully
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        412:
          description: Topic has active producers/subscriptions
          content: {}
        500:
          description: Internal server error
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/all_subscription/expireMessages/{expireTimeInSeconds}:
    post:
      tags:
      - non-persistent topic
      summary: Expiry messages on all subscriptions of topic.
      operationId: expireNonPersistentTopicMessagesForAllSubscriptions
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: expireTimeInSeconds
        in: path
        description: Expires beyond the specified number of seconds
        required: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic or subscription does not exist
          content: {}
        405:
          description: Expiry messages on a non-persistent topic is not allowed
          content: {}
        412:
          description: Can't find owner for topic
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/backlog:
    get:
      tags:
      - non-persistent topic
      summary: Get estimated backlog for offline topic.
      operationId: getNonPersistentTopicBacklog
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        404:
          description: Namespace does not exist
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/backlogQuota:
    post:
      tags:
      - non-persistent topic
      summary: Set a backlog quota for a topic.
      operationId: setNonPersistentTopicBacklogQuota
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: backlogQuotaType
        in: query
        schema:
          type: string
          enum:
          - destination_storage
          - message_age
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Specified backlog quota exceeds retention quota. Increase retention
            quota and retry request
          content: {}
    delete:
      tags:
      - non-persistent topic
      summary: Remove a backlog quota policy from a topic.
      operationId: removeNonPersistentTopicBacklogQuota
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: backlogQuotaType
        in: query
        schema:
          type: string
          enum:
          - destination_storage
          - message_age
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/backlogQuotaMap:
    get:
      tags:
      - non-persistent topic
      summary: Get backlog quota map on a topic.
      operationId: getNonPersistentTopicBacklogQuotaMap
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic policy does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/backlogSize:
    put:
      tags:
      - non-persistent topic
      summary: Calculate backlog size by a message ID (in bytes).
      operationId: getNonPersistentTopicBacklogSizeByMessageId
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/compaction:
    get:
      tags:
      - non-persistent topic
      summary: Get the status of a compaction operation for a topic.
      operationId: getNonPersistentTopicCompactionStatus
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist, or compaction hasn't run
          content: {}
        405:
          description: Operation is not allowed on the persistent topic
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
    put:
      tags:
      - non-persistent topic
      summary: Trigger a compaction operation on a topic.
      operationId: compactNonPersistentTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Operation is not allowed on the persistent topic
          content: {}
        409:
          description: Compaction already running
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/compactionThreshold:
    get:
      tags:
      - non-persistent topic
      summary: Get compaction threshold configuration for specified topic.
      operationId: getNonPersistentTopicCompactionThreshold
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set compaction threshold configuration for specified topic.
      operationId: setNonPersistentTopicCompactionThreshold
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: Dispatch rate for the specified topic
        content:
          '*/*':
            schema:
              type: integer
              format: int64
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove compaction threshold configuration for specified topic.
      operationId: removeNonPersistentTopicCompactionThreshold
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/createMissedPartitions:
    post:
      tags:
      - non-persistent topic
      summary: Create missed partitions of an existing partitioned topic.
      operationId: createNonPersistentTopicMissedPartitions
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant does not exist
          content: {}
        409:
          description: Partitioned topic does not exist
          content: {}
        412:
          description: Partitioned topic name is invalid
          content: {}
        500:
          description: Internal server error
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/deduplicationEnabled:
    get:
      tags:
      - non-persistent topic
      summary: Get deduplication configuration of a topic.
      operationId: getNonPersistentTopicDeduplication
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set deduplication enabled on a topic.
      operationId: setNonPersistentTopicDeduplication
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: DeduplicationEnabled policies for the specified topic
        content:
          '*/*':
            schema:
              type: boolean
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove deduplication configuration for specified topic.
      operationId: removeNonPersistentTopicDeduplication
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/deduplicationSnapshotInterval:
    get:
      tags:
      - non-persistent topic
      summary: Get deduplicationSnapshotInterval config on a topic.
      operationId: getNonPersistentTopicDeduplicationSnapshotInterval
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
        500:
          description: Internal server error
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set deduplicationSnapshotInterval config on a topic.
      operationId: setNonPersistentTopicDeduplicationSnapshotInterval
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Interval to take deduplication snapshot for the specified topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Delete deduplicationSnapshotInterval config on a topic.
      operationId: deleteNonPersistentTopicDeduplicationSnapshotInterval
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/delayedDelivery:
    get:
      tags:
      - non-persistent topic
      summary: Get delayed delivery messages config on a topic.
      operationId: getNonPersistentTopicDelayedDeliveryPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
        500:
          description: Internal server error
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set delayed delivery messages config on a topic.
      operationId: setNonPersistentTopicDelayedDeliveryPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Delayed delivery policies for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DelayedDeliveryPolicies'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Set delayed delivery messages config on a topic.
      operationId: deleteNonPersistentTopicDelayedDeliveryPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/dispatchRate:
    get:
      tags:
      - non-persistent topic
      summary: Get dispatch rate configuration for specified topic.
      operationId: getNonPersistentTopicDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set message dispatch rate configuration for specified topic.
      operationId: setNonPersistentTopicDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: Dispatch rate for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove message dispatch rate configuration for specified topic.
      operationId: removeNonPersistentTopicDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/entryFilters:
    get:
      tags:
      - non-persistent topic
      summary: Get entry filters for a topic.
      operationId: getNonPersistentTopicEntryFilters
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenants or Namespace doesn't exist
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set entry filters for specified topic
      operationId: setNonPersistentTopicEntryFilters
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Enable sub types for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EntryFilters'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove entry filters for specified topic.
      operationId: removeNonPersistentTopicEntryFilters
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected thiscall to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/examinemessage:
    get:
      tags:
      - non-persistent topic
      summary: Examine a specific message on a topic by position relative to the earliest
        or the latest message.
      operationId: examineNonPersistentTopicMessage
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: initialPosition
        in: query
        description: Relative start position to examine message.It can be 'latest'
          or 'earliest'
        schema:
          type: string
          default: latest
          enum:
          - latest
          - earliest
      - name: messagePosition
        in: query
        description: The position of messages (default 1)
        schema:
          type: integer
          format: int64
          default: 1
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic, the message position does not exist
          content: {}
        405:
          description: If given partitioned topic
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/inactiveTopicPolicies:
    get:
      tags:
      - non-persistent topic
      summary: Get inactive topic policies on a topic.
      operationId: getNonPersistentTopicInactiveTopicPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
        500:
          description: Internal server error
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set inactive topic policies on a topic.
      operationId: setNonPersistentTopicInactiveTopicPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: inactive topic policies for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/InactiveTopicPolicies'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Delete inactive topic policies on a topic.
      operationId: deleteNonPersistentTopicInactiveTopicPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/internal-info:
    get:
      tags:
      - non-persistent topic
      summary: Get the stored topic metadata.
      operationId: getNonPersistentTopicManagedLedgerInfo
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      responses:
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/internalStats:
    get:
      tags:
      - non-persistent topic
      summary: Get the internal stats for the topic.
      operationId: getNonPersistentTopicInternalStats
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: metadata
        in: query
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to manage resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: The tenant/namespace/topic does not exist
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/lastMessageId:
    get:
      tags:
      - non-persistent topic
      summary: Return the last commit message id of topic
      operationId: getNonPersistentTopicLastMessageId
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Operation is not allowed on the persistent topic
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/ledger/{ledgerId}/entry/{entryId}:
    get:
      tags:
      - non-persistent topic
      summary: Get message by its messageId.
      operationId: getNonPersistentTopicMessageById
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: ledgerId
        in: path
        description: The ledger id
        required: true
        schema:
          type: integer
          format: int64
      - name: entryId
        in: path
        description: The entry id
        required: true
        schema:
          type: integer
          format: int64
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic, subscription or the message position does not exist
          content: {}
        405:
          description: Skipping messages on a non-persistent topic is not allowed
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/maxConsumers:
    get:
      tags:
      - non-persistent topic
      summary: Get maxConsumers config for specified topic.
      operationId: getNonPersistentTopicMaxConsumers
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set maxConsumers config for specified topic.
      operationId: setNonPersistentTopicMaxConsumers
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: The max consumers of the topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Invalid value of maxConsumers
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove maxConsumers config for specified topic.
      operationId: removeNonPersistentTopicMaxConsumers
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/maxConsumersPerSubscription:
    get:
      tags:
      - non-persistent topic
      summary: Get max consumers per subscription configuration for specified topic.
      operationId: getNonPersistentTopicMaxConsumersPerSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set max consumers per subscription configuration for specified topic.
      operationId: setNonPersistentTopicMaxConsumersPerSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Dispatch rate for the specified topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove max consumers per subscription configuration for specified topic.
      operationId: removeNonPersistentTopicMaxConsumersPerSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/maxMessageSize:
    get:
      tags:
      - non-persistent topic
      summary: Get maxMessageSize config for specified topic.
      operationId: getNonPersistentTopicMaxMessageSize
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set maxMessageSize config for specified topic.
      operationId: setNonPersistentTopicMaxMessageSize
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: The max message size of the topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Invalid value of maxConsumers
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove maxMessageSize config for specified topic.
      operationId: removeNonPersistentTopicMaxMessageSize
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/maxProducers:
    get:
      tags:
      - non-persistent topic
      summary: Get maxProducers config for specified topic.
      operationId: getNonPersistentTopicMaxProducers
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set maxProducers config for specified topic.
      operationId: setNonPersistentTopicMaxProducers
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: The max producers of the topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Invalid value of maxProducers
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove maxProducers config for specified topic.
      operationId: removeNonPersistentTopicMaxProducers
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/maxSubscriptionsPerTopic:
    get:
      tags:
      - non-persistent topic
      summary: Get maxSubscriptionsPerTopic config for specified topic.
      operationId: getNonPersistentTopicMaxSubscriptionsPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set maxSubscriptionsPerTopic config for specified topic.
      operationId: setNonPersistentTopicMaxSubscriptionsPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: The max subscriptions of the topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Invalid value of maxSubscriptionsPerTopic
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove maxSubscriptionsPerTopic config for specified topic.
      operationId: removeNonPersistentTopicMaxSubscriptionsPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer:
    get:
      tags:
      - non-persistent topic
      summary: Get max unacked messages per consumer config on a topic.
      operationId: getNonPersistentTopicMaxUnackedMessagesOnConsumer
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
        500:
          description: Internal server error
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set max unacked messages per consumer config on a topic.
      operationId: setNonPersistentTopicMaxUnackedMessagesOnConsumer
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Max unacked messages on consumer policies for the specified topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Delete max unacked messages per consumer config on a topic.
      operationId: deleteNonPersistentTopicMaxUnackedMessagesOnConsumer
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnSubscription:
    get:
      tags:
      - non-persistent topic
      summary: Get max unacked messages per subscription config on a topic.
      operationId: getNonPersistentTopicMaxUnackedMessagesOnSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
        500:
          description: Internal server error
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set max unacked messages per subscription config on a topic.
      operationId: setNonPersistentTopicMaxUnackedMessagesOnSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Max unacked messages on subscription policies for the specified
          topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Delete max unacked messages per subscription config on a topic.
      operationId: deleteNonPersistentTopicMaxUnackedMessagesOnSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/messageTTL:
    get:
      tags:
      - non-persistent topic
      summary: Get message TTL in seconds for a topic
      operationId: getNonPersistentTopicMessageTTL
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, enable the topic level policy
            and retry
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set message TTL in seconds for a topic
      operationId: setNonPersistentTopicMessageTTL
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: messageTTL
        in: query
        description: TTL in seconds for the specified namespace
        required: true
        schema:
          type: integer
          format: int32
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Not authenticate to perform the request or policy is read only
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, enable the topic level policy
            and retry
          content: {}
        412:
          description: Invalid message TTL value
          content: {}
    delete:
      tags:
      - non-persistent topic
      summary: Remove message TTL in seconds for a topic
      operationId: removeNonPersistentTopicMessageTTL
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Not authenticate to perform the request or policy is read only
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, enable the topic level policy
            and retry
          content: {}
        412:
          description: Invalid message TTL value
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/messageid/{timestamp}:
    get:
      tags:
      - non-persistent topic
      summary: Get message ID published at or just after this absolute timestamp (in
        ms).
      operationId: getNonPersistentTopicMessageIdByTimestamp
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: timestamp
        in: path
        description: Specify the timestamp
        required: true
        schema:
          type: integer
          format: int64
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic is not non-partitioned and persistent
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/offload:
    get:
      tags:
      - non-persistent topic
      summary: Offload a prefix of a topic to long term storage
      operationId: offloadNonPersistentTopicStatus
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Operation is not allowed on the persistent topic
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
    put:
      tags:
      - non-persistent topic
      summary: Offload a prefix of a topic to long term storage
      operationId: triggerNonPersistentTopicOffload
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        400:
          description: Message ID is null
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Operation is not allowed on the persistent topic
          content: {}
        409:
          description: Offload already running
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/offloadPolicies:
    get:
      tags:
      - non-persistent topic
      summary: Get offload policies on a topic.
      operationId: getNonPersistentTopicOffloadPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
        500:
          description: Internal server error
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set offload policies on a topic.
      operationId: setNonPersistentTopicOffloadPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: Offload policies for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OffloadPoliciesImpl'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Delete offload policies on a topic.
      operationId: removeNonPersistentTopicOffloadPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/partitioned-stats:
    get:
      tags:
      - non-persistent topic
      summary: Get the stats for the partitioned topic.
      operationId: getNonPersistentTopicPartitionedStats
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: perPartition
        in: query
        description: Get per partition stats
        schema:
          type: boolean
          default: true
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: getPreciseBacklog
        in: query
        description: If return precise backlog or imprecise backlog
        schema:
          type: boolean
          default: false
      - name: subscriptionBacklogSize
        in: query
        description: If return backlog size for each subscription, require locking
          on ledger so be careful not to use when there's heavy traffic.
        schema:
          type: boolean
          default: false
      - name: getEarliestTimeInBacklog
        in: query
        description: If return the earliest time in backlog
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        412:
          description: Partitioned topic name is invalid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/partitions:
    get:
      tags:
      - non-persistent topic
      summary: Get partitioned topic metadata.
      operationId: getNonPersistentTopicPartitionedMetadata
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: checkAllowAutoCreation
        in: query
        description: Is check configuration required to automatically create topic
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to manage resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: The tenant/namespace/topic does not exist
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate cluster configuration
          content: {}
    put:
      tags:
      - non-persistent topic
      summary: Create a partitioned topic.
      description: It needs to be called before creating a producer on a partitioned
        topic.
      operationId: createNonPersistentTopicPartitionedTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: createLocalTopicOnly
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: The metadata for the topic
        content:
          application/vnd.partitioned-topic-metadata+json:
            schema:
              $ref: '#/components/schemas/PartitionedTopicMetadata'
        required: true
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant does not exist
          content: {}
        406:
          description: The number of partitions should be more than 0 and less than
            or equal to maxNumPartitionsPerPartitionedTopic
          content: {}
        409:
          description: Partitioned topic already exist
          content: {}
        412:
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: body
    post:
      tags:
      - non-persistent topic
      summary: Increment partitions of an existing partitioned topic.
      description: It only increments partitions of existing non-global partitioned-topic
      operationId: updateNonPersistentTopicPartitionedTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: updateLocalTopicOnly
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: force
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: The number of partitions for the topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
              default: 0
        required: true
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant does not exist
          content: {}
        406:
          description: The number of partitions should be more than 0 and less than
            or equal to maxNumPartitionsPerPartitionedTopic
          content: {}
        409:
          description: Partitioned topic does not exist
          content: {}
        412:
          description: Partitioned topic name is invalid
          content: {}
        500:
          description: Internal server error
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Delete a partitioned topic.
      description: It will also delete all the partitions of the topic if it exists.
      operationId: deleteNonPersistentTopicPartitionedTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: force
        in: query
        description: Stop all producer/consumer/replicator and delete topic forcefully
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Partitioned topic does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Partitioned topic name is invalid
          content: {}
        500:
          description: Internal server error
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/permissions:
    get:
      tags:
      - non-persistent topic
      summary: Get permissions on a topic.
      description: Retrieve the effective permissions for a topic. These permissions
        are defined by the permissions set at thenamespace level combined (union)
        with any eventual specific permission set on the topic.
      operationId: getNonPersistentTopicPermissionsOnTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      responses:
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: tenant/namespace/topic doesn't exit
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/permissions/{role}:
    post:
      tags:
      - non-persistent topic
      summary: Grant a new permission to a role on a single topic.
      operationId: grantNonPersistentTopicPermissionsOnTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: role
        in: path
        description: Client role to which grant permissions
        required: true
        schema:
          type: string
      requestBody:
        description: Actions to be granted (produce,functions,consume)
        content:
          '*/*':
            schema:
              type: array
              items:
                type: string
                enum:
                - produce
                - consume
                - functions
                - sources
                - sinks
                - packages
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: tenant/namespace/topic doesn't exit
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Revoke permissions on a topic.
      description: Revoke permissions to a role on a single topic. If the permission
        was not set at the topiclevel, but rather at the namespace level, this operation
        will return an error (HTTP status code 412).
      operationId: revokeNonPersistentTopicNonPersistentTopicPermissionsOnTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: role
        in: path
        description: Client role to which grant permissions
        required: true
        schema:
          type: string
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: tenant/namespace/topic doesn't exit
          content: {}
        412:
          description: Permissions are not set at the topic level
          content: {}
        500:
          description: Internal server error
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/persistence:
    get:
      tags:
      - non-persistent topic
      summary: Get configuration of persistence policies for specified topic.
      operationId: getNonPersistentTopicPersistence
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set configuration of persistence policies for specified topic.
      operationId: setNonPersistentTopicPersistence
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: Bookkeeper persistence policies for specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PersistencePolicies'
        required: false
      responses:
        400:
          description: Invalid persistence policies
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove configuration of persistence policies for specified topic.
      operationId: removeNonPersistentTopicPersistence
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/properties:
    get:
      tags:
      - non-persistent topic
      summary: Get topic properties.
      operationId: getNonPersistentTopicProperties
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Topic name is invalid
          content: {}
        500:
          description: Internal server error
          content: {}
    put:
      tags:
      - non-persistent topic
      summary: Update the properties on the given topic.
      operationId: updateNonPersistentTopicProperties
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Key value pair properties for the topic metadata
        content:
          '*/*':
            schema:
              type: object
              additionalProperties:
                type: string
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic/Subscription does not exist
          content: {}
        405:
          description: Method Not Allowed
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove the key in properties on the given topic.
      operationId: removeNonPersistentTopicProperties
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: key
        in: query
        schema:
          type: string
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Partitioned topic does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Partitioned topic name is invalid
          content: {}
        500:
          description: Internal server error
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/publishRate:
    get:
      tags:
      - non-persistent topic
      summary: Get publish rate configuration for specified topic.
      operationId: getNonPersistentTopicPublishRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set message publish rate configuration for specified topic.
      operationId: setNonPersistentTopicPublishRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Dispatch rate for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PublishRate'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove message publish rate configuration for specified topic.
      operationId: removeNonPersistentTopicPublishRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/replication:
    get:
      tags:
      - non-persistent topic
      summary: Get the replication clusters for a topic
      operationId: getNonPersistentTopicReplicationClusters
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, enable the topic level policy
            and retry
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set the replication clusters for a topic.
      operationId: setNonPersistentTopicReplicationClusters
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: List of replication clusters
        content:
          '*/*':
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Topic is not global or invalid cluster ids
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove the replication clusters from a topic.
      operationId: removeNonPersistentTopicReplicationClusters
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: backlogQuotaType
        in: query
        schema:
          type: string
          enum:
          - destination_storage
          - message_age
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/replicatorDispatchRate:
    get:
      tags:
      - non-persistent topic
      summary: Get replicatorDispatchRate config for specified topic.
      operationId: getNonPersistentTopicReplicatorDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set replicatorDispatchRate config for specified topic.
      operationId: setNonPersistentTopicReplicatorDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Replicator dispatch rate of the topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Invalid value of replicatorDispatchRate
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove replicatorDispatchRate config for specified topic.
      operationId: removeNonPersistentTopicReplicatorDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/retention:
    get:
      tags:
      - non-persistent topic
      summary: Get retention configuration for specified topic.
      operationId: getNonPersistentTopicRetention
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set retention configuration for specified topic.
      operationId: setNonPersistentTopicRetention
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: Retention policies for the specified namespace
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RetentionPolicies'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Retention Quota must exceed backlog quota
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove retention configuration for specified topic.
      operationId: removeNonPersistentTopicRetention
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Retention Quota must exceed backlog quota
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/schemaCompatibilityStrategy:
    get:
      tags:
      - non-persistent topic
      summary: Get schema compatibility strategy on a topic
      operationId: getNonPersistentTopicSchemaCompatibilityStrategy
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the cluster
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Operation not allowed on persistent topic
          content: {}
    put:
      tags:
      - non-persistent topic
      summary: Set schema compatibility strategy on a topic
      operationId: setNonPersistentTopicSchemaCompatibilityStrategy
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Strategy used to check the compatibility of new schema
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Operation not allowed on persistent topic
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove schema compatibility strategy on a topic
      operationId: removeNonPersistentTopicSchemaCompatibilityStrategy
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Strategy used to check the compatibility of new schema
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Operation not allowed on persistent topic
          content: {}
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/schemaValidationEnforced:
    get:
      tags:
      - non-persistent topic
      summary: Get schema validation enforced flag for topic.
      operationId: getNonPersistentTopicSchemaValidationEnforced
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenants or Namespace doesn't exist
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set schema validation enforced flag on topic.
      operationId: setNonPersistentTopicSchemaValidationEnforced
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              type: boolean
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or Namespace doesn't exist
          content: {}
        412:
          description: schemaValidationEnforced value is not valid
          content: {}
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/shadowTopics:
    get:
      tags:
      - non-persistent topic
      summary: Get the shadow topic list for a topic
      operationId: getNonPersistentTopicShadowTopics
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, enable the topic level policy
            and retry
          content: {}
    put:
      tags:
      - non-persistent topic
      summary: Set shadow topic list for a topic
      operationId: setNonPersistentTopicShadowTopics
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: List of shadow topics
        content:
          '*/*':
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Delete shadow topics for a topic
      operationId: deleteNonPersistentTopicShadowTopics
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/stats:
    get:
      tags:
      - non-persistent topic
      summary: Get the stats for the topic.
      operationId: getNonPersistentTopicStats
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: getPreciseBacklog
        in: query
        description: If return precise backlog or imprecise backlog
        schema:
          type: boolean
          default: false
      - name: subscriptionBacklogSize
        in: query
        description: If return backlog size for each subscription, require locking
          on ledger so be careful not to use when there's heavy traffic.
        schema:
          type: boolean
          default: false
      - name: getEarliestTimeInBacklog
        in: query
        description: If return time of the earliest message in backlog
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/subscribeRate:
    get:
      tags:
      - non-persistent topic
      summary: Get subscribe rate configuration for specified topic.
      operationId: getNonPersistentTopicSubscribeRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set subscribe rate configuration for specified topic.
      operationId: setNonPersistentTopicSubscribeRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Subscribe rate for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SubscribeRate'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove subscribe rate configuration for specified topic.
      operationId: removeNonPersistentTopicSubscribeRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Subscribe rate for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SubscribeRate'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}:
    delete:
      tags:
      - non-persistent topic
      summary: Delete a subscription.
      description: The subscription cannot be deleted if delete is not forcefully
        and there are any active consumers attached to it. Force delete ignores connected
        consumers and deletes subscription by explicitly closing them.
      operationId: deleteNonPersistentTopicSubscription
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to be deleted
        required: true
        schema:
          type: string
      - name: force
        in: query
        description: Disconnect and close all consumers and delete subscription forcefully
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        412:
          description: Subscription has active consumers
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/analyzeBacklog:
    post:
      tags:
      - non-persistent topic
      summary: Analyse a subscription, by scanning all the unprocessed messages
      operationId: analyzeNonPersistentTopicSubscriptionBacklog
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: messageId to start the analysis
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResetCursorData'
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic/Subscription does not exist
          content: {}
        405:
          description: Method Not Allowed
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: position
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/expireMessages:
    post:
      tags:
      - non-persistent topic
      summary: Expiry messages on a topic subscription.
      operationId: expireNonPersistentTopicMessages
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to be Expiry messages on
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: messageId to reset back to (ledgerId:entryId)
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResetCursorData'
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic or subscription does not exist
          content: {}
        405:
          description: Expiry messages on a non-persistent topic is not allowed
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: messageId
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/expireMessages/{expireTimeInSeconds}:
    post:
      tags:
      - non-persistent topic
      summary: Expiry messages on a topic subscription.
      operationId: expireNonPersistentTopicMessagesTimeInSeconds
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to be Expiry messages on
        required: true
        schema:
          type: string
      - name: expireTimeInSeconds
        in: path
        description: Expires beyond the specified number of seconds
        required: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic or subscription does not exist
          content: {}
        405:
          description: Expiry messages on a non-persistent topic is not allowed
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/position/{messagePosition}:
    get:
      tags:
      - non-persistent topic
      summary: Peek nth message on a topic subscription.
      operationId: peekNonPersistentTopicNthMessage
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Subscribed message expired
        required: true
        schema:
          type: string
      - name: messagePosition
        in: path
        description: The number of messages (default 1)
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic, subscription or the message position does not exist
          content: {}
        405:
          description: Skipping messages on a non-persistent topic is not allowed
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/properties:
    get:
      tags:
      - non-persistent topic
      summary: Return all the properties on the given subscription
      operationId: getNonPersistentTopicSubscriptionProperties
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic/Subscription does not exist
          content: {}
        405:
          description: Method Not Allowed
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
    put:
      tags:
      - non-persistent topic
      summary: Replace all the properties on the given subscription
      operationId: updateNonPersistentTopicSubscriptionProperties
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to update
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: The new properties
        content:
          '*/*':
            schema:
              type: object
              additionalProperties:
                type: string
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic/Subscription does not exist
          content: {}
        405:
          description: Method Not Allowed
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/replicatedSubscriptionStatus:
    get:
      tags:
      - non-persistent topic
      summary: Get replicated subscription status on a topic.
      operationId: getNonPersistentTopicReplicatedSubscriptionStatus
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Name of subscription
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        401:
          description: Don't have permission to administrate resources
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        412:
          description: Can't find owner for topic
          content: {}
        500:
          description: Internal server error
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Enable or disable a replicated subscription on a topic.
      operationId: setNonPersistentTopicReplicatedSubscriptionStatus
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Name of subscription
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Whether to enable replicated subscription
        content:
          '*/*':
            schema:
              type: boolean
        required: true
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            or subscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic or subscription does not exist
          content: {}
        405:
          description: Operation not allowed on this topic
          content: {}
        412:
          description: Can't find owner for topic
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor:
    post:
      tags:
      - non-persistent topic
      summary: Reset subscription to message position closest to given position.
      description: It fence cursor and disconnects all active consumers before resetting
        cursor.
      operationId: resetNonPersistentTopicCursorOnPosition
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to reset position on
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: messageId to reset back to (ledgerId:entryId)
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResetCursorData'
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic/Subscription does not exist
          content: {}
        405:
          description: Not supported for partitioned topics
          content: {}
        412:
          description: Unable to find position for position specified
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: messageId
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor/{timestamp}:
    post:
      tags:
      - non-persistent topic
      summary: Reset subscription to message position closest to absolute timestamp
        (in ms).
      description: It fence cursor and disconnects all active consumers before resetting
        cursor.
      operationId: resetNonPersistentTopicCursor
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to reset position on
        required: true
        schema:
          type: string
      - name: timestamp
        in: path
        description: the timestamp to reset back
        required: true
        schema:
          type: integer
          format: int64
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic/Subscription does not exist
          content: {}
        405:
          description: Method Not Allowed
          content: {}
        412:
          description: Failed to reset cursor on subscription or Unable to find position
            for timestamp specified
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip/{numMessages}:
    post:
      tags:
      - non-persistent topic
      summary: Skipping messages on a topic subscription.
      operationId: skipNonPersistentTopicMessages
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Name of subscription
        required: true
        schema:
          type: string
      - name: numMessages
        in: path
        description: The number of messages to skip
        required: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic or subscription does not exist
          content: {}
        405:
          description: Skipping messages on a partitioned topic is not allowed
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip_all:
    post:
      tags:
      - non-persistent topic
      summary: Skip all messages on a topic subscription.
      description: Completely clears the backlog on the subscription.
      operationId: skipNonPersistentTopicAllMessages
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Name of subscription
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic or subscription does not exist
          content: {}
        405:
          description: Operation not allowed on non-persistent topic
          content: {}
        412:
          description: Can't find owner for topic
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subscriptionName}:
    put:
      tags:
      - non-persistent topic
      summary: Create a subscription on the topic.
      description: Creates a subscription on the topic at the specified message id
      operationId: createNonPersistentTopicSubscription
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subscriptionName
        in: path
        description: Subscription to create position on
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: replicated
        in: query
        description: Is replicated required to perform this operation
        schema:
          type: boolean
      requestBody:
        description: messageId where to create the subscription. It can be 'latest',
          'earliest' or (ledgerId:entryId)
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResetCursorData'
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        400:
          description: Create subscription on non persistent topic is not supported
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic/Subscription does not exist
          content: {}
        405:
          description: Not supported for partitioned topics
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: messageId
  /non-persistent/{tenant}/{namespace}/{topic}/subscriptionDispatchRate:
    get:
      tags:
      - non-persistent topic
      summary: Get subscription message dispatch rate configuration for specified
        topic.
      operationId: getNonPersistentTopicSubscriptionDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set subscription message dispatch rate configuration for specified
        topic.
      operationId: setNonPersistentTopicSubscriptionDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: Subscription message dispatch rate for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove subscription message dispatch rate configuration for specified
        topic.
      operationId: removeNonPersistentTopicSubscriptionDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/subscriptionTypesEnabled:
    get:
      tags:
      - non-persistent topic
      summary: Get is enable sub type fors specified topic.
      operationId: getNonPersistentTopicSubscriptionTypesEnabled
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set is enable sub types for specified topic
      operationId: setNonPersistentTopicSubscriptionTypesEnabled
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Enable sub types for the specified topic
        content:
          '*/*':
            schema:
              type: array
              items:
                type: string
                enum:
                - Exclusive
                - Shared
                - Failover
                - Key_Shared
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove subscription types enabled for specified topic.
      operationId: removeNonPersistentTopicSubscriptionTypesEnabled
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/subscriptions:
    get:
      tags:
      - non-persistent topic
      summary: Get the list of persistent subscriptions for a given topic.
      operationId: getNonPersistentTopicSubscriptions
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/terminate:
    post:
      tags:
      - non-persistent topic
      summary: Terminate a topic. A topic that is terminated will not accept any more
        messages to be published and will let consumer to drain existing messages
        in backlog
      operationId: terminateNonPersistentTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Termination of a partitioned topic is not allowed
          content: {}
        406:
          description: Need to provide a persistent topic name
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/terminate/partitions:
    post:
      tags:
      - non-persistent topic
      summary: Terminate all partitioned topic. A topic that is terminated will not
        accept any more messages to be published and will let consumer to drain existing
        messages in backlog
      operationId: terminateNonPersistentTopicPartitionedTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Termination of a non-partitioned topic is not allowed
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/truncate:
    delete:
      tags:
      - non-persistent topic
      summary: Truncate a topic.
      description: NonPersistentTopic does not support truncate.
      operationId: truncateNonPersistentTopicTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        412:
          description: NonPersistentTopic does not support truncate.
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/unload:
    put:
      tags:
      - non-persistent topic
      summary: Unload a topic
      operationId: unloadNonPersistentTopicTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: This operation requires super-user access
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: The tenant/namespace/topic does not exist
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /non-persistent/{tenant}/{namespace}/{topic}/{subName}/dispatchRate:
    get:
      tags:
      - non-persistent topic
      summary: Get message dispatch rate configuration for specified subscription.
      operationId: getNonPersistentTopicSubscriptionLevelDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: subName
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - non-persistent topic
      summary: Set message dispatch rate configuration for specified subscription.
      operationId: setNonPersistentTopicSubscriptionLevelDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: subName
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: Subscription message dispatch rate for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - non-persistent topic
      summary: Remove message dispatch rate configuration for specified subscription.
      operationId: removeNonPersistentTopicSubscriptionLevelDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: subName
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /persistent/{tenant}/{namespace}:
    get:
      tags:
      - persistent topic
      summary: Get the list of topics under a namespace.
      operationId: getPersistentTopicList
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: bundle
        in: query
        description: Specify the bundle name
        schema:
          type: string
      - name: includeSystemTopic
        in: query
        description: Include system topic
        schema:
          type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin or operate permission on the namespace
          content: {}
        404:
          description: tenant/namespace/topic doesn't exit
          content: {}
        412:
          description: Namespace name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
  /persistent/{tenant}/{namespace}/partitioned:
    get:
      tags:
      - persistent topic
      summary: Get the list of partitioned topics under a namespace.
      operationId: getPersistentPartitionedTopicList
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: includeSystemTopic
        in: query
        description: Include system topic
        schema:
          type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin or operate permission on the namespace
          content: {}
        404:
          description: tenant/namespace/topic doesn't exit
          content: {}
        412:
          description: Namespace name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
  /persistent/{tenant}/{namespace}/{topic}:
    put:
      tags:
      - persistent topic
      summary: Create a non-partitioned topic.
      description: This is the only REST endpoint from which non-partitioned topics
        could be created.
      operationId: createPersistentTopicNonPartitionedTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Key value pair properties for the topic metadata
        content:
          '*/*':
            schema:
              type: object
              additionalProperties:
                type: string
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        409:
          description: Partitioned topic already exist
          content: {}
        412:
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Delete a topic.
      description: The topic cannot be deleted if delete is not forcefully and there's
        any active subscription or producer connected to the it. Force delete ignores
        connected clients and deletes topic by explicitly closing them.
      operationId: deletePersistentTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: force
        in: query
        description: Stop all producer/consumer/replicator and delete topic forcefully
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        412:
          description: Topic has active producers/subscriptions
          content: {}
        500:
          description: Internal server error
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/all_subscription/expireMessages/{expireTimeInSeconds}:
    post:
      tags:
      - persistent topic
      summary: Expiry messages on all subscriptions of topic.
      operationId: expirePersistentTopicMessagesForAllSubscriptions
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: expireTimeInSeconds
        in: path
        description: Expires beyond the specified number of seconds
        required: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic or subscription does not exist
          content: {}
        405:
          description: Expiry messages on a non-persistent topic is not allowed
          content: {}
        412:
          description: Can't find owner for topic
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/backlog:
    get:
      tags:
      - persistent topic
      summary: Get estimated backlog for offline topic.
      operationId: getPersistentTopicBacklog
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        404:
          description: Namespace does not exist
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/backlogQuota:
    post:
      tags:
      - persistent topic
      summary: Set a backlog quota for a topic.
      operationId: setPersistentTopicBacklogQuota
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: backlogQuotaType
        in: query
        schema:
          type: string
          enum:
          - destination_storage
          - message_age
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Specified backlog quota exceeds retention quota. Increase retention
            quota and retry request
          content: {}
    delete:
      tags:
      - persistent topic
      summary: Remove a backlog quota policy from a topic.
      operationId: removePersistentTopicBacklogQuota
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: backlogQuotaType
        in: query
        schema:
          type: string
          enum:
          - destination_storage
          - message_age
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/backlogQuotaMap:
    get:
      tags:
      - persistent topic
      summary: Get backlog quota map on a topic.
      operationId: getPersistentTopicBacklogQuotaMap
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic policy does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/backlogSize:
    put:
      tags:
      - persistent topic
      summary: Calculate backlog size by a message ID (in bytes).
      operationId: getPersistentTopicBacklogSizeByMessageId
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/compaction:
    get:
      tags:
      - persistent topic
      summary: Get the status of a compaction operation for a topic.
      operationId: getPersistentTopicCompactionStatus
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist, or compaction hasn't run
          content: {}
        405:
          description: Operation is not allowed on the persistent topic
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
    put:
      tags:
      - persistent topic
      summary: Trigger a compaction operation on a topic.
      operationId: compactPersistentTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Operation is not allowed on the persistent topic
          content: {}
        409:
          description: Compaction already running
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/compactionThreshold:
    get:
      tags:
      - persistent topic
      summary: Get compaction threshold configuration for specified topic.
      operationId: getPersistentTopicCompactionThreshold
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set compaction threshold configuration for specified topic.
      operationId: setPersistentTopicCompactionThreshold
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: Dispatch rate for the specified topic
        content:
          '*/*':
            schema:
              type: integer
              format: int64
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove compaction threshold configuration for specified topic.
      operationId: removePersistentTopicCompactionThreshold
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/createMissedPartitions:
    post:
      tags:
      - persistent topic
      summary: Create missed partitions of an existing partitioned topic.
      operationId: createPersistentTopicMissedPartitions
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant does not exist
          content: {}
        409:
          description: Partitioned topic does not exist
          content: {}
        412:
          description: Partitioned topic name is invalid
          content: {}
        500:
          description: Internal server error
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/deduplicationEnabled:
    get:
      tags:
      - persistent topic
      summary: Get deduplication configuration of a topic.
      operationId: getPersistentTopicDeduplication
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set deduplication enabled on a topic.
      operationId: setPersistentTopicDeduplication
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: DeduplicationEnabled policies for the specified topic
        content:
          '*/*':
            schema:
              type: boolean
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove deduplication configuration for specified topic.
      operationId: removePersistentTopicDeduplication
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/deduplicationSnapshotInterval:
    get:
      tags:
      - persistent topic
      summary: Get deduplicationSnapshotInterval config on a topic.
      operationId: getPersistentTopicDeduplicationSnapshotInterval
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
        500:
          description: Internal server error
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set deduplicationSnapshotInterval config on a topic.
      operationId: setPersistentTopicDeduplicationSnapshotInterval
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Interval to take deduplication snapshot for the specified topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Delete deduplicationSnapshotInterval config on a topic.
      operationId: deletePersistentTopicDeduplicationSnapshotInterval
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/delayedDelivery:
    get:
      tags:
      - persistent topic
      summary: Get delayed delivery messages config on a topic.
      operationId: getPersistentTopicDelayedDeliveryPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
        500:
          description: Internal server error
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set delayed delivery messages config on a topic.
      operationId: setPersistentTopicDelayedDeliveryPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Delayed delivery policies for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DelayedDeliveryPolicies'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Set delayed delivery messages config on a topic.
      operationId: deletePersistentTopicDelayedDeliveryPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/dispatchRate:
    get:
      tags:
      - persistent topic
      summary: Get dispatch rate configuration for specified topic.
      operationId: getPersistentTopicDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set message dispatch rate configuration for specified topic.
      operationId: setPersistentTopicDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: Dispatch rate for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove message dispatch rate configuration for specified topic.
      operationId: removePersistentTopicDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/entryFilters:
    get:
      tags:
      - persistent topic
      summary: Get entry filters for a topic.
      operationId: getPersistentTopicEntryFilters
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenants or Namespace doesn't exist
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set entry filters for specified topic
      operationId: setPersistentTopicEntryFilters
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected thiscall to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Entry filters for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EntryFilters'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove entry filters for specified topic.
      operationId: removePersistentTopicEntryFilters
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected thiscall to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/examinemessage:
    get:
      tags:
      - persistent topic
      summary: Examine a specific message on a topic by position relative to the earliest
        or the latest message.
      operationId: examinePersistentTopicMessage
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: initialPosition
        in: query
        description: Relative start position to examine message.It can be 'latest'
          or 'earliest'
        schema:
          type: string
          default: latest
          enum:
          - latest
          - earliest
      - name: messagePosition
        in: query
        description: The position of messages (default 1)
        schema:
          type: integer
          format: int64
          default: 1
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic, the message position does not exist
          content: {}
        405:
          description: If given partitioned topic
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/inactiveTopicPolicies:
    get:
      tags:
      - persistent topic
      summary: Get inactive topic policies on a topic.
      operationId: getPersistentTopicInactiveTopicPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
        500:
          description: Internal server error
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set inactive topic policies on a topic.
      operationId: setPersistentTopicInactiveTopicPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: inactive topic policies for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/InactiveTopicPolicies'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Delete inactive topic policies on a topic.
      operationId: deletePersistentTopicInactiveTopicPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/internal-info:
    get:
      tags:
      - persistent topic
      summary: Get the stored topic metadata.
      operationId: getPersistentTopicManagedLedgerInfo
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      responses:
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/internalStats:
    get:
      tags:
      - persistent topic
      summary: Get the internal stats for the topic.
      operationId: getPersistentTopicInternalStats
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: metadata
        in: query
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/lastMessageId:
    get:
      tags:
      - persistent topic
      summary: Return the last commit message id of topic
      operationId: getPersistentTopicLastMessageId
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Operation is not allowed on the persistent topic
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/ledger/{ledgerId}/entry/{entryId}:
    get:
      tags:
      - persistent topic
      summary: Get message by its messageId.
      operationId: getPersistentTopicMessageById
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: ledgerId
        in: path
        description: The ledger id
        required: true
        schema:
          type: integer
          format: int64
      - name: entryId
        in: path
        description: The entry id
        required: true
        schema:
          type: integer
          format: int64
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic, subscription or the message position does not exist
          content: {}
        405:
          description: Skipping messages on a non-persistent topic is not allowed
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/maxConsumers:
    get:
      tags:
      - persistent topic
      summary: Get maxConsumers config for specified topic.
      operationId: getPersistentTopicMaxConsumers
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set maxConsumers config for specified topic.
      operationId: setPersistentTopicMaxConsumers
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: The max consumers of the topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Invalid value of maxConsumers
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove maxConsumers config for specified topic.
      operationId: removePersistentTopicMaxConsumers
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/maxConsumersPerSubscription:
    get:
      tags:
      - persistent topic
      summary: Get max consumers per subscription configuration for specified topic.
      operationId: getPersistentTopicMaxConsumersPerSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set max consumers per subscription configuration for specified topic.
      operationId: setPersistentTopicMaxConsumersPerSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Dispatch rate for the specified topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove max consumers per subscription configuration for specified topic.
      operationId: removePersistentTopicMaxConsumersPerSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/maxMessageSize:
    get:
      tags:
      - persistent topic
      summary: Get maxMessageSize config for specified topic.
      operationId: getPersistentTopicMaxMessageSize
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set maxMessageSize config for specified topic.
      operationId: setPersistentTopicMaxMessageSize
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: The max message size of the topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Invalid value of maxConsumers
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove maxMessageSize config for specified topic.
      operationId: removePersistentTopicMaxMessageSize
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/maxProducers:
    get:
      tags:
      - persistent topic
      summary: Get maxProducers config for specified topic.
      operationId: getPersistentTopicMaxProducers
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set maxProducers config for specified topic.
      operationId: setPersistentTopicMaxProducers
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: The max producers of the topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Invalid value of maxProducers
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove maxProducers config for specified topic.
      operationId: removePersistentTopicMaxProducers
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/maxSubscriptionsPerTopic:
    get:
      tags:
      - persistent topic
      summary: Get maxSubscriptionsPerTopic config for specified topic.
      operationId: getPersistentTopicMaxSubscriptionsPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set maxSubscriptionsPerTopic config for specified topic.
      operationId: setPersistentTopicMaxSubscriptionsPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: The max subscriptions of the topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Invalid value of maxSubscriptionsPerTopic
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove maxSubscriptionsPerTopic config for specified topic.
      operationId: removePersistentTopicMaxSubscriptionsPerTopic
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer:
    get:
      tags:
      - persistent topic
      summary: Get max unacked messages per consumer config on a topic.
      operationId: getPersistentTopicMaxUnackedMessagesOnConsumer
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
        500:
          description: Internal server error
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set max unacked messages per consumer config on a topic.
      operationId: setPersistentTopicMaxUnackedMessagesOnConsumer
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Max unacked messages on consumer policies for the specified topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Delete max unacked messages per consumer config on a topic.
      operationId: deletePersistentTopicMaxUnackedMessagesOnConsumer
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnSubscription:
    get:
      tags:
      - persistent topic
      summary: Get max unacked messages per subscription config on a topic.
      operationId: getPersistentTopicMaxUnackedMessagesOnSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
        500:
          description: Internal server error
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set max unacked messages per subscription config on a topic.
      operationId: setPersistentTopicMaxUnackedMessagesOnSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Max unacked messages on subscription policies for the specified
          topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Delete max unacked messages per subscription config on a topic.
      operationId: deletePersistentTopicMaxUnackedMessagesOnSubscription
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/messageTTL:
    get:
      tags:
      - persistent topic
      summary: Get message TTL in seconds for a topic
      operationId: getPersistentTopicMessageTTL
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, enable the topic level policy
            and retry
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set message TTL in seconds for a topic
      operationId: setPersistentTopicMessageTTL
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: messageTTL
        in: query
        description: TTL in seconds for the specified namespace
        required: true
        schema:
          type: integer
          format: int32
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Not authenticate to perform the request or policy is read only
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, enable the topic level policy
            and retry
          content: {}
        412:
          description: Invalid message TTL value
          content: {}
    delete:
      tags:
      - persistent topic
      summary: Remove message TTL in seconds for a topic
      operationId: removePersistentTopicMessageTTL
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Not authenticate to perform the request or policy is read only
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, enable the topic level policy
            and retry
          content: {}
        412:
          description: Invalid message TTL value
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/messageid/{timestamp}:
    get:
      tags:
      - persistent topic
      summary: Get message ID published at or just after this absolute timestamp (in
        ms).
      operationId: getPersistentTopicMessageIdByTimestamp
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: timestamp
        in: path
        description: Specify the timestamp
        required: true
        schema:
          type: integer
          format: int64
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic is not non-partitioned and persistent
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/offload:
    get:
      tags:
      - persistent topic
      summary: Offload a prefix of a topic to long term storage
      operationId: offloadPersistentTopicStatus
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Operation is not allowed on the persistent topic
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
    put:
      tags:
      - persistent topic
      summary: Offload a prefix of a topic to long term storage
      operationId: triggerPersistentTopicOffload
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        400:
          description: Message ID is null
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Operation is not allowed on the persistent topic
          content: {}
        409:
          description: Offload already running
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/offloadPolicies:
    get:
      tags:
      - persistent topic
      summary: Get offload policies on a topic.
      operationId: getPersistentTopicOffloadPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
        500:
          description: Internal server error
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set offload policies on a topic.
      operationId: setPersistentTopicOffloadPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: Offload policies for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OffloadPoliciesImpl'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Delete offload policies on a topic.
      operationId: removePersistentTopicOffloadPolicies
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or cluster or namespace or topic doesn't exist
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/partitioned-stats:
    get:
      tags:
      - persistent topic
      summary: Get the stats for the partitioned topic.
      operationId: getPersistentTopicPartitionedStats
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: perPartition
        in: query
        description: Get per partition stats
        schema:
          type: boolean
          default: true
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: getPreciseBacklog
        in: query
        description: If return precise backlog or imprecise backlog
        schema:
          type: boolean
          default: false
      - name: subscriptionBacklogSize
        in: query
        description: If return backlog size for each subscription, require locking
          on ledger so be careful not to use when there's heavy traffic.
        schema:
          type: boolean
          default: false
      - name: getEarliestTimeInBacklog
        in: query
        description: If return the earliest time in backlog
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        412:
          description: Partitioned topic name is invalid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/partitions:
    get:
      tags:
      - persistent topic
      summary: Get partitioned topic metadata.
      operationId: getPersistentTopicPartitionedMetadata
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: checkAllowAutoCreation
        in: query
        description: Is check configuration required to automatically create topic
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Partitioned topic does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Partitioned topic name is invalid
          content: {}
        500:
          description: Internal server error
          content: {}
    put:
      tags:
      - persistent topic
      summary: Create a partitioned topic.
      description: It needs to be called before creating a producer on a partitioned
        topic.
      operationId: createPersistentTopicPartitionedTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: createLocalTopicOnly
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: The number of partitions for the topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
              default: 0
        required: true
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant does not exist
          content: {}
        406:
          description: The number of partitions should be more than 0 and less than
            or equal to maxNumPartitionsPerPartitionedTopic
          content: {}
        409:
          description: Partitioned topic already exist
          content: {}
        412:
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: body
    post:
      tags:
      - persistent topic
      summary: Increment partitions of an existing partitioned topic.
      description: It only increments partitions of existing non-global partitioned-topic
      operationId: updatePersistentTopicPartitionedTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: updateLocalTopicOnly
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: force
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: The number of partitions for the topic
        content:
          '*/*':
            schema:
              type: integer
              format: int32
              default: 0
        required: true
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant does not exist
          content: {}
        406:
          description: The number of partitions should be more than 0 and less than
            or equal to maxNumPartitionsPerPartitionedTopic
          content: {}
        409:
          description: Partitioned topic does not exist
          content: {}
        412:
          description: Partitioned topic name is invalid
          content: {}
        500:
          description: Internal server error
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Delete a partitioned topic.
      description: It will also delete all the partitions of the topic if it exists.
      operationId: deletePersistentTopicPartitionedTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: force
        in: query
        description: Stop all producer/consumer/replicator and delete topic forcefully
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Partitioned topic does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Partitioned topic name is invalid
          content: {}
        500:
          description: Internal server error
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/permissions:
    get:
      tags:
      - persistent topic
      summary: Get permissions on a topic.
      description: Retrieve the effective permissions for a topic. These permissions
        are defined by the permissions set at thenamespace level combined (union)
        with any eventual specific permission set on the topic.
      operationId: getPersistentTopicPermissionsOnTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      responses:
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: tenant/namespace/topic doesn't exit
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/permissions/{role}:
    post:
      tags:
      - persistent topic
      summary: Grant a new permission to a role on a single topic.
      operationId: grantPersistentTopicPermissionsOnTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: role
        in: path
        description: Client role to which grant permissions
        required: true
        schema:
          type: string
      requestBody:
        description: Actions to be granted (produce,functions,consume)
        content:
          '*/*':
            schema:
              type: array
              items:
                type: string
                enum:
                - produce
                - consume
                - functions
                - sources
                - sinks
                - packages
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: tenant/namespace/topic doesn't exit
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Revoke permissions on a topic.
      description: Revoke permissions to a role on a single topic. If the permission
        was not set at the topiclevel, but rather at the namespace level, this operation
        will return an error (HTTP status code 412).
      operationId: revokePersistentTopicNonPersistentTopicPermissionsOnTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: role
        in: path
        description: Client role to which grant permissions
        required: true
        schema:
          type: string
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: tenant/namespace/topic doesn't exit
          content: {}
        412:
          description: Permissions are not set at the topic level
          content: {}
        500:
          description: Internal server error
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/persistence:
    get:
      tags:
      - persistent topic
      summary: Get configuration of persistence policies for specified topic.
      operationId: getPersistentTopicPersistence
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set configuration of persistence policies for specified topic.
      operationId: setPersistentTopicPersistence
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: Bookkeeper persistence policies for specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PersistencePolicies'
        required: false
      responses:
        400:
          description: Invalid persistence policies
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove configuration of persistence policies for specified topic.
      operationId: removePersistentTopicPersistence
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/properties:
    get:
      tags:
      - persistent topic
      summary: Get topic properties.
      operationId: getPersistentTopicProperties
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Topic name is invalid
          content: {}
        500:
          description: Internal server error
          content: {}
    put:
      tags:
      - persistent topic
      summary: Update the properties on the given topic.
      operationId: updatePersistentTopicProperties
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Key value pair properties for the topic metadata
        content:
          '*/*':
            schema:
              type: object
              additionalProperties:
                type: string
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic/Subscription does not exist
          content: {}
        405:
          description: Method Not Allowed
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove the key in properties on the given topic.
      operationId: removePersistentTopicProperties
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: key
        in: query
        schema:
          type: string
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Partitioned topic does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Partitioned topic name is invalid
          content: {}
        500:
          description: Internal server error
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/publishRate:
    get:
      tags:
      - persistent topic
      summary: Get publish rate configuration for specified topic.
      operationId: getPersistentTopicPublishRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set message publish rate configuration for specified topic.
      operationId: setPersistentTopicPublishRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Dispatch rate for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PublishRate'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove message publish rate configuration for specified topic.
      operationId: removePersistentTopicPublishRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/replication:
    get:
      tags:
      - persistent topic
      summary: Get the replication clusters for a topic
      operationId: getPersistentTopicReplicationClusters
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, enable the topic level policy
            and retry
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set the replication clusters for a topic.
      operationId: setPersistentTopicReplicationClusters
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: List of replication clusters
        content:
          '*/*':
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Topic is not global or invalid cluster ids
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove the replication clusters from a topic.
      operationId: removePersistentTopicReplicationClusters
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: backlogQuotaType
        in: query
        schema:
          type: string
          enum:
          - destination_storage
          - message_age
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/replicatorDispatchRate:
    get:
      tags:
      - persistent topic
      summary: Get replicatorDispatchRate config for specified topic.
      operationId: getPersistentTopicReplicatorDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set replicatorDispatchRate config for specified topic.
      operationId: setPersistentTopicReplicatorDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Replicator dispatch rate of the topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Invalid value of replicatorDispatchRate
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove replicatorDispatchRate config for specified topic.
      operationId: removePersistentTopicReplicatorDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/retention:
    get:
      tags:
      - persistent topic
      summary: Get retention configuration for specified topic.
      operationId: getPersistentTopicRetention
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set retention configuration for specified topic.
      operationId: setPersistentTopicRetention
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: Retention policies for the specified namespace
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RetentionPolicies'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Retention Quota must exceed backlog quota
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove retention configuration for specified topic.
      operationId: removePersistentTopicRetention
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Retention Quota must exceed backlog quota
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/schemaCompatibilityStrategy:
    get:
      tags:
      - persistent topic
      summary: Get schema compatibility strategy on a topic
      operationId: getPersistentTopicSchemaCompatibilityStrategy
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the cluster
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Operation not allowed on persistent topic
          content: {}
    put:
      tags:
      - persistent topic
      summary: Set schema compatibility strategy on a topic
      operationId: setPersistentTopicSchemaCompatibilityStrategy
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Strategy used to check the compatibility of new schema
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Operation not allowed on persistent topic
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove schema compatibility strategy on a topic
      operationId: removePersistentTopicSchemaCompatibilityStrategy
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Strategy used to check the compatibility of new schema
        content:
          '*/*':
            schema:
              type: string
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Operation not allowed on persistent topic
          content: {}
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/schemaValidationEnforced:
    get:
      tags:
      - persistent topic
      summary: Get schema validation enforced flag for topic.
      operationId: getPersistentTopicSchemaValidationEnforced
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenants or Namespace doesn't exist
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set schema validation enforced flag on topic.
      operationId: setPersistentTopicSchemaValidationEnforced
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              type: boolean
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Tenant or Namespace doesn't exist
          content: {}
        412:
          description: schemaValidationEnforced value is not valid
          content: {}
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/shadowTopics:
    get:
      tags:
      - persistent topic
      summary: Get the shadow topic list for a topic
      operationId: getPersistentTopicShadowTopics
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, enable the topic level policy
            and retry
          content: {}
    put:
      tags:
      - persistent topic
      summary: Set shadow topic list for a topic
      operationId: setPersistentTopicShadowTopics
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: List of shadow topics
        content:
          '*/*':
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Delete shadow topics for a topic
      operationId: deletePersistentTopicShadowTopics
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/stats:
    get:
      tags:
      - persistent topic
      summary: Get the stats for the topic.
      operationId: getPersistentTopicStats
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: getPreciseBacklog
        in: query
        description: If return precise backlog or imprecise backlog
        schema:
          type: boolean
          default: false
      - name: subscriptionBacklogSize
        in: query
        description: If return backlog size for each subscription, require locking
          on ledger so be careful not to use when there's heavy traffic.
        schema:
          type: boolean
          default: false
      - name: getEarliestTimeInBacklog
        in: query
        description: If return time of the earliest message in backlog
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/subscribeRate:
    get:
      tags:
      - persistent topic
      summary: Get subscribe rate configuration for specified topic.
      operationId: getPersistentTopicSubscribeRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set subscribe rate configuration for specified topic.
      operationId: setPersistentTopicSubscribeRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Subscribe rate for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SubscribeRate'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove subscribe rate configuration for specified topic.
      operationId: removePersistentTopicSubscribeRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Subscribe rate for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SubscribeRate'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}:
    delete:
      tags:
      - persistent topic
      summary: Delete a subscription.
      description: The subscription cannot be deleted if delete is not forcefully
        and there are any active consumers attached to it. Force delete ignores connected
        consumers and deletes subscription by explicitly closing them.
      operationId: deletePersistentTopicSubscription
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to be deleted
        required: true
        schema:
          type: string
      - name: force
        in: query
        description: Disconnect and close all consumers and delete subscription forcefully
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        412:
          description: Subscription has active consumers
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/analyzeBacklog:
    post:
      tags:
      - persistent topic
      summary: Analyse a subscription, by scanning all the unprocessed messages
      operationId: analyzePersistentTopicSubscriptionBacklog
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: messageId to start the analysis
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResetCursorData'
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic/Subscription does not exist
          content: {}
        405:
          description: Method Not Allowed
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: position
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/expireMessages:
    post:
      tags:
      - persistent topic
      summary: Expiry messages on a topic subscription.
      operationId: expirePersistentTopicMessages
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to be Expiry messages on
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: messageId to reset back to (ledgerId:entryId)
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResetCursorData'
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic or subscription does not exist
          content: {}
        405:
          description: Expiry messages on a non-persistent topic is not allowed
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: messageId
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/expireMessages/{expireTimeInSeconds}:
    post:
      tags:
      - persistent topic
      summary: Expiry messages on a topic subscription.
      operationId: expirePersistentTopicMessagesTimeInSeconds
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to be Expiry messages on
        required: true
        schema:
          type: string
      - name: expireTimeInSeconds
        in: path
        description: Expires beyond the specified number of seconds
        required: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic or subscription does not exist
          content: {}
        405:
          description: Expiry messages on a non-persistent topic is not allowed
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/position/{messagePosition}:
    get:
      tags:
      - persistent topic
      summary: Peek nth message on a topic subscription.
      operationId: peekPersistentTopicNthMessage
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Subscribed message expired
        required: true
        schema:
          type: string
      - name: messagePosition
        in: path
        description: The number of messages (default 1)
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic, subscription or the message position does not exist
          content: {}
        405:
          description: Skipping messages on a non-persistent topic is not allowed
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/properties:
    get:
      tags:
      - persistent topic
      summary: Return all the properties on the given subscription
      operationId: getPersistentTopicSubscriptionProperties
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic/Subscription does not exist
          content: {}
        405:
          description: Method Not Allowed
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
    put:
      tags:
      - persistent topic
      summary: Replace all the properties on the given subscription
      operationId: updatePersistentTopicSubscriptionProperties
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to update
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: The new properties
        content:
          '*/*':
            schema:
              type: object
              additionalProperties:
                type: string
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic/Subscription does not exist
          content: {}
        405:
          description: Method Not Allowed
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/replicatedSubscriptionStatus:
    get:
      tags:
      - persistent topic
      summary: Get replicated subscription status on a topic.
      operationId: getPersistentTopicReplicatedSubscriptionStatus
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Name of subscription
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        401:
          description: Don't have permission to administrate resources
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        412:
          description: Can't find owner for topic
          content: {}
        500:
          description: Internal server error
          content: {}
    post:
      tags:
      - persistent topic
      summary: Enable or disable a replicated subscription on a topic.
      operationId: setPersistentTopicReplicatedSubscriptionStatus
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Name of subscription
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Whether to enable replicated subscription
        content:
          '*/*':
            schema:
              type: boolean
        required: true
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            or subscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic or subscription does not exist
          content: {}
        405:
          description: Operation not allowed on this topic
          content: {}
        412:
          description: Can't find owner for topic
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor:
    post:
      tags:
      - persistent topic
      summary: Reset subscription to message position closest to given position.
      description: It fence cursor and disconnects all active consumers before resetting
        cursor.
      operationId: resetPersistentTopicCursorOnPosition
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to reset position on
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: messageId to reset back to (ledgerId:entryId)
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResetCursorData'
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic/Subscription does not exist
          content: {}
        405:
          description: Not supported for partitioned topics
          content: {}
        412:
          description: Unable to find position for position specified
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: messageId
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor/{timestamp}:
    post:
      tags:
      - persistent topic
      summary: Reset subscription to message position closest to absolute timestamp
        (in ms).
      description: It fence cursor and disconnects all active consumers before resetting
        cursor.
      operationId: resetPersistentTopicCursor
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Subscription to reset position on
        required: true
        schema:
          type: string
      - name: timestamp
        in: path
        description: the timestamp to reset back
        required: true
        schema:
          type: integer
          format: int64
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic/Subscription does not exist
          content: {}
        405:
          description: Method Not Allowed
          content: {}
        412:
          description: Failed to reset cursor on subscription or Unable to find position
            for timestamp specified
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip/{numMessages}:
    post:
      tags:
      - persistent topic
      summary: Skipping messages on a topic subscription.
      operationId: skipPersistentTopicMessages
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Name of subscription
        required: true
        schema:
          type: string
      - name: numMessages
        in: path
        description: The number of messages to skip
        required: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic or subscription does not exist
          content: {}
        405:
          description: Skipping messages on a partitioned topic is not allowed
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip_all:
    post:
      tags:
      - persistent topic
      summary: Skip all messages on a topic subscription.
      description: Completely clears the backlog on the subscription.
      operationId: skipPersistentTopicAllMessages
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subName
        in: path
        description: Name of subscription
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic or subscription does not exist
          content: {}
        405:
          description: Operation not allowed on non-persistent topic
          content: {}
        412:
          description: Can't find owner for topic
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subscriptionName}:
    put:
      tags:
      - persistent topic
      summary: Create a subscription on the topic.
      description: Creates a subscription on the topic at the specified message id
      operationId: createPersistentTopicSubscription
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: subscriptionName
        in: path
        description: Subscription to create position on
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: replicated
        in: query
        description: Is replicated required to perform this operation
        schema:
          type: boolean
      requestBody:
        description: messageId where to create the subscription. It can be 'latest',
          'earliest' or (ledgerId:entryId)
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResetCursorData'
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        400:
          description: Create subscription on non persistent topic is not supported
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic/Subscription does not exist
          content: {}
        405:
          description: Not supported for partitioned topics
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
      x-codegen-request-body-name: messageId
  /persistent/{tenant}/{namespace}/{topic}/subscriptionDispatchRate:
    get:
      tags:
      - persistent topic
      summary: Get subscription message dispatch rate configuration for specified
        topic.
      operationId: getPersistentTopicSubscriptionDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set subscription message dispatch rate configuration for specified
        topic.
      operationId: setPersistentTopicSubscriptionDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: Subscription message dispatch rate for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove subscription message dispatch rate configuration for specified
        topic.
      operationId: removePersistentTopicSubscriptionDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/subscriptionTypesEnabled:
    get:
      tags:
      - persistent topic
      summary: Get is enable sub type fors specified topic.
      operationId: getPersistentTopicSubscriptionTypesEnabled
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set is enable sub types for specified topic
      operationId: setPersistentTopicSubscriptionTypesEnabled
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      requestBody:
        description: Enable sub types for the specified topic
        content:
          '*/*':
            schema:
              type: array
              items:
                type: string
                enum:
                - Exclusive
                - Shared
                - Failover
                - Key_Shared
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove subscription types enabled for specified topic.
      operationId: removePersistentTopicSubscriptionTypesEnabled
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/subscriptions:
    get:
      tags:
      - persistent topic
      summary: Get the list of persistent subscriptions for a given topic.
      operationId: getPersistentTopicSubscriptions
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/terminate:
    post:
      tags:
      - persistent topic
      summary: Terminate a topic. A topic that is terminated will not accept any more
        messages to be published and will let consumer to drain existing messages
        in backlog
      operationId: terminatePersistentTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Termination of a partitioned topic is not allowed
          content: {}
        406:
          description: Need to provide a persistent topic name
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/terminate/partitions:
    post:
      tags:
      - persistent topic
      summary: Terminate all partitioned topic. A topic that is terminated will not
        accept any more messages to be published and will let consumer to drain existing
        messages in backlog
      operationId: terminatePersistentTopicPartitionedTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        401:
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Termination of a non-partitioned topic is not allowed
          content: {}
        412:
          description: Topic name is not valid
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/truncate:
    delete:
      tags:
      - persistent topic
      summary: Truncate a topic.
      description: The truncate operation will move all cursors to the end of the
        topic and delete all inactive ledgers.
      operationId: truncatePersistentTopicTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        500:
          description: Internal server error
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/unload:
    put:
      tags:
      - persistent topic
      summary: Unload a topic
      operationId: unloadPersistentTopicTopic
      parameters:
      - name: tenant
        in: path
        description: Specify the tenant
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Specify the namespace
        required: true
        schema:
          type: string
      - name: topic
        in: path
        description: Specify topic name
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        401:
          description: Don't have permission to administrate resources on this tenant
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        409:
          description: Concurrent modification
          content: {}
        412:
          description: Topic name is not valid or can't find owner for topic
          content: {}
        500:
          description: Internal server error
          content: {}
        503:
          description: Failed to validate global cluster configuration
          content: {}
  /persistent/{tenant}/{namespace}/{topic}/{subName}/dispatchRate:
    get:
      tags:
      - persistent topic
      summary: Get message dispatch rate configuration for specified subscription.
      operationId: getPersistentTopicSubscriptionLevelDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: subName
        in: path
        required: true
        schema:
          type: string
      - name: applied
        in: query
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
    post:
      tags:
      - persistent topic
      summary: Set message dispatch rate configuration for specified subscription.
      operationId: setPersistentTopicSubscriptionLevelDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: subName
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: Subscription message dispatch rate for the specified topic
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - persistent topic
      summary: Remove message dispatch rate configuration for specified subscription.
      operationId: removePersistentTopicSubscriptionLevelDispatchRate
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: subName
        in: path
        required: true
        schema:
          type: string
      - name: isGlobal
        in: query
        schema:
          type: boolean
          default: false
      - name: authoritative
        in: query
        description: Whether leader broker redirected this call to this broker. For
          internal use.
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Topic does not exist
          content: {}
        405:
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /resource-quotas:
    get:
      tags:
      - resource-quotas
      summary: Get the default quota
      operationId: getDefaultResourceQuota
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
        403:
          description: Don't have admin permission
          content: {}
    post:
      tags:
      - resource-quotas
      summary: Set the default quota
      operationId: setDefaultResourceQuota
      requestBody:
        description: Default resource quota
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceQuota'
        required: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
        403:
          description: Don't have admin permission
          content: {}
      x-codegen-request-body-name: body
  /resource-quotas/{tenant}/{namespace}/{bundle}:
    get:
      tags:
      - resource-quotas
      summary: Get resource quota of a namespace bundle.
      operationId: getNamespaceBundleResourceQuota
      parameters:
      - name: tenant
        in: path
        description: Tenant name
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Namespace name within the specified tenant
        required: true
        schema:
          type: string
      - name: bundle
        in: path
        description: Namespace bundle range
        required: true
        schema:
          type: string
      responses:
        307:
          description: Current broker doesn't serve the namespace
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: Namespace does not exist
          content: {}
    post:
      tags:
      - resource-quotas
      summary: Set resource quota on a namespace.
      operationId: setNamespaceBundleResourceQuota
      parameters:
      - name: tenant
        in: path
        description: Tenant name
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Namespace name within the specified tenant
        required: true
        schema:
          type: string
      - name: bundle
        in: path
        description: Namespace bundle range
        required: true
        schema:
          type: string
      requestBody:
        description: Resource quota for the specified namespace
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceQuota'
        required: false
      responses:
        307:
          description: Current broker doesn't serve the namespace
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        409:
          description: Concurrent modification
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - resource-quotas
      summary: Remove resource quota for a namespace.
      operationId: removeNamespaceBundleResourceQuota
      parameters:
      - name: tenant
        in: path
        description: Tenant name
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: Namespace name within the specified tenant
        required: true
        schema:
          type: string
      - name: bundle
        in: path
        description: Namespace bundle range
        required: true
        schema:
          type: string
      responses:
        307:
          description: Current broker doesn't serve the namespace
          content: {}
        403:
          description: Don't have admin permission
          content: {}
        409:
          description: Concurrent modification
          content: {}
  /resourcegroups:
    get:
      tags:
      - resourcegroups
      summary: Get the list of all the resourcegroups.
      operationId: getResourceGroups
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
        403:
          description: Don't have admin permission
          content: {}
  /resourcegroups/{resourcegroup}:
    get:
      tags:
      - resourcegroups
      summary: Get the rate limiters specified for a resourcegroup.
      operationId: getResourceGroup
      parameters:
      - name: resourcegroup
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceGroup'
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: ResourceGroup doesn't exist
          content: {}
    put:
      tags:
      - resourcegroups
      summary: Creates a new resourcegroup with the specified rate limiters
      operationId: createOrUpdateResourceGroup
      parameters:
      - name: resourcegroup
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Rate limiters for the resourcegroup
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceGroup'
        required: false
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: cluster doesn't exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - resourcegroups
      summary: Delete a resourcegroup.
      operationId: deleteResourceGroup
      parameters:
      - name: resourcegroup
        in: path
        required: true
        schema:
          type: string
      responses:
        403:
          description: Don't have admin permission
          content: {}
        404:
          description: ResourceGroup doesn't exist
          content: {}
        409:
          description: ResourceGroup is in use
          content: {}
  /schemas/{tenant}/{namespace}/{topic}/compatibility:
    post:
      tags:
      - schemas
      summary: test the schema compatibility
      operationId: testCompatibility
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: A JSON value presenting a schema payload. An example of the expected
          schema can be found down here.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSchemaPayload'
        required: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsCompatibilityResponse'
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Client is not authorized or Don't have admin permission
          content: {}
        403:
          description: Client is not authenticated
          content: {}
        404:
          description: Tenant or Namespace or Topic doesn't exist
          content: {}
        412:
          description: Failed to find the ownership for the topic
          content: {}
        500:
          description: Internal Server Error
          content: {}
      x-codegen-request-body-name: body
  /schemas/{tenant}/{namespace}/{topic}/schema:
    get:
      tags:
      - schemas
      summary: Get the schema of a topic
      operationId: getSchemaOfTopic
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSchemaResponse'
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Client is not authorized or Don't have admin permission
          content: {}
        403:
          description: Client is not authenticated
          content: {}
        404:
          description: Tenant or Namespace or Topic doesn't exist; or Schema is not
            found for this topic
          content: {}
        412:
          description: Failed to find the ownership for the topic
          content: {}
        500:
          description: Internal Server Error
          content: {}
    post:
      tags:
      - schemas
      summary: Update the schema of a topic
      operationId: postSchema
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: A JSON value presenting a schema payload. An example of the expected
          schema can be found down here.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSchemaPayload'
        required: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSchemaSuccessResponse'
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Client is not authorized or Don't have admin permission
          content: {}
        403:
          description: Client is not authenticated
          content: {}
        404:
          description: Tenant or Namespace or Topic doesn't exist
          content: {}
        409:
          description: Incompatible schema
          content: {}
        412:
          description: Failed to find the ownership for the topic
          content: {}
        422:
          description: Invalid schema data
          content: {}
        500:
          description: Internal Server Error
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - schemas
      summary: Delete the schema of a topic
      operationId: deleteSchema
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      - name: force
        in: query
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSchemaSuccessResponse'
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Client is not authorized or Don't have admin permission
          content: {}
        403:
          description: Client is not authenticated
          content: {}
        404:
          description: Tenant or Namespace or Topic doesn't exist
          content: {}
        412:
          description: Failed to find the ownership for the topic
          content: {}
        500:
          description: Internal Server Error
          content: {}
  /schemas/{tenant}/{namespace}/{topic}/schema/{version}:
    get:
      tags:
      - schemas
      summary: Get the schema of a topic at a given version
      operationId: getSchemaOfTopicGivenVersion
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSchemaResponse'
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Client is not authorized or Don't have admin permission
          content: {}
        403:
          description: Client is not authenticated
          content: {}
        404:
          description: Tenant or Namespace or Topic doesn't exist; or Schema is not
            found for this topic
          content: {}
        412:
          description: Failed to find the ownership for the topic
          content: {}
        500:
          description: Internal Server Error
          content: {}
  /schemas/{tenant}/{namespace}/{topic}/schemas:
    get:
      tags:
      - schemas
      summary: Get the all schemas of a topic
      operationId: getAllSchemas
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllVersionsSchemaResponse'
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Client is not authorized or Don't have admin permission
          content: {}
        403:
          description: Client is not authenticated
          content: {}
        404:
          description: Tenant or Namespace or Topic doesn't exist; or Schema is not
            found for this topic
          content: {}
        412:
          description: Failed to find the ownership for the topic
          content: {}
        500:
          description: Internal Server Error
          content: {}
  /schemas/{tenant}/{namespace}/{topic}/version:
    post:
      tags:
      - schemas
      summary: get the version of the schema
      operationId: getVersionBySchema
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: authoritative
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        description: A JSON value presenting a schema payload. An example of the expected
          schema can be found down here.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSchemaPayload'
        required: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongSchemaVersion'
        307:
          description: Current broker doesn't serve the namespace of this topic
          content: {}
        401:
          description: Client is not authorized or Don't have admin permission
          content: {}
        403:
          description: Client is not authenticated
          content: {}
        404:
          description: Tenant or Namespace or Topic doesn't exist
          content: {}
        412:
          description: Failed to find the ownership for the topic
          content: {}
        422:
          description: Invalid schema data
          content: {}
        500:
          description: Internal Server Error
          content: {}
      x-codegen-request-body-name: body
  /tenants:
    get:
      tags:
      - tenants
      summary: Get the list of existing tenants.
      operationId: getTenants
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        403:
          description: The requester doesn't have admin permissions
          content: {}
        404:
          description: Tenant doesn't exist
          content: {}
  /tenants/{tenant}:
    get:
      tags:
      - tenants
      summary: Get the admin configuration for a given tenant.
      operationId: getTenantAdmin
      parameters:
      - name: tenant
        in: path
        description: The tenant name
        required: true
        schema:
          type: string
      responses:
        403:
          description: The requester doesn't have admin permissions
          content: {}
        404:
          description: Tenant does not exist
          content: {}
    put:
      tags:
      - tenants
      summary: Create a new tenant.
      description: This operation requires Pulsar super-user privileges.
      operationId: createTenant
      parameters:
      - name: tenant
        in: path
        description: The tenant name
        required: true
        schema:
          type: string
      requestBody:
        description: TenantInfo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantInfo'
        required: false
      responses:
        204:
          description: successful operation
          content: {}
        403:
          description: The requester doesn't have admin permissions
          content: {}
        409:
          description: Tenant already exists
          content: {}
        412:
          description: Clusters do not exist
          content: {}
      x-codegen-request-body-name: body
    post:
      tags:
      - tenants
      summary: Update the admins for a tenant.
      description: This operation requires Pulsar super-user privileges.
      operationId: updateTenant
      parameters:
      - name: tenant
        in: path
        description: The tenant name
        required: true
        schema:
          type: string
      requestBody:
        description: TenantInfo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantInfo'
        required: false
      responses:
        403:
          description: The requester doesn't have admin permissions
          content: {}
        404:
          description: Tenant does not exist
          content: {}
        409:
          description: Tenant already exists
          content: {}
        412:
          description: Clusters do not exist
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - tenants
      summary: Delete a tenant and all namespaces and topics under it.
      operationId: deleteTenant
      parameters:
      - name: tenant
        in: path
        description: The tenant name
        required: true
        schema:
          type: string
      - name: force
        in: query
        schema:
          type: boolean
          default: false
      responses:
        403:
          description: The requester doesn't have admin permissions
          content: {}
        404:
          description: Tenant does not exist
          content: {}
        405:
          description: Broker doesn't allow forced deletion of tenants
          content: {}
        409:
          description: The tenant still has active namespaces
          content: {}
  /worker-stats/functionsmetrics:
    get:
      summary: Get metrics for all functions owned by worker
      description: Requested should be executed by Monitoring agent on each worker
        to fetch the metrics
      operationId: getWorkerStats
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkerFunctionInstanceStats'
        401:
          description: Don't have admin permission
          content: {}
        503:
          description: Worker service is not running
          content: {}
  /worker-stats/metrics:
    get:
      summary: Gets the metrics for Monitoring
      description: Request should be executed by Monitoring agent on each worker to
        fetch the worker-metrics
      operationId: getWorkerStatsMetrics
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Metrics'
        401:
          description: Don't have admin permission
          content: {}
        503:
          description: Worker service is not running
          content: {}
  /worker/assignments:
    get:
      summary: Fetches information about which Pulsar Functions are assigned to which
        Pulsar clusters
      operationId: getAssignments
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties: {}
        403:
          description: The requester doesn't have admin permissions
          content: {}
        503:
          description: Worker service is not running
          content: {}
  /worker/cluster:
    get:
      summary: Fetches information about the Pulsar cluster running Pulsar Functions
      operationId: getWorkerCluster
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkerInfo'
        403:
          description: The requester doesn't have admin permissions
          content: {}
        503:
          description: Worker service is not running
          content: {}
  /worker/cluster/leader:
    get:
      summary: Fetches info about the leader node of the Pulsar cluster running Pulsar
        Functions
      operationId: getWorkerClusterLeader
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerInfo'
        403:
          description: The requester doesn't have admin permissions
          content: {}
        503:
          description: Worker service is not running
          content: {}
  /worker/cluster/leader/ready:
    get:
      summary: Checks if this node is the leader and is ready to service requests
      operationId: isLeaderReady
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                type: boolean
        503:
          description: Worker service is not running
          content: {}
  /worker/connectors:
    get:
      summary: Fetches a list of supported Pulsar IO connectors currently running
        in cluster mode
      operationId: getConnectorsList
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {}
        400:
          description: Invalid request
          content: {}
        403:
          description: The requester doesn't have admin permissions
          content: {}
        408:
          description: Request timeout
          content: {}
  /worker/drain:
    get:
      summary: Get the status of any ongoing drain operation at this worker
      operationId: getDrainStatus
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LongRunningProcessStatus'
        403:
          description: The requester doesn't have admin permissions
          content: {}
        503:
          description: Worker service is not ready
          content: {}
    put:
      summary: Drains this worker, i.e., moves its work-assignments to other workers
      operationId: drain
      responses:
        400:
          description: Invalid request
          content: {}
        403:
          description: The requester doesn't have admin permissions
          content: {}
        408:
          description: Request timeout
          content: {}
        409:
          description: Drain already in progress
          content: {}
        503:
          description: Worker service is not ready
          content: {}
  /worker/leader/drain:
    get:
      summary: Get the status of any ongoing drain operation at the specified worker
      operationId: getDrainStatusFromLeader
      parameters:
      - name: workerId
        in: query
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LongRunningProcessStatus'
        403:
          description: The requester doesn't have admin permissions
          content: {}
        503:
          description: Worker service is not ready
          content: {}
    put:
      summary: Drains the specified worker, i.e., moves its work-assignments to other
        workers
      operationId: drainAtLeader
      parameters:
      - name: workerId
        in: query
        schema:
          type: string
      responses:
        400:
          description: Invalid request
          content: {}
        403:
          description: The requester doesn't have admin permissions
          content: {}
        408:
          description: Request timeout
          content: {}
        409:
          description: Drain already in progress
          content: {}
        503:
          description: Worker service is not ready
          content: {}
  /worker/rebalance:
    put:
      summary: Triggers a rebalance of functions to workers
      operationId: rebalance
      responses:
        400:
          description: Invalid request
          content: {}
        403:
          description: The requester doesn't have admin permissions
          content: {}
        408:
          description: Request timeout
          content: {}
components:
  schemas:
    AllocatorStats:
      type: object
      properties:
        numDirectArenas:
          type: integer
          format: int32
        numHeapArenas:
          type: integer
          format: int32
        numThreadLocalCaches:
          type: integer
          format: int32
        normalCacheSize:
          type: integer
          format: int32
        smallCacheSize:
          type: integer
          format: int32
        directArenas:
          type: array
          items:
            $ref: '#/components/schemas/PoolArenaStats'
        heapArenas:
          type: array
          items:
            $ref: '#/components/schemas/PoolArenaStats'
    Annotation:
      type: object
    AnnotationIntrospector:
      type: object
    ArrayBuilders:
      type: object
      properties:
        booleanBuilder:
          $ref: '#/components/schemas/BooleanBuilder'
        byteBuilder:
          $ref: '#/components/schemas/ByteBuilder'
        shortBuilder:
          $ref: '#/components/schemas/ShortBuilder'
        intBuilder:
          $ref: '#/components/schemas/IntBuilder'
        longBuilder:
          $ref: '#/components/schemas/LongBuilder'
        floatBuilder:
          $ref: '#/components/schemas/FloatBuilder'
        doubleBuilder:
          $ref: '#/components/schemas/DoubleBuilder'
    authenticationType:
      type: string
      enum:
      - produce
      - consume
      - functions
      - sources
      - sinks
      - packages

    AuthPolicies:
      type: object
      properties:
        namespaceAuthentication:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            items:
              $ref: '#/components/schemas/authenticationType'

        subscriptionAuthentication:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            items:
              type: string
        topicAuthentication:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              uniqueItems: true
              type: array
              items:
                $ref: '#/components/schemas/authenticationType'

    AuthenticationDataSource:
      type: object
      properties:
        peerAddress:
          $ref: '#/components/schemas/SocketAddress'
        tlsCertificates:
          type: array
          items:
            $ref: '#/components/schemas/Certificate'
        httpAuthType:
          type: string
        commandData:
          type: string
        subscription:
          type: string
    AutoFailoverPolicyData:
      type: object
      properties:
        parameters:
          type: object
          additionalProperties:
            type: string
        policyType:
          type: string
          enum:
          - min_available
    AutoSubscriptionCreationOverride:
      type: object
      properties:
        allowAutoSubscriptionCreation:
          type: boolean
    AutoTopicCreationOverride:
      type: object
      properties:
        topicType:
          type: string
        defaultNumPartitions:
          type: integer
          format: int32
        allowAutoTopicCreation:
          type: boolean
    BacklogQuota:
      type: object
      properties:
        policy:
          type: string
          enum:
          - producer_request_hold
          - producer_exception
          - consumer_backlog_eviction
        limit:
          type: integer
          format: int64
        limitSize:
          type: integer
          format: int64
        limitTime:
          type: integer
          format: int32
    Base64Variant:
      type: object
      properties:
        name:
          type: string
        maxLineLength:
          type: integer
          format: int32
        paddingChar:
          type: string
        paddingByte:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
    BookieAffinityGroupData:
      type: object
      properties:
        bookkeeperAffinityGroupPrimary:
          type: string
        bookkeeperAffinityGroupSecondary:
          type: string
    BookieInfo:
      type: object
      properties:
        hostname:
          type: string
        rack:
          type: string
    BookiesClusterInfo:
      type: object
      properties:
        bookies:
          type: array
          items:
            $ref: '#/components/schemas/RawBookieInfo'
    BooleanBuilder:
      type: object
    BrokerInfo:
      type: object
      properties:
        serviceUrl:
          type: string
    BrokerNamespaceIsolationData:
      type: object
      properties:
        brokerName:
          type: string
          description: The broker name
          example: broker1:8080
        policyName:
          type: string
          description: Policy name
          example: my-policy
        namespaceRegex:
          type: array
          description: The namespace-isolation policies attached to this broker
          items:
            type: string
        primary:
          type: boolean
      description: The namespace isolation data for a given broker
    BundlesData:
      type: object
      properties:
        boundaries:
          type: array
          items:
            type: string
        numBundles:
          type: integer
          format: int32
    ByteBuilder:
      type: object
    Certificate:
      type: object
      properties:
        type:
          type: string
        encoded:
          type: array
          items:
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
            format: byte
        publicKey:
          $ref: '#/components/schemas/PublicKey'
    CharacterEscapes:
      type: object
      properties:
        escapeCodesForAscii:
          type: array
          items:
            type: integer
            format: int32
    ClassIntrospector:
      type: object
    ClassLoader:
      type: object
      properties:
        name:
          type: string
        registeredAsParallelCapable:
          type: boolean
        parent:
          $ref: '#/components/schemas/ClassLoader'
        unnamedModule:
          $ref: '#/components/schemas/Module'
        definedPackages:
          type: array
          items:
            $ref: '#/components/schemas/Package'
    ClusterData:
      type: object
      properties:
        serviceUrl:
          type: string
          description: The HTTP rest service URL (for admin operations)
          example: http://pulsar.example.com:8080
        serviceUrlTls:
          type: string
          description: The HTTPS rest service URL (for admin operations)
          example: https://pulsar.example.com:8443
        brokerServiceUrl:
          type: string
          description: The broker service url (for produce and consume operations)
          example: pulsar://pulsar.example.com:6650
        brokerServiceUrlTls:
          type: string
          description: The secured broker service url (for produce and consume operations)
          example: pulsar+ssl://pulsar.example.com:6651
        proxyServiceUrl:
          type: string
          description: Proxy-service url when client would like to connect to broker
            via proxy.
          example: pulsar+ssl://ats-proxy.example.com:4443 or pulsar://ats-proxy.example.com:4080
        authenticationPlugin:
          type: string
          description: Authentication plugin when client would like to connect to
            cluster.
          example: org.apache.pulsar.client.impl.auth.AuthenticationToken
        authenticationParameters:
          type: string
          description: Authentication parameters when client would like to connect
            to cluster.
        proxyProtocol:
          type: string
          description: 'protocol to decide type of proxy routing eg: SNI-routing'
          example: SNI
          enum:
          - SNI
        peerClusterNames:
          uniqueItems: true
          type: array
          description: A set of peer cluster names
          items:
            type: string
        brokerClientTlsEnabled:
          type: boolean
          description: Enable TLS when talking with other brokers in the same cluster
            (admin operation) or different clusters (replication)
        tlsAllowInsecureConnection:
          type: boolean
          description: Allow TLS connections to servers whose certificate cannot be
            be verified to have been signed by a trusted certificate authority.
        brokerClientTlsEnabledWithKeyStore:
          type: boolean
          description: Whether internal client use KeyStore type to authenticate with
            other Pulsar brokers
        brokerClientTlsTrustStoreType:
          type: string
          description: 'TLS TrustStore type configuration for internal client: JKS,
            PKCS12 used by the internal client to authenticate with Pulsar brokers'
          example: JKS
        brokerClientTlsTrustStore:
          type: string
          description: TLS TrustStore path for internal client used by the internal
            client to authenticate with Pulsar brokers
        brokerClientTlsTrustStorePassword:
          type: string
          description: TLS TrustStore password for internal client used by the internal
            client to authenticate with Pulsar brokers
        brokerClientTrustCertsFilePath:
          type: string
          description: Path for the trusted TLS certificate file for outgoing connection
            to a server (broker)
        listenerName:
          type: string
          description: listenerName when client would like to connect to cluster
      description: The configuration data for a cluster
    CompletableFuture:
      type: object
      properties:
        cancelled:
          type: boolean
        done:
          type: boolean
        numberOfDependents:
          type: integer
          format: int32
        completedExceptionally:
          type: boolean
    CompletableFutureClusterData:
      type: object
      properties:
        cancelled:
          type: boolean
        done:
          type: boolean
        numberOfDependents:
          type: integer
          format: int32
        completedExceptionally:
          type: boolean
    CompletableFutureListSchemaAndMetadata:
      type: object
      properties:
        cancelled:
          type: boolean
        done:
          type: boolean
        numberOfDependents:
          type: integer
          format: int32
        completedExceptionally:
          type: boolean
    CompletableFutureLong:
      type: object
      properties:
        cancelled:
          type: boolean
        done:
          type: boolean
        numberOfDependents:
          type: integer
          format: int32
        completedExceptionally:
          type: boolean
    CompletableFuturePairBooleanSchemaCompatibilityStrategy:
      type: object
      properties:
        cancelled:
          type: boolean
        done:
          type: boolean
        numberOfDependents:
          type: integer
          format: int32
        completedExceptionally:
          type: boolean
    CompletableFuturePartitionedTopicMetadata:
      type: object
      properties:
        cancelled:
          type: boolean
        done:
          type: boolean
        numberOfDependents:
          type: integer
          format: int32
        completedExceptionally:
          type: boolean
    CompletableFutureResourceQuota:
      type: object
      properties:
        cancelled:
          type: boolean
        done:
          type: boolean
        numberOfDependents:
          type: integer
          format: int32
        completedExceptionally:
          type: boolean
    CompletableFutureSchemaAndMetadata:
      type: object
      properties:
        cancelled:
          type: boolean
        done:
          type: boolean
        numberOfDependents:
          type: integer
          format: int32
        completedExceptionally:
          type: boolean
    CompletableFutureSchemaVersion:
      type: object
      properties:
        cancelled:
          type: boolean
        done:
          type: boolean
        numberOfDependents:
          type: integer
          format: int32
        completedExceptionally:
          type: boolean
    CompletableFutureVoid:
      type: object
      properties:
        cancelled:
          type: boolean
        done:
          type: boolean
        numberOfDependents:
          type: integer
          format: int32
        completedExceptionally:
          type: boolean
    ConnectorDefinition:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        sourceClass:
          type: string
        sinkClass:
          type: string
        sourceConfigClass:
          type: string
        sinkConfigClass:
          type: string
    ContextAttributes:
      type: object
    Currency:
      type: object
      properties:
        currencyCode:
          type: string
        defaultFractionDigits:
          type: integer
          format: int32
        numericCode:
          type: integer
          format: int32
        displayName:
          type: string
        symbol:
          type: string
        numericCodeAsString:
          type: string
    DateFormat:
      type: object
      properties:
        calendar:
          type: string
          format: date-time
        numberFormat:
          $ref: '#/components/schemas/NumberFormat'
        timeZone:
          $ref: '#/components/schemas/TimeZone'
        lenient:
          type: boolean
    DelayedDeliveryPolicies:
      type: object
      properties:
        active:
          type: boolean
        tickTime:
          type: integer
          format: int64
    DeleteSchemaSuccessResponse:
      type: object
      properties:
        version:
          type: integer
          format: int64
    DeserializationConfig:
      type: object
      properties:
        annotationIntrospector:
          $ref: '#/components/schemas/AnnotationIntrospector'
        defaultPropertyInclusion:
          $ref: '#/components/schemas/Value'
        nodeFactory:
          $ref: '#/components/schemas/JsonNodeFactory'
        deserializationFeatures:
          type: integer
          format: int32
        problemHandlers:
          $ref: '#/components/schemas/LinkedNodeDeserializationProblemHandler'
        attributes:
          $ref: '#/components/schemas/ContextAttributes'
        rootName:
          type: string
        subtypeResolver:
          $ref: '#/components/schemas/SubtypeResolver'
        fullRootName:
          $ref: '#/components/schemas/PropertyName'
        defaultVisibilityChecker:
          $ref: '#/components/schemas/VisibilityCheckerObject'
        locale:
          $ref: '#/components/schemas/Locale'
        timeZone:
          $ref: '#/components/schemas/TimeZone'
        typeFactory:
          $ref: '#/components/schemas/TypeFactory'
        propertyNamingStrategy:
          $ref: '#/components/schemas/PropertyNamingStrategy'
        handlerInstantiator:
          $ref: '#/components/schemas/HandlerInstantiator'
        dateFormat:
          $ref: '#/components/schemas/DateFormat'
        base64Variant:
          $ref: '#/components/schemas/Base64Variant'
        annotationProcessingEnabled:
          type: boolean
        classIntrospector:
          $ref: '#/components/schemas/ClassIntrospector'
    DeserializationContext:
      type: object
      properties:
        factory:
          $ref: '#/components/schemas/DeserializerFactory'
        locale:
          $ref: '#/components/schemas/Locale'
        timeZone:
          $ref: '#/components/schemas/TimeZone'
        config:
          $ref: '#/components/schemas/DeserializationConfig'
        parser:
          $ref: '#/components/schemas/JsonParser'
        typeFactory:
          $ref: '#/components/schemas/TypeFactory'
        annotationIntrospector:
          $ref: '#/components/schemas/AnnotationIntrospector'
        nodeFactory:
          $ref: '#/components/schemas/JsonNodeFactory'
        contextualType:
          $ref: '#/components/schemas/JavaType'
        deserializationFeatures:
          type: integer
          format: int32
        base64Variant:
          $ref: '#/components/schemas/Base64Variant'
        arrayBuilders:
          $ref: '#/components/schemas/ArrayBuilders'
    DeserializerFactory:
      type: object
    DispatchRateImpl:
      type: object
      properties:
        dispatchThrottlingRateInMsg:
          type: integer
          format: int32
        dispatchThrottlingRateInByte:
          type: integer
          format: int64
        relativeToPublishRate:
          type: boolean
        ratePeriodInSecond:
          type: integer
          format: int32
    DoubleBuilder:
      type: object
    EntryFilters:
      type: object
      properties:
        entryFilterNames:
          type: string
    FailureDomain:
      type: object
      properties:
        brokers:
          uniqueItems: true
          type: array
          description: The collection of brokers in the same failure domain
          example: '[ ''broker-1'', ''broker-2'' ]'
          items:
            type: string
      description: The data of a failure domain configuration in a cluster
    FilterProvider:
      type: object
    FloatBuilder:
      type: object
    FormatSchema:
      type: object
      properties:
        schemaType:
          type: string
    FunctionInstanceStatsData:
      type: object
      properties:
        lastInvocation:
          type: integer
          format: int64
        oneMin:
          $ref: '#/components/schemas/FunctionInstanceStatsDataBase'
        userMetrics:
          type: object
          additionalProperties:
            type: number
            format: double
        avgProcessLatency:
          type: number
          format: double
        receivedTotal:
          type: integer
          format: int64
        processedSuccessfullyTotal:
          type: integer
          format: int64
        systemExceptionsTotal:
          type: integer
          format: int64
        userExceptionsTotal:
          type: integer
          format: int64
    FunctionInstanceStatsDataBase:
      type: object
      properties:
        avgProcessLatency:
          type: number
          format: double
        receivedTotal:
          type: integer
          format: int64
        processedSuccessfullyTotal:
          type: integer
          format: int64
        systemExceptionsTotal:
          type: integer
          format: int64
        userExceptionsTotal:
          type: integer
          format: int64
    Functions:
      type: object
      properties:
        listOfConnectors:
          type: array
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
    FunctionsV2:
      type: object
      properties:
        listOfConnectors:
          type: array
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
    FunctionsV2WorkerService:
      type: object
      properties:
        listOfConnectors:
          type: array
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
    FunctionsWorkerService:
      type: object
      properties:
        listOfConnectors:
          type: array
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
    GetAllVersionsSchemaResponse:
      type: object
      properties:
        getSchemaResponses:
          type: array
          items:
            $ref: '#/components/schemas/GetSchemaResponse'
    GetSchemaResponse:
      type: object
      properties:
        version:
          type: integer
          format: int64
        type:
          type: string
          enum:
          - NONE
          - STRING
          - JSON
          - PROTOBUF
          - AVRO
          - BOOLEAN
          - INT8
          - INT16
          - INT32
          - INT64
          - FLOAT
          - DOUBLE
          - DATE
          - TIME
          - TIMESTAMP
          - KEY_VALUE
          - INSTANT
          - LOCAL_DATE
          - LOCAL_TIME
          - LOCAL_DATE_TIME
          - PROTOBUF_NATIVE
          - BYTES
          - AUTO
          - AUTO_CONSUME
          - AUTO_PUBLISH
        timestamp:
          type: integer
          format: int64
        data:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
    HandlerInstantiator:
      type: object
    InactiveTopicPolicies:
      type: object
      properties:
        inactiveTopicDeleteMode:
          type: string
          enum:
          - delete_when_no_subscriptions
          - delete_when_subscriptions_caught_up
        maxInactiveDurationSeconds:
          type: integer
          format: int32
        deleteWhileInactive:
          type: boolean
    InjectableValues:
      type: object
    InputDecorator:
      type: object
    IntBuilder:
      type: object
    InternalConfigurationData:
      type: object
      properties:
        metadataStoreUrl:
          type: string
        configurationMetadataStoreUrl:
          type: string
        ledgersRootPath:
          type: string
        bookkeeperMetadataServiceUri:
          type: string
        stateStorageServiceUrl:
          type: string
    IsCompatibilityResponse:
      type: object
      properties:
        schemaCompatibilityStrategy:
          type: string
        compatibility:
          type: boolean
    JavaType:
      type: object
      properties:
        interface:
          type: boolean
        primitive:
          type: boolean
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/JavaType'
        genericSignature:
          type: string
        final:
          type: boolean
        abstract:
          type: boolean
        bindings:
          $ref: '#/components/schemas/TypeBindings'
        concrete:
          type: boolean
        keyType:
          $ref: '#/components/schemas/JavaType'
        arrayType:
          type: boolean
        throwable:
          type: boolean
        javaLangObject:
          type: boolean
        enumType:
          type: boolean
        containerType:
          type: boolean
        valueHandler:
          type: object
          properties: {}
        typeHandler:
          type: object
          properties: {}
        referencedType:
          $ref: '#/components/schemas/JavaType'
        superClass:
          $ref: '#/components/schemas/JavaType'
        contentValueHandler:
          type: object
          properties: {}
        contentTypeHandler:
          type: object
          properties: {}
        erasedSignature:
          type: string
        collectionLikeType:
          type: boolean
        mapLikeType:
          type: boolean
        contentType:
          $ref: '#/components/schemas/JavaType'
        typeName:
          type: string
        referenceType:
          type: boolean
    JsonFactory:
      type: object
      properties:
        inputDecorator:
          $ref: '#/components/schemas/InputDecorator'
        characterEscapes:
          $ref: '#/components/schemas/CharacterEscapes'
        outputDecorator:
          $ref: '#/components/schemas/OutputDecorator'
        rootValueSeparator:
          type: string
        codec:
          $ref: '#/components/schemas/ObjectCodec'
        formatName:
          type: string
    JsonGenerator:
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/FormatSchema'
        characterEscapes:
          $ref: '#/components/schemas/CharacterEscapes'
        codec:
          $ref: '#/components/schemas/ObjectCodec'
        prettyPrinter:
          $ref: '#/components/schemas/PrettyPrinter'
        currentValue:
          type: object
          properties: {}
        featureMask:
          type: integer
          format: int32
        formatFeatures:
          type: integer
          format: int32
        highestEscapedChar:
          type: integer
          format: int32
        outputTarget:
          type: object
          properties: {}
        outputBuffered:
          type: integer
          format: int32
        outputContext:
          $ref: '#/components/schemas/JsonStreamContext'
        closed:
          type: boolean
    JsonLocation:
      type: object
      properties:
        byteOffset:
          type: integer
          format: int64
        sourceRef:
          type: object
          properties: {}
        lineNr:
          type: integer
          format: int32
        columnNr:
          type: integer
          format: int32
        charOffset:
          type: integer
          format: int64
    JsonNodeFactory:
      type: object
    JsonParser:
      type: object
      properties:
        textLength:
          type: integer
          format: int32
        text:
          type: string
        textCharacters:
          type: array
          items:
            type: string
        booleanValue:
          type: boolean
        byteValue:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        doubleValue:
          type: number
          format: double
        floatValue:
          type: number
          format: float
        longValue:
          type: integer
          format: int64
        shortValue:
          type: integer
          format: int32
        objectId:
          type: object
          properties: {}
        intValue:
          type: integer
          format: int32
        typeId:
          type: object
          properties: {}
        schema:
          $ref: '#/components/schemas/FormatSchema'
        codec:
          $ref: '#/components/schemas/ObjectCodec'
        currentToken:
          type: string
          enum:
          - NOT_AVAILABLE
          - START_OBJECT
          - END_OBJECT
          - START_ARRAY
          - END_ARRAY
          - FIELD_NAME
          - VALUE_EMBEDDED_OBJECT
          - VALUE_STRING
          - VALUE_NUMBER_INT
          - VALUE_NUMBER_FLOAT
          - VALUE_TRUE
          - VALUE_FALSE
          - VALUE_NULL
        currentName:
          type: string
        tokenLocation:
          $ref: '#/components/schemas/JsonLocation'
        inputSource:
          type: object
          properties: {}
        currentValue:
          type: object
          properties: {}
        featureMask:
          type: integer
          format: int32
        formatFeatures:
          type: integer
          format: int32
        valueAsLong:
          type: integer
          format: int64
        valueAsDouble:
          type: number
          format: double
        valueAsBoolean:
          type: boolean
        valueAsString:
          type: string
        currentTokenId:
          type: integer
          format: int32
        parsingContext:
          $ref: '#/components/schemas/JsonStreamContext'
        currentLocation:
          $ref: '#/components/schemas/JsonLocation'
        expectedStartArrayToken:
          type: boolean
        expectedStartObjectToken:
          type: boolean
        lastClearedToken:
          type: string
          enum:
          - NOT_AVAILABLE
          - START_OBJECT
          - END_OBJECT
          - START_ARRAY
          - END_ARRAY
          - FIELD_NAME
          - VALUE_EMBEDDED_OBJECT
          - VALUE_STRING
          - VALUE_NUMBER_INT
          - VALUE_NUMBER_FLOAT
          - VALUE_TRUE
          - VALUE_FALSE
          - VALUE_NULL
        textOffset:
          type: integer
          format: int32
        numberValue:
          $ref: '#/components/schemas/Number'
        numberType:
          type: string
          enum:
          - INT
          - LONG
          - BIG_INTEGER
          - FLOAT
          - DOUBLE
          - BIG_DECIMAL
        bigIntegerValue:
          type: integer
        decimalValue:
          type: number
        embeddedObject:
          type: object
          properties: {}
        binaryValue:
          type: array
          items:
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
            format: byte
        valueAsInt:
          type: integer
          format: int32
        closed:
          type: boolean
    JsonSerializer:
      type: object
      properties:
        unwrappingSerializer:
          type: boolean
    JsonSerializerObject:
      type: object
      properties:
        delegatee:
          $ref: '#/components/schemas/JsonSerializerObject'
        unwrappingSerializer:
          type: boolean
    JsonStreamContext:
      type: object
      properties:
        parent:
          $ref: '#/components/schemas/JsonStreamContext'
        currentName:
          type: string
        currentValue:
          type: object
          properties: {}
        entryCount:
          type: integer
          format: int32
        typeDesc:
          type: string
        currentIndex:
          type: integer
          format: int32
    KubernetesContainerFactory:
      type: object
      properties:
        k8Uri:
          type: string
        jobNamespace:
          type: string
        jobName:
          type: string
        pulsarDockerImageName:
          type: string
        functionDockerImages:
          type: object
          additionalProperties:
            type: string
        imagePullPolicy:
          type: string
        pulsarRootDir:
          type: string
        configAdminCLI:
          type: string
        submittingInsidePod:
          type: boolean
        pulsarServiceUrl:
          type: string
        pulsarAdminUrl:
          type: string
        installUserCodeDependencies:
          type: boolean
        pythonDependencyRepository:
          type: string
        pythonExtraDependencyRepository:
          type: string
        extraFunctionDependenciesDir:
          type: string
        customLabels:
          type: object
          additionalProperties:
            type: string
        expectedMetricsCollectionInterval:
          type: integer
          format: int32
        changeConfigMap:
          type: string
        changeConfigMapNamespace:
          type: string
        percentMemoryPadding:
          type: integer
          format: int32
        cpuOverCommitRatio:
          type: number
          format: double
        memoryOverCommitRatio:
          type: number
          format: double
        grpcPort:
          type: integer
          format: int32
        metricsPort:
          type: integer
          format: int32
        narExtractionDirectory:
          type: string
        functionInstanceClassPath:
          type: string
        gracePeriodSeconds:
          type: integer
          format: int32
    LinkedNode:
      type: object
    LinkedNodeDeserializationProblemHandler:
      type: object
    LoadReport:
      type: object
      properties:
        name:
          type: string
        brokerVersionString:
          type: string
        webServiceUrl:
          type: string
        webServiceUrlTls:
          type: string
        pulsarServiceUrl:
          type: string
        pulsarServiceUrlTls:
          type: string
        persistentTopicsEnabled:
          type: boolean
        nonPersistentTopicsEnabled:
          type: boolean
        timestamp:
          type: integer
          format: int64
        msgRateIn:
          type: number
          format: double
        msgRateOut:
          type: number
          format: double
        numTopics:
          type: integer
          format: int32
        numConsumers:
          type: integer
          format: int32
        numProducers:
          type: integer
          format: int32
        numBundles:
          type: integer
          format: int32
        protocols:
          type: object
          additionalProperties:
            type: string
        systemResourceUsage:
          $ref: '#/components/schemas/SystemResourceUsage'
        bundleStats:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NamespaceBundleStats'
        bundleGains:
          uniqueItems: true
          type: array
          items:
            type: string
        bundleLosses:
          uniqueItems: true
          type: array
          items:
            type: string
        allocatedCPU:
          type: number
          format: double
        allocatedMemory:
          type: number
          format: double
        allocatedBandwidthIn:
          type: number
          format: double
        allocatedBandwidthOut:
          type: number
          format: double
        allocatedMsgRateIn:
          type: number
          format: double
        allocatedMsgRateOut:
          type: number
          format: double
        preAllocatedCPU:
          type: number
          format: double
        preAllocatedMemory:
          type: number
          format: double
        preAllocatedBandwidthIn:
          type: number
          format: double
        preAllocatedBandwidthOut:
          type: number
          format: double
        preAllocatedMsgRateIn:
          type: number
          format: double
        preAllocatedMsgRateOut:
          type: number
          format: double
        cpu:
          $ref: '#/components/schemas/ResourceUsage'
        memory:
          $ref: '#/components/schemas/ResourceUsage'
        directMemory:
          $ref: '#/components/schemas/ResourceUsage'
        bandwidthIn:
          $ref: '#/components/schemas/ResourceUsage'
        bandwidthOut:
          $ref: '#/components/schemas/ResourceUsage'
        lastUpdate:
          type: integer
          format: int64
        underLoaded:
          type: boolean
        overLoaded:
          type: boolean
        loadReportType:
          type: string
        msgThroughputIn:
          type: number
          format: double
        msgThroughputOut:
          type: number
          format: double
    Locale:
      type: object
      properties:
        language:
          type: string
        script:
          type: string
        variant:
          type: string
        displayName:
          type: string
        country:
          type: string
        unicodeLocaleAttributes:
          uniqueItems: true
          type: array
          items:
            type: string
        unicodeLocaleKeys:
          uniqueItems: true
          type: array
          items:
            type: string
        displayLanguage:
          type: string
        displayScript:
          type: string
        displayCountry:
          type: string
        displayVariant:
          type: string
        extensionKeys:
          uniqueItems: true
          type: array
          items:
            type: string
        iso3Language:
          type: string
        iso3Country:
          type: string
    LongBuilder:
      type: object
    LongRunningProcessStatus:
      type: object
      properties:
        status:
          type: string
          enum:
          - NOT_RUN
          - RUNNING
          - SUCCESS
          - ERROR
        lastError:
          type: string
    LongSchemaVersion:
      type: object
      properties:
        version:
          type: integer
          format: int64
    MemoryLimit:
      type: object
      properties:
        absoluteValue:
          type: integer
          format: int64
        percentOfMaxDirectMemory:
          type: number
          format: double
    Metrics:
      type: object
      properties:
        metrics:
          type: object
          additionalProperties:
            type: object
            properties: {}
        dimensions:
          type: object
          additionalProperties:
            type: string
    Module:
      type: object
      properties:
        name:
          type: string
        classLoader:
          $ref: '#/components/schemas/ClassLoader'
        descriptor:
          $ref: '#/components/schemas/ModuleDescriptor'
        named:
          type: boolean
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        declaredAnnotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        packages:
          uniqueItems: true
          type: array
          items:
            type: string
        layer:
          $ref: '#/components/schemas/ModuleLayer'
    ModuleDescriptor:
      type: object
      properties:
        open:
          type: boolean
        automatic:
          type: boolean
    ModuleLayer:
      type: object
    NamespaceBundleStats:
      type: object
      properties:
        msgRateIn:
          type: number
          format: double
        msgThroughputIn:
          type: number
          format: double
        msgRateOut:
          type: number
          format: double
        msgThroughputOut:
          type: number
          format: double
        consumerCount:
          type: integer
          format: int32
        producerCount:
          type: integer
          format: int32
        topics:
          type: integer
          format: int64
        cacheSize:
          type: integer
          format: int64
    NamespaceIsolationData:
      type: object
      properties:
        namespaces:
          type: array
          description: The list of namespaces to apply this namespace isolation data
          items:
            type: string
        primary:
          type: array
          description: The list of primary brokers for serving the list of namespaces
            in this isolation policy
          items:
            type: string
        secondary:
          type: array
          description: The list of secondary brokers for serving the list of namespaces
            in this isolation policy
          items:
            type: string
        auto_failover_policy:
          $ref: '#/components/schemas/AutoFailoverPolicyData'
      description: The data of namespace isolation configuration
    NamespaceOwnershipStatus:
      type: object
      properties:
        broker_assignment:
          type: string
          enum:
          - primary
          - secondary
          - shared
        is_controlled:
          type: boolean
        is_active:
          type: boolean
    Number:
      type: object
    NumberFormat:
      type: object
      properties:
        groupingUsed:
          type: boolean
        parseIntegerOnly:
          type: boolean
        maximumIntegerDigits:
          type: integer
          format: int32
        minimumIntegerDigits:
          type: integer
          format: int32
        maximumFractionDigits:
          type: integer
          format: int32
        minimumFractionDigits:
          type: integer
          format: int32
        roundingMode:
          type: string
          enum:
          - UP
          - DOWN
          - CEILING
          - FLOOR
          - HALF_UP
          - HALF_DOWN
          - HALF_EVEN
          - UNNECESSARY
        currency:
          $ref: '#/components/schemas/Currency'
    ObjectCodec:
      type: object
      properties:
        factory:
          $ref: '#/components/schemas/JsonFactory'
        jsonFactory:
          $ref: '#/components/schemas/JsonFactory'
    ObjectMapper:
      type: object
      properties:
        factory:
          $ref: '#/components/schemas/JsonFactory'
        typeFactory:
          $ref: '#/components/schemas/TypeFactory'
        serializationConfig:
          $ref: '#/components/schemas/SerializationConfig'
        deserializationConfig:
          $ref: '#/components/schemas/DeserializationConfig'
        deserializationContext:
          $ref: '#/components/schemas/DeserializationContext'
        serializerFactory:
          $ref: '#/components/schemas/SerializerFactory'
        serializerProvider:
          $ref: '#/components/schemas/SerializerProvider'
        serializerProviderInstance:
          $ref: '#/components/schemas/SerializerProvider'
        visibilityChecker:
          $ref: '#/components/schemas/VisibilityCheckerObject'
        subtypeResolver:
          $ref: '#/components/schemas/SubtypeResolver'
        propertyNamingStrategy:
          $ref: '#/components/schemas/PropertyNamingStrategy'
        nodeFactory:
          $ref: '#/components/schemas/JsonNodeFactory'
        jsonFactory:
          $ref: '#/components/schemas/JsonFactory'
        dateFormat:
          $ref: '#/components/schemas/DateFormat'
        injectableValues:
          $ref: '#/components/schemas/InjectableValues'
    OffloadPolicies:
      type: object
      properties:
        managedLedgerOffloadedReadPriority:
          type: string
          enum:
          - BOOKKEEPER_FIRST
          - TIERED_STORAGE_FIRST
        managedLedgerOffloadBucket:
          type: string
        managedLedgerOffloadRegion:
          type: string
        managedLedgerOffloadServiceEndpoint:
          type: string
        managedLedgerOffloadMaxBlockSizeInBytes:
          type: integer
          format: int32
        managedLedgerOffloadReadBufferSizeInBytes:
          type: integer
          format: int32
        s3ManagedLedgerOffloadCredentialSecret:
          type: string
        s3ManagedLedgerOffloadRole:
          type: string
        s3ManagedLedgerOffloadRoleSessionName:
          type: string
        s3ManagedLedgerOffloadReadBufferSizeInBytes:
          type: integer
          format: int32
        gcsManagedLedgerOffloadRegion:
          type: string
        gcsManagedLedgerOffloadBucket:
          type: string
        gcsManagedLedgerOffloadMaxBlockSizeInBytes:
          type: integer
          format: int32
        gcsManagedLedgerOffloadReadBufferSizeInBytes:
          type: integer
          format: int32
        gcsManagedLedgerOffloadServiceAccountKeyFile:
          type: string
        fileSystemProfilePath:
          type: string
        fileSystemURI:
          type: string
        s3ManagedLedgerOffloadBucket:
          type: string
        s3ManagedLedgerOffloadServiceEndpoint:
          type: string
        s3ManagedLedgerOffloadMaxBlockSizeInBytes:
          type: integer
          format: int32
        s3ManagedLedgerOffloadCredentialId:
          type: string
        offloadersDirectory:
          type: string
        managedLedgerOffloadDriver:
          type: string
        managedLedgerOffloadMaxThreads:
          type: integer
          format: int32
        managedLedgerOffloadPrefetchRounds:
          type: integer
          format: int32
        s3ManagedLedgerOffloadRegion:
          type: string
        managedLedgerOffloadDeletionLagInMillis:
          type: integer
          format: int64
        managedLedgerOffloadThresholdInBytes:
          type: integer
          format: int64
    OffloadPoliciesImpl:
      type: object
      properties:
        offloadersDirectory:
          type: string
        managedLedgerOffloadDriver:
          type: string
        managedLedgerOffloadMaxThreads:
          type: integer
          format: int32
        managedLedgerOffloadPrefetchRounds:
          type: integer
          format: int32
        managedLedgerOffloadThresholdInBytes:
          type: integer
          format: int64
        managedLedgerOffloadDeletionLagInMillis:
          type: integer
          format: int64
        managedLedgerOffloadedReadPriority:
          type: string
          enum:
          - BOOKKEEPER_FIRST
          - TIERED_STORAGE_FIRST
        s3ManagedLedgerOffloadRegion:
          type: string
        s3ManagedLedgerOffloadBucket:
          type: string
        s3ManagedLedgerOffloadServiceEndpoint:
          type: string
        s3ManagedLedgerOffloadMaxBlockSizeInBytes:
          type: integer
          format: int32
        s3ManagedLedgerOffloadReadBufferSizeInBytes:
          type: integer
          format: int32
        s3ManagedLedgerOffloadCredentialId:
          type: string
        s3ManagedLedgerOffloadCredentialSecret:
          type: string
        s3ManagedLedgerOffloadRole:
          type: string
        s3ManagedLedgerOffloadRoleSessionName:
          type: string
        gcsManagedLedgerOffloadRegion:
          type: string
        gcsManagedLedgerOffloadBucket:
          type: string
        gcsManagedLedgerOffloadMaxBlockSizeInBytes:
          type: integer
          format: int32
        gcsManagedLedgerOffloadReadBufferSizeInBytes:
          type: integer
          format: int32
        gcsManagedLedgerOffloadServiceAccountKeyFile:
          type: string
        fileSystemProfilePath:
          type: string
        fileSystemURI:
          type: string
        managedLedgerOffloadBucket:
          type: string
        managedLedgerOffloadRegion:
          type: string
        managedLedgerOffloadServiceEndpoint:
          type: string
        managedLedgerOffloadMaxBlockSizeInBytes:
          type: integer
          format: int32
        managedLedgerOffloadReadBufferSizeInBytes:
          type: integer
          format: int32
        gcsDriver:
          type: boolean
        fileSystemDriver:
          type: boolean
        s3Driver:
          type: boolean
    OutputDecorator:
      type: object
    OutputStream:
      type: object
    Package:
      type: object
      properties:
        name:
          type: string
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        declaredAnnotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        sealed:
          type: boolean
        specificationTitle:
          type: string
        specificationVersion:
          type: string
        specificationVendor:
          type: string
        implementationTitle:
          type: string
        implementationVersion:
          type: string
        implementationVendor:
          type: string
    PartitionedTopicMetadata:
      type: object
      properties:
        partitions:
          type: integer
          format: int32
        properties:
          type: object
          additionalProperties:
            type: string
    PendingBookieOpsStats:
      type: object
      properties:
        dataLedgerOpenOp:
          type: integer
          format: int64
        dataLedgerCloseOp:
          type: integer
          format: int64
        dataLedgerCreateOp:
          type: integer
          format: int64
        dataLedgerDeleteOp:
          type: integer
          format: int64
        cursorLedgerOpenOp:
          type: integer
          format: int64
        cursorLedgerCloseOp:
          type: integer
          format: int64
        cursorLedgerCreateOp:
          type: integer
          format: int64
        cursorLedgerDeleteOp:
          type: integer
          format: int64
    PersistencePolicies:
      type: object
      properties:
        bookkeeperEnsemble:
          type: integer
          format: int32
        bookkeeperWriteQuorum:
          type: integer
          format: int32
        bookkeeperAckQuorum:
          type: integer
          format: int32
        managedLedgerMaxMarkDeleteRate:
          type: number
          format: double
    Policies:
      type: object
      properties:
        auth_policies:
          $ref: '#/components/schemas/AuthPolicies'
        replication_clusters:
          uniqueItems: true
          type: array
          items:
            type: string
        bundles:
          $ref: '#/components/schemas/BundlesData'
        backlog_quota_map:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/BacklogQuota'
        clusterDispatchRate:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DispatchRateImpl'
        topicDispatchRate:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DispatchRateImpl'
        subscriptionDispatchRate:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DispatchRateImpl'
        replicatorDispatchRate:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DispatchRateImpl'
        clusterSubscribeRate:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SubscribeRate'
        persistence:
          $ref: '#/components/schemas/PersistencePolicies'
        deduplicationEnabled:
          type: boolean
        autoTopicCreationOverride:
          $ref: '#/components/schemas/AutoTopicCreationOverride'
        autoSubscriptionCreationOverride:
          $ref: '#/components/schemas/AutoSubscriptionCreationOverride'
        publishMaxMessageRate:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PublishRate'
        latency_stats_sample_rate:
          type: object
          additionalProperties:
            type: integer
            format: int32
        message_ttl_in_seconds:
          type: integer
          format: int32
        subscription_expiration_time_minutes:
          type: integer
          format: int32
        retention_policies:
          $ref: '#/components/schemas/RetentionPolicies'
        deleted:
          type: boolean
        encryption_required:
          type: boolean
        delayed_delivery_policies:
          $ref: '#/components/schemas/DelayedDeliveryPolicies'
        inactive_topic_policies:
          $ref: '#/components/schemas/InactiveTopicPolicies'
        subscription_auth_mode:
          type: string
          enum:
          - None
          - Prefix
        max_producers_per_topic:
          type: integer
          format: int32
        max_consumers_per_topic:
          type: integer
          format: int32
        max_consumers_per_subscription:
          type: integer
          format: int32
        max_unacked_messages_per_consumer:
          type: integer
          format: int32
        max_unacked_messages_per_subscription:
          type: integer
          format: int32
        max_subscriptions_per_topic:
          type: integer
          format: int32
        compaction_threshold:
          type: integer
          format: int64
        offload_threshold:
          type: integer
          format: int64
        offload_deletion_lag_ms:
          type: integer
          format: int64
        max_topics_per_namespace:
          type: integer
          format: int32
        schema_auto_update_compatibility_strategy:
          type: string
          enum:
          - AutoUpdateDisabled
          - Backward
          - Forward
          - Full
          - AlwaysCompatible
          - BackwardTransitive
          - ForwardTransitive
          - FullTransitive
        schema_compatibility_strategy:
          type: string
          enum:
          - UNDEFINED
          - ALWAYS_INCOMPATIBLE
          - ALWAYS_COMPATIBLE
          - BACKWARD
          - FORWARD
          - FULL
          - BACKWARD_TRANSITIVE
          - FORWARD_TRANSITIVE
          - FULL_TRANSITIVE
        is_allow_auto_update_schema:
          type: boolean
        schema_validation_enforced:
          type: boolean
        offload_policies:
          $ref: '#/components/schemas/OffloadPolicies'
        deduplicationSnapshotIntervalSeconds:
          type: integer
          format: int32
        subscription_types_enabled:
          uniqueItems: true
          type: array
          items:
            type: string
        properties:
          type: object
          additionalProperties:
            type: string
        resource_group_name:
          type: string
        entryFilters:
          $ref: '#/components/schemas/EntryFilters'
    PoolArenaStats:
      type: object
      properties:
        numSmallSubpages:
          type: integer
          format: int32
        numChunkLists:
          type: integer
          format: int32
        smallSubpages:
          type: array
          items:
            $ref: '#/components/schemas/PoolSubpageStats'
        chunkLists:
          type: array
          items:
            $ref: '#/components/schemas/PoolChunkListStats'
        numAllocations:
          type: integer
          format: int64
        numSmallAllocations:
          type: integer
          format: int64
        numNormalAllocations:
          type: integer
          format: int64
        numHugeAllocations:
          type: integer
          format: int64
        numDeallocations:
          type: integer
          format: int64
        numSmallDeallocations:
          type: integer
          format: int64
        numNormalDeallocations:
          type: integer
          format: int64
        numHugeDeallocations:
          type: integer
          format: int64
        numActiveAllocations:
          type: integer
          format: int64
        numActiveSmallAllocations:
          type: integer
          format: int64
        numActiveNormalAllocations:
          type: integer
          format: int64
        numActiveHugeAllocations:
          type: integer
          format: int64
    PoolChunkListStats:
      type: object
      properties:
        minUsage:
          type: integer
          format: int32
        maxUsage:
          type: integer
          format: int32
        chunks:
          type: array
          items:
            $ref: '#/components/schemas/PoolChunkStats'
    PoolChunkStats:
      type: object
      properties:
        usage:
          type: integer
          format: int32
        chunkSize:
          type: integer
          format: int32
        freeBytes:
          type: integer
          format: int32
    PoolSubpageStats:
      type: object
      properties:
        maxNumElements:
          type: integer
          format: int32
        numAvailable:
          type: integer
          format: int32
        elementSize:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
    PostSchemaPayload:
      type: object
      properties:
        type:
          type: string
        schema:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
    PostSchemaSuccessResponse:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/SchemaVersion'
    PrettyPrinter:
      type: object
    ProcessContainerFactory:
      type: object
      properties:
        javaInstanceJarLocation:
          type: string
        pythonInstanceLocation:
          type: string
        logDirectory:
          type: string
        extraFunctionDependenciesDir:
          type: string
    PropertyName:
      type: object
      properties:
        empty:
          type: boolean
        simpleName:
          type: string
        namespace:
          type: string
    PropertyNamingStrategy:
      type: object
    PublicKey:
      type: object
      properties:
        encoded:
          type: array
          items:
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
            format: byte
        format:
          type: string
        algorithm:
          type: string
    PublishRate:
      type: object
      properties:
        publishThrottlingRateInMsg:
          type: integer
          format: int32
        publishThrottlingRateInByte:
          type: integer
          format: int64
    RawBookieInfo:
      type: object
      properties:
        bookieId:
          type: string
    ResetCursorData:
      type: object
      properties:
        ledgerId:
          type: integer
          format: int64
        entryId:
          type: integer
          format: int64
        partitionIndex:
          type: integer
          format: int32
        batchIndex:
          type: integer
          format: int32
        properties:
          type: object
          additionalProperties:
            type: string
        excluded:
          type: boolean
    ResourceDescription:
      type: object
      properties:
        usagePct:
          type: integer
          format: int32
        resourceUsage:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResourceUsage'
    ResourceGroup:
      type: object
      properties:
        publishRateInMsgs:
          type: integer
          format: int32
        publishRateInBytes:
          type: integer
          format: int64
        dispatchRateInMsgs:
          type: integer
          format: int32
        dispatchRateInBytes:
          type: integer
          format: int64
    ResourceQuota:
      type: object
      properties:
        msgRateIn:
          type: number
          format: double
        msgRateOut:
          type: number
          format: double
        bandwidthIn:
          type: number
          format: double
        bandwidthOut:
          type: number
          format: double
        memory:
          type: number
          format: double
        dynamic:
          type: boolean
    ResourceUnit:
      type: object
      properties:
        availableResource:
          $ref: '#/components/schemas/ResourceDescription'
        resourceId:
          type: string
    ResourceUsage:
      type: object
      properties:
        usage:
          type: number
          format: double
        limit:
          type: number
          format: double
    Resources:
      type: object
      properties:
        cpu:
          type: number
          format: double
        ram:
          type: integer
          format: int64
        disk:
          type: integer
          format: int64
    RetentionPolicies:
      type: object
      properties:
        retentionTimeInMinutes:
          type: integer
          format: int32
        retentionSizeInMB:
          type: integer
          format: int64
    SchemaVersion:
      type: object
    SerializationConfig:
      type: object
      properties:
        annotationIntrospector:
          $ref: '#/components/schemas/AnnotationIntrospector'
        defaultPropertyInclusion:
          $ref: '#/components/schemas/Value'
        filterProvider:
          $ref: '#/components/schemas/FilterProvider'
        defaultPrettyPrinter:
          $ref: '#/components/schemas/PrettyPrinter'
        serializationInclusion:
          type: string
          enum:
          - ALWAYS
          - NON_NULL
          - NON_ABSENT
          - NON_EMPTY
          - NON_DEFAULT
          - USE_DEFAULTS
        serializationFeatures:
          type: integer
          format: int32
        attributes:
          $ref: '#/components/schemas/ContextAttributes'
        rootName:
          type: string
        subtypeResolver:
          $ref: '#/components/schemas/SubtypeResolver'
        fullRootName:
          $ref: '#/components/schemas/PropertyName'
        defaultVisibilityChecker:
          $ref: '#/components/schemas/VisibilityCheckerObject'
        locale:
          $ref: '#/components/schemas/Locale'
        timeZone:
          $ref: '#/components/schemas/TimeZone'
        typeFactory:
          $ref: '#/components/schemas/TypeFactory'
        propertyNamingStrategy:
          $ref: '#/components/schemas/PropertyNamingStrategy'
        handlerInstantiator:
          $ref: '#/components/schemas/HandlerInstantiator'
        dateFormat:
          $ref: '#/components/schemas/DateFormat'
        base64Variant:
          $ref: '#/components/schemas/Base64Variant'
        annotationProcessingEnabled:
          type: boolean
        classIntrospector:
          $ref: '#/components/schemas/ClassIntrospector'
    SerializerFactory:
      type: object
    SerializerProvider:
      type: object
      properties:
        locale:
          $ref: '#/components/schemas/Locale'
        timeZone:
          $ref: '#/components/schemas/TimeZone'
        config:
          $ref: '#/components/schemas/SerializationConfig'
        typeFactory:
          $ref: '#/components/schemas/TypeFactory'
        annotationIntrospector:
          $ref: '#/components/schemas/AnnotationIntrospector'
        defaultNullValueSerializer:
          $ref: '#/components/schemas/JsonSerializerObject'
        filterProvider:
          $ref: '#/components/schemas/FilterProvider'
        defaultNullKeySerializer:
          $ref: '#/components/schemas/JsonSerializerObject'
        generator:
          $ref: '#/components/schemas/JsonGenerator'
    ShortBuilder:
      type: object
    Sinks:
      type: object
      properties:
        sinkList:
          type: array
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
        listOfConnectors:
          type: array
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
    SinksWorkerService:
      type: object
      properties:
        sinkList:
          type: array
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
        listOfConnectors:
          type: array
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
    SocketAddress:
      type: object
    Sources:
      type: object
      properties:
        sourceList:
          type: array
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
        listOfConnectors:
          type: array
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
    SourcesWorkerService:
      type: object
      properties:
        sourceList:
          type: array
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
        listOfConnectors:
          type: array
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
    SubscribeRate:
      type: object
      properties:
        subscribeThrottlingRatePerConsumer:
          type: integer
          format: int32
        ratePeriodInSecond:
          type: integer
          format: int32
    SubtypeResolver:
      type: object
    SystemResourceUsage:
      type: object
      properties:
        bandwidthIn:
          $ref: '#/components/schemas/ResourceUsage'
        bandwidthOut:
          $ref: '#/components/schemas/ResourceUsage'
        cpu:
          $ref: '#/components/schemas/ResourceUsage'
        memory:
          $ref: '#/components/schemas/ResourceUsage'
        directMemory:
          $ref: '#/components/schemas/ResourceUsage'
    TenantInfo:
      type: object
      properties:
        adminRoles:
          uniqueItems: true
          type: array
          description: Comma separated list of auth principal allowed to administrate
            the tenant.
          items:
            type: string
        allowedClusters:
          uniqueItems: true
          type: array
          description: Comma separated allowed clusters.
          items:
            type: string
      description: Information of adminRoles and allowedClusters for tenant
    ThreadContainerFactory:
      type: object
      properties:
        threadGroupName:
          type: string
        pulsarClientMemoryLimit:
          $ref: '#/components/schemas/MemoryLimit'
    TimeZone:
      type: object
      properties:
        displayName:
          type: string
        id:
          type: string
        dstsavings:
          type: integer
          format: int32
        rawOffset:
          type: integer
          format: int32
    TypeBindings:
      type: object
      properties:
        empty:
          type: boolean
        typeParameters:
          type: array
          items:
            $ref: '#/components/schemas/JavaType'
    TypeFactory:
      type: object
      properties:
        classLoader:
          $ref: '#/components/schemas/ClassLoader'
    Value:
      type: object
      properties:
        contentInclusion:
          type: string
          enum:
          - ALWAYS
          - NON_NULL
          - NON_ABSENT
          - NON_EMPTY
          - NON_DEFAULT
          - USE_DEFAULTS
        valueInclusion:
          type: string
          enum:
          - ALWAYS
          - NON_NULL
          - NON_ABSENT
          - NON_EMPTY
          - NON_DEFAULT
          - USE_DEFAULTS
    VisibilityChecker:
      type: object
    VisibilityCheckerObject:
      type: object
    WorkerConfig:
      type: object
      properties:
        workerId:
          type: string
        workerHostname:
          type: string
        workerPort:
          type: integer
          format: int32
        workerPortTls:
          type: integer
          format: int32
        authenticateMetricsEndpoint:
          type: boolean
        includeStandardPrometheusMetrics:
          type: boolean
        jvmGCMetricsLoggerClassName:
          type: string
        numHttpServerThreads:
          type: integer
          format: int32
        httpRequestsLimitEnabled:
          type: boolean
        httpRequestsMaxPerSecond:
          type: number
          format: double
        maxConcurrentHttpRequests:
          type: integer
          format: int32
        httpServerThreadPoolQueueSize:
          type: integer
          format: int32
        httpServerAcceptQueueSize:
          type: integer
          format: int32
        maxHttpServerConnections:
          type: integer
          format: int32
        configurationStoreServers:
          type: string
        configurationMetadataStoreUrl:
          type: string
        metadataStoreSessionTimeoutMillis:
          type: integer
          format: int64
        metadataStoreOperationTimeoutSeconds:
          type: integer
          format: int32
        metadataStoreCacheExpirySeconds:
          type: integer
          format: int32
        zooKeeperSessionTimeoutMillis:
          type: integer
          format: int64
        zooKeeperOperationTimeoutSeconds:
          type: integer
          format: int32
        zooKeeperCacheExpirySeconds:
          type: integer
          format: int32
        connectorsDirectory:
          type: string
        narExtractionDirectory:
          type: string
        validateConnectorConfig:
          type: boolean
        uploadBuiltinSinksSources:
          type: boolean
        functionsDirectory:
          type: string
        functionMetadataTopicName:
          type: string
        useCompactedMetadataTopic:
          type: boolean
        functionWebServiceUrl:
          type: string
        pulsarServiceUrl:
          type: string
        pulsarWebServiceUrl:
          type: string
        clusterCoordinationTopicName:
          type: string
        pulsarFunctionsNamespace:
          type: string
        pulsarFunctionsCluster:
          type: string
        numFunctionPackageReplicas:
          type: integer
          format: int32
        functionsWorkerEnablePackageManagement:
          type: boolean
        downloadDirectory:
          type: string
        stateStorageServiceUrl:
          type: string
        stateStorageProviderImplementation:
          type: string
        functionAssignmentTopicName:
          type: string
        schedulerClassName:
          type: string
        failureCheckFreqMs:
          type: integer
          format: int64
        rescheduleTimeoutMs:
          type: integer
          format: int64
        rebalanceCheckFreqSec:
          type: integer
          format: int64
        workerListProbeIntervalSec:
          type: integer
          format: int32
        initialBrokerReconnectMaxRetries:
          type: integer
          format: int32
        assignmentWriteMaxRetries:
          type: integer
          format: int32
        instanceLivenessCheckFreqMs:
          type: integer
          format: int64
        brokerClientAuthenticationEnabled:
          type: boolean
        brokerClientAuthenticationPlugin:
          type: string
        brokerClientAuthenticationParameters:
          type: string
        bookkeeperClientAuthenticationPlugin:
          type: string
        bookkeeperClientAuthenticationParametersName:
          type: string
        bookkeeperClientAuthenticationParameters:
          type: string
        topicCompactionFrequencySec:
          type: integer
          format: int64
        tlsEnabled:
          type: boolean
        tlsCertificateFilePath:
          type: string
        tlsKeyFilePath:
          type: string
        tlsTrustCertsFilePath:
          type: string
        tlsAllowInsecureConnection:
          type: boolean
        tlsRequireTrustedClientCertOnConnect:
          type: boolean
        useTls:
          type: boolean
        tlsEnableHostnameVerification:
          type: boolean
        tlsCertRefreshCheckDurationSec:
          type: integer
          format: int64
        tlsEnabledWithKeyStore:
          type: boolean
        tlsProvider:
          type: string
        tlsKeyStoreType:
          type: string
        tlsKeyStore:
          type: string
        tlsKeyStorePassword:
          type: string
        tlsTrustStoreType:
          type: string
        tlsTrustStore:
          type: string
        tlsTrustStorePassword:
          type: string
        webServiceTlsProtocols:
          uniqueItems: true
          type: array
          items:
            type: string
        webServiceTlsCiphers:
          uniqueItems: true
          type: array
          items:
            type: string
        authenticationEnabled:
          type: boolean
        authenticationProviders:
          uniqueItems: true
          type: array
          items:
            type: string
        authorizationEnabled:
          type: boolean
        authorizationProvider:
          type: string
        superUserRoles:
          uniqueItems: true
          type: array
          items:
            type: string
        saslJaasClientAllowedIds:
          type: string
        saslJaasServerSectionName:
          type: string
        saslJaasServerRoleTokenSignerSecretPath:
          type: string
        kinitCommand:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
        initializedDlogMetadata:
          type: boolean
        brokerClientTrustCertsFilePath:
          type: string
        functionRuntimeFactoryClassName:
          type: string
        functionRuntimeFactoryConfigs:
          type: object
          additionalProperties:
            type: object
            properties: {}
        secretsProviderConfiguratorClassName:
          type: string
        secretsProviderConfiguratorConfig:
          type: object
          additionalProperties:
            type: string
        functionInstanceMinResources:
          $ref: '#/components/schemas/Resources'
        functionInstanceMaxResources:
          $ref: '#/components/schemas/Resources'
        functionInstanceResourceGranularities:
          $ref: '#/components/schemas/Resources'
        functionInstanceResourceChangeInLockStep:
          type: boolean
        functionAuthProviderClassName:
          type: string
        runtimeCustomizerClassName:
          type: string
        runtimeCustomizerConfig:
          type: object
          additionalProperties:
            type: object
            properties: {}
        maxPendingAsyncRequests:
          type: integer
          format: int32
        forwardSourceMessageProperty:
          type: boolean
        additionalJavaRuntimeArguments:
          type: array
          items:
            type: string
        functionsWorkerServiceNarPackage:
          type: string
        functionsWorkerServiceCustomConfigs:
          type: object
          additionalProperties:
            type: object
            properties: {}
        exposeAdminClientEnabled:
          type: boolean
        threadContainerFactory:
          $ref: '#/components/schemas/ThreadContainerFactory'
        processContainerFactory:
          $ref: '#/components/schemas/ProcessContainerFactory'
        kubernetesContainerFactory:
          $ref: '#/components/schemas/KubernetesContainerFactory'
        clientAuthenticationParameters:
          type: string
        clientAuthenticationPlugin:
          type: string
        functionMetadataTopic:
          type: string
        clusterCoordinationTopic:
          type: string
        functionAssignmentTopic:
          type: string
        tlsTrustChainBytes:
          type: array
          items:
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
            format: byte
        workerWebAddress:
          type: string
        workerWebAddressTls:
          type: string
    WorkerFunctionInstanceStats:
      type: object
      properties:
        name:
          type: string
        metrics:
          $ref: '#/components/schemas/FunctionInstanceStatsData'
    WorkerInfo:
      type: object
      properties:
        workerId:
          type: string
        workerHostname:
          type: string
        port:
          type: integer
          format: int32
    WorkerService:
      type: object
      properties:
        functions:
          $ref: '#/components/schemas/FunctionsWorkerService'
        sinks:
          $ref: '#/components/schemas/SinksWorkerService'
        sources:
          $ref: '#/components/schemas/SourcesWorkerService'
        initialized:
          type: boolean
        workerConfig:
          $ref: '#/components/schemas/WorkerConfig'
        functionsV2:
          $ref: '#/components/schemas/FunctionsV2WorkerService'
        workers:
          $ref: '#/components/schemas/WorkersWorkerService'
    Workers:
      type: object
    WorkersWorkerService:
      type: object
