// Code generated by MockGen. DO NOT EDIT.
// Source: cron.go

// Package mock_cron is a generated GoMock package.
package mock_cron

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cron "github.com/robfig/cron/v3"
)

// MockCronService is a mock of CronService interface.
type MockCronService struct {
	ctrl     *gomock.Controller
	recorder *MockCronServiceMockRecorder
}

// MockCronServiceMockRecorder is the mock recorder for MockCronService.
type MockCronServiceMockRecorder struct {
	mock *MockCronService
}

// NewMockCronService creates a new mock instance.
func NewMockCronService(ctrl *gomock.Controller) *MockCronService {
	mock := &MockCronService{ctrl: ctrl}
	mock.recorder = &MockCronServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCronService) EXPECT() *MockCronServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCronService) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockCronServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCronService)(nil).Close))
}

// GetCron mocks base method.
func (m *MockCronService) GetCron() *cron.Cron {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCron")
	ret0, _ := ret[0].(*cron.Cron)
	return ret0
}

// GetCron indicates an expected call of GetCron.
func (mr *MockCronServiceMockRecorder) GetCron() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCron", reflect.TypeOf((*MockCronService)(nil).GetCron))
}
