// Code generated by ent, DO NOT EDIT.

package repositories

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omiga-group/omiga/src/order/shared/models"
	"github.com/omiga-group/omiga/src/order/shared/repositories/orderbook"
)

// OrderBookCreate is the builder for creating a OrderBook entity.
type OrderBookCreate struct {
	config
	mutation *OrderBookMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetExchangeID sets the "exchange_id" field.
func (obc *OrderBookCreate) SetExchangeID(s string) *OrderBookCreate {
	obc.mutation.SetExchangeID(s)
	return obc
}

// SetLastUpdated sets the "last_updated" field.
func (obc *OrderBookCreate) SetLastUpdated(t time.Time) *OrderBookCreate {
	obc.mutation.SetLastUpdated(t)
	return obc
}

// SetOrderBook sets the "order_book" field.
func (obc *OrderBookCreate) SetOrderBook(mb models.OrderBook) *OrderBookCreate {
	obc.mutation.SetOrderBook(mb)
	return obc
}

// Mutation returns the OrderBookMutation object of the builder.
func (obc *OrderBookCreate) Mutation() *OrderBookMutation {
	return obc.mutation
}

// Save creates the OrderBook in the database.
func (obc *OrderBookCreate) Save(ctx context.Context) (*OrderBook, error) {
	var (
		err  error
		node *OrderBook
	)
	if len(obc.hooks) == 0 {
		if err = obc.check(); err != nil {
			return nil, err
		}
		node, err = obc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderBookMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = obc.check(); err != nil {
				return nil, err
			}
			obc.mutation = mutation
			if node, err = obc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(obc.hooks) - 1; i >= 0; i-- {
			if obc.hooks[i] == nil {
				return nil, fmt.Errorf("repositories: uninitialized hook (forgotten import repositories/runtime?)")
			}
			mut = obc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, obc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderBook)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderBookMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (obc *OrderBookCreate) SaveX(ctx context.Context) *OrderBook {
	v, err := obc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (obc *OrderBookCreate) Exec(ctx context.Context) error {
	_, err := obc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (obc *OrderBookCreate) ExecX(ctx context.Context) {
	if err := obc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (obc *OrderBookCreate) check() error {
	if _, ok := obc.mutation.ExchangeID(); !ok {
		return &ValidationError{Name: "exchange_id", err: errors.New(`repositories: missing required field "OrderBook.exchange_id"`)}
	}
	if _, ok := obc.mutation.LastUpdated(); !ok {
		return &ValidationError{Name: "last_updated", err: errors.New(`repositories: missing required field "OrderBook.last_updated"`)}
	}
	if _, ok := obc.mutation.OrderBook(); !ok {
		return &ValidationError{Name: "order_book", err: errors.New(`repositories: missing required field "OrderBook.order_book"`)}
	}
	return nil
}

func (obc *OrderBookCreate) sqlSave(ctx context.Context) (*OrderBook, error) {
	_node, _spec := obc.createSpec()
	if err := sqlgraph.CreateNode(ctx, obc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (obc *OrderBookCreate) createSpec() (*OrderBook, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderBook{config: obc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderbook.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderbook.FieldID,
			},
		}
	)
	_spec.Schema = obc.schemaConfig.OrderBook
	_spec.OnConflict = obc.conflict
	if value, ok := obc.mutation.ExchangeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderbook.FieldExchangeID,
		})
		_node.ExchangeID = value
	}
	if value, ok := obc.mutation.LastUpdated(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderbook.FieldLastUpdated,
		})
		_node.LastUpdated = value
	}
	if value, ok := obc.mutation.OrderBook(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: orderbook.FieldOrderBook,
		})
		_node.OrderBook = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderBook.Create().
//		SetExchangeID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderBookUpsert) {
//			SetExchangeID(v+v).
//		}).
//		Exec(ctx)
//
func (obc *OrderBookCreate) OnConflict(opts ...sql.ConflictOption) *OrderBookUpsertOne {
	obc.conflict = opts
	return &OrderBookUpsertOne{
		create: obc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderBook.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (obc *OrderBookCreate) OnConflictColumns(columns ...string) *OrderBookUpsertOne {
	obc.conflict = append(obc.conflict, sql.ConflictColumns(columns...))
	return &OrderBookUpsertOne{
		create: obc,
	}
}

type (
	// OrderBookUpsertOne is the builder for "upsert"-ing
	//  one OrderBook node.
	OrderBookUpsertOne struct {
		create *OrderBookCreate
	}

	// OrderBookUpsert is the "OnConflict" setter.
	OrderBookUpsert struct {
		*sql.UpdateSet
	}
)

// SetExchangeID sets the "exchange_id" field.
func (u *OrderBookUpsert) SetExchangeID(v string) *OrderBookUpsert {
	u.Set(orderbook.FieldExchangeID, v)
	return u
}

// UpdateExchangeID sets the "exchange_id" field to the value that was provided on create.
func (u *OrderBookUpsert) UpdateExchangeID() *OrderBookUpsert {
	u.SetExcluded(orderbook.FieldExchangeID)
	return u
}

// SetLastUpdated sets the "last_updated" field.
func (u *OrderBookUpsert) SetLastUpdated(v time.Time) *OrderBookUpsert {
	u.Set(orderbook.FieldLastUpdated, v)
	return u
}

// UpdateLastUpdated sets the "last_updated" field to the value that was provided on create.
func (u *OrderBookUpsert) UpdateLastUpdated() *OrderBookUpsert {
	u.SetExcluded(orderbook.FieldLastUpdated)
	return u
}

// SetOrderBook sets the "order_book" field.
func (u *OrderBookUpsert) SetOrderBook(v models.OrderBook) *OrderBookUpsert {
	u.Set(orderbook.FieldOrderBook, v)
	return u
}

// UpdateOrderBook sets the "order_book" field to the value that was provided on create.
func (u *OrderBookUpsert) UpdateOrderBook() *OrderBookUpsert {
	u.SetExcluded(orderbook.FieldOrderBook)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.OrderBook.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *OrderBookUpsertOne) UpdateNewValues() *OrderBookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.OrderBook.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *OrderBookUpsertOne) Ignore() *OrderBookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderBookUpsertOne) DoNothing() *OrderBookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderBookCreate.OnConflict
// documentation for more info.
func (u *OrderBookUpsertOne) Update(set func(*OrderBookUpsert)) *OrderBookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderBookUpsert{UpdateSet: update})
	}))
	return u
}

// SetExchangeID sets the "exchange_id" field.
func (u *OrderBookUpsertOne) SetExchangeID(v string) *OrderBookUpsertOne {
	return u.Update(func(s *OrderBookUpsert) {
		s.SetExchangeID(v)
	})
}

// UpdateExchangeID sets the "exchange_id" field to the value that was provided on create.
func (u *OrderBookUpsertOne) UpdateExchangeID() *OrderBookUpsertOne {
	return u.Update(func(s *OrderBookUpsert) {
		s.UpdateExchangeID()
	})
}

// SetLastUpdated sets the "last_updated" field.
func (u *OrderBookUpsertOne) SetLastUpdated(v time.Time) *OrderBookUpsertOne {
	return u.Update(func(s *OrderBookUpsert) {
		s.SetLastUpdated(v)
	})
}

// UpdateLastUpdated sets the "last_updated" field to the value that was provided on create.
func (u *OrderBookUpsertOne) UpdateLastUpdated() *OrderBookUpsertOne {
	return u.Update(func(s *OrderBookUpsert) {
		s.UpdateLastUpdated()
	})
}

// SetOrderBook sets the "order_book" field.
func (u *OrderBookUpsertOne) SetOrderBook(v models.OrderBook) *OrderBookUpsertOne {
	return u.Update(func(s *OrderBookUpsert) {
		s.SetOrderBook(v)
	})
}

// UpdateOrderBook sets the "order_book" field to the value that was provided on create.
func (u *OrderBookUpsertOne) UpdateOrderBook() *OrderBookUpsertOne {
	return u.Update(func(s *OrderBookUpsert) {
		s.UpdateOrderBook()
	})
}

// Exec executes the query.
func (u *OrderBookUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("repositories: missing options for OrderBookCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderBookUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderBookUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderBookUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderBookCreateBulk is the builder for creating many OrderBook entities in bulk.
type OrderBookCreateBulk struct {
	config
	builders []*OrderBookCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderBook entities in the database.
func (obcb *OrderBookCreateBulk) Save(ctx context.Context) ([]*OrderBook, error) {
	specs := make([]*sqlgraph.CreateSpec, len(obcb.builders))
	nodes := make([]*OrderBook, len(obcb.builders))
	mutators := make([]Mutator, len(obcb.builders))
	for i := range obcb.builders {
		func(i int, root context.Context) {
			builder := obcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderBookMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, obcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = obcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, obcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, obcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (obcb *OrderBookCreateBulk) SaveX(ctx context.Context) []*OrderBook {
	v, err := obcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (obcb *OrderBookCreateBulk) Exec(ctx context.Context) error {
	_, err := obcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (obcb *OrderBookCreateBulk) ExecX(ctx context.Context) {
	if err := obcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderBook.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderBookUpsert) {
//			SetExchangeID(v+v).
//		}).
//		Exec(ctx)
//
func (obcb *OrderBookCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderBookUpsertBulk {
	obcb.conflict = opts
	return &OrderBookUpsertBulk{
		create: obcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderBook.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (obcb *OrderBookCreateBulk) OnConflictColumns(columns ...string) *OrderBookUpsertBulk {
	obcb.conflict = append(obcb.conflict, sql.ConflictColumns(columns...))
	return &OrderBookUpsertBulk{
		create: obcb,
	}
}

// OrderBookUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderBook nodes.
type OrderBookUpsertBulk struct {
	create *OrderBookCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderBook.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *OrderBookUpsertBulk) UpdateNewValues() *OrderBookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderBook.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *OrderBookUpsertBulk) Ignore() *OrderBookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderBookUpsertBulk) DoNothing() *OrderBookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderBookCreateBulk.OnConflict
// documentation for more info.
func (u *OrderBookUpsertBulk) Update(set func(*OrderBookUpsert)) *OrderBookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderBookUpsert{UpdateSet: update})
	}))
	return u
}

// SetExchangeID sets the "exchange_id" field.
func (u *OrderBookUpsertBulk) SetExchangeID(v string) *OrderBookUpsertBulk {
	return u.Update(func(s *OrderBookUpsert) {
		s.SetExchangeID(v)
	})
}

// UpdateExchangeID sets the "exchange_id" field to the value that was provided on create.
func (u *OrderBookUpsertBulk) UpdateExchangeID() *OrderBookUpsertBulk {
	return u.Update(func(s *OrderBookUpsert) {
		s.UpdateExchangeID()
	})
}

// SetLastUpdated sets the "last_updated" field.
func (u *OrderBookUpsertBulk) SetLastUpdated(v time.Time) *OrderBookUpsertBulk {
	return u.Update(func(s *OrderBookUpsert) {
		s.SetLastUpdated(v)
	})
}

// UpdateLastUpdated sets the "last_updated" field to the value that was provided on create.
func (u *OrderBookUpsertBulk) UpdateLastUpdated() *OrderBookUpsertBulk {
	return u.Update(func(s *OrderBookUpsert) {
		s.UpdateLastUpdated()
	})
}

// SetOrderBook sets the "order_book" field.
func (u *OrderBookUpsertBulk) SetOrderBook(v models.OrderBook) *OrderBookUpsertBulk {
	return u.Update(func(s *OrderBookUpsert) {
		s.SetOrderBook(v)
	})
}

// UpdateOrderBook sets the "order_book" field to the value that was provided on create.
func (u *OrderBookUpsertBulk) UpdateOrderBook() *OrderBookUpsertBulk {
	return u.Update(func(s *OrderBookUpsert) {
		s.UpdateOrderBook()
	})
}

// Exec executes the query.
func (u *OrderBookUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("repositories: OnConflict was set for builder %d. Set it on the OrderBookCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("repositories: missing options for OrderBookCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderBookUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
