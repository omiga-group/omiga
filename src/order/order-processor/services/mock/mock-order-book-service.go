// Code generated by MockGen. DO NOT EDIT.
// Source: order-book-service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/omiga-group/omiga/src/order/shared/models"
)

// MockOrderBookService is a mock of OrderBookService interface.
type MockOrderBookService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderBookServiceMockRecorder
}

// MockOrderBookServiceMockRecorder is the mock recorder for MockOrderBookService.
type MockOrderBookServiceMockRecorder struct {
	mock *MockOrderBookService
}

// NewMockOrderBookService creates a new mock instance.
func NewMockOrderBookService(ctrl *gomock.Controller) *MockOrderBookService {
	mock := &MockOrderBookService{ctrl: ctrl}
	mock.recorder = &MockOrderBookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderBookService) EXPECT() *MockOrderBookServiceMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockOrderBookService) Handle(ctx context.Context, exchangeId string, orderbookTimestamp time.Time, orderBook models.OrderBook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, exchangeId, orderbookTimestamp, orderBook)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockOrderBookServiceMockRecorder) Handle(ctx, exchangeId, orderbookTimestamp, orderBook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockOrderBookService)(nil).Handle), ctx, exchangeId, orderbookTimestamp, orderBook)
}
