// Code generated by ent, DO NOT EDIT.

package tradingpair

const (
	// Label holds the string label denoting the tradingpair type in the database.
	Label = "trading_pair"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSymbol holds the string denoting the symbol field in the database.
	FieldSymbol = "symbol"
	// FieldBasePriceMinPrecision holds the string denoting the base_price_min_precision field in the database.
	FieldBasePriceMinPrecision = "base_price_min_precision"
	// FieldBasePriceMaxPrecision holds the string denoting the base_price_max_precision field in the database.
	FieldBasePriceMaxPrecision = "base_price_max_precision"
	// FieldBaseQuantityMinPrecision holds the string denoting the base_quantity_min_precision field in the database.
	FieldBaseQuantityMinPrecision = "base_quantity_min_precision"
	// FieldBaseQuantityMaxPrecision holds the string denoting the base_quantity_max_precision field in the database.
	FieldBaseQuantityMaxPrecision = "base_quantity_max_precision"
	// FieldCounterPriceMinPrecision holds the string denoting the counter_price_min_precision field in the database.
	FieldCounterPriceMinPrecision = "counter_price_min_precision"
	// FieldCounterPriceMaxPrecision holds the string denoting the counter_price_max_precision field in the database.
	FieldCounterPriceMaxPrecision = "counter_price_max_precision"
	// FieldCounterQuantityMinPrecision holds the string denoting the counter_quantity_min_precision field in the database.
	FieldCounterQuantityMinPrecision = "counter_quantity_min_precision"
	// FieldCounterQuantityMaxPrecision holds the string denoting the counter_quantity_max_precision field in the database.
	FieldCounterQuantityMaxPrecision = "counter_quantity_max_precision"
	// EdgeVenue holds the string denoting the venue edge name in mutations.
	EdgeVenue = "venue"
	// EdgeBase holds the string denoting the base edge name in mutations.
	EdgeBase = "base"
	// EdgeCounter holds the string denoting the counter edge name in mutations.
	EdgeCounter = "counter"
	// EdgeMarket holds the string denoting the market edge name in mutations.
	EdgeMarket = "market"
	// Table holds the table name of the tradingpair in the database.
	Table = "trading_pairs"
	// VenueTable is the table that holds the venue relation/edge.
	VenueTable = "trading_pairs"
	// VenueInverseTable is the table name for the Venue entity.
	// It exists in this package in order to avoid circular dependency with the "venue" package.
	VenueInverseTable = "venues"
	// VenueColumn is the table column denoting the venue relation/edge.
	VenueColumn = "venue_trading_pair"
	// BaseTable is the table that holds the base relation/edge.
	BaseTable = "trading_pairs"
	// BaseInverseTable is the table name for the Currency entity.
	// It exists in this package in order to avoid circular dependency with the "currency" package.
	BaseInverseTable = "currencies"
	// BaseColumn is the table column denoting the base relation/edge.
	BaseColumn = "currency_currency_base"
	// CounterTable is the table that holds the counter relation/edge.
	CounterTable = "trading_pairs"
	// CounterInverseTable is the table name for the Currency entity.
	// It exists in this package in order to avoid circular dependency with the "currency" package.
	CounterInverseTable = "currencies"
	// CounterColumn is the table column denoting the counter relation/edge.
	CounterColumn = "currency_currency_counter"
	// MarketTable is the table that holds the market relation/edge. The primary key declared below.
	MarketTable = "market_trading_pair"
	// MarketInverseTable is the table name for the Market entity.
	// It exists in this package in order to avoid circular dependency with the "market" package.
	MarketInverseTable = "markets"
)

// Columns holds all SQL columns for tradingpair fields.
var Columns = []string{
	FieldID,
	FieldSymbol,
	FieldBasePriceMinPrecision,
	FieldBasePriceMaxPrecision,
	FieldBaseQuantityMinPrecision,
	FieldBaseQuantityMaxPrecision,
	FieldCounterPriceMinPrecision,
	FieldCounterPriceMaxPrecision,
	FieldCounterQuantityMinPrecision,
	FieldCounterQuantityMaxPrecision,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "trading_pairs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"currency_currency_base",
	"currency_currency_counter",
	"venue_trading_pair",
}

var (
	// MarketPrimaryKey and MarketColumn2 are the table columns denoting the
	// primary key for the market relation (M2M).
	MarketPrimaryKey = []string{"market_id", "trading_pair_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
