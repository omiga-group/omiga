// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/exchange"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/tradingpair"
)

// TradingPairCreate is the builder for creating a TradingPair entity.
type TradingPairCreate struct {
	config
	mutation *TradingPairMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSymbol sets the "symbol" field.
func (tpc *TradingPairCreate) SetSymbol(s string) *TradingPairCreate {
	tpc.mutation.SetSymbol(s)
	return tpc
}

// SetBase sets the "base" field.
func (tpc *TradingPairCreate) SetBase(s string) *TradingPairCreate {
	tpc.mutation.SetBase(s)
	return tpc
}

// SetBasePrecision sets the "base_precision" field.
func (tpc *TradingPairCreate) SetBasePrecision(i int) *TradingPairCreate {
	tpc.mutation.SetBasePrecision(i)
	return tpc
}

// SetCounter sets the "counter" field.
func (tpc *TradingPairCreate) SetCounter(s string) *TradingPairCreate {
	tpc.mutation.SetCounter(s)
	return tpc
}

// SetCounterPrecision sets the "counter_precision" field.
func (tpc *TradingPairCreate) SetCounterPrecision(i int) *TradingPairCreate {
	tpc.mutation.SetCounterPrecision(i)
	return tpc
}

// SetExchangeID sets the "exchange" edge to the Exchange entity by ID.
func (tpc *TradingPairCreate) SetExchangeID(id int) *TradingPairCreate {
	tpc.mutation.SetExchangeID(id)
	return tpc
}

// SetExchange sets the "exchange" edge to the Exchange entity.
func (tpc *TradingPairCreate) SetExchange(e *Exchange) *TradingPairCreate {
	return tpc.SetExchangeID(e.ID)
}

// Mutation returns the TradingPairMutation object of the builder.
func (tpc *TradingPairCreate) Mutation() *TradingPairMutation {
	return tpc.mutation
}

// Save creates the TradingPair in the database.
func (tpc *TradingPairCreate) Save(ctx context.Context) (*TradingPair, error) {
	var (
		err  error
		node *TradingPair
	)
	if len(tpc.hooks) == 0 {
		if err = tpc.check(); err != nil {
			return nil, err
		}
		node, err = tpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TradingPairMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tpc.check(); err != nil {
				return nil, err
			}
			tpc.mutation = mutation
			if node, err = tpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tpc.hooks) - 1; i >= 0; i-- {
			if tpc.hooks[i] == nil {
				return nil, fmt.Errorf("entities: uninitialized hook (forgotten import entities/runtime?)")
			}
			mut = tpc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tpc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TradingPair)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TradingPairMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tpc *TradingPairCreate) SaveX(ctx context.Context) *TradingPair {
	v, err := tpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpc *TradingPairCreate) Exec(ctx context.Context) error {
	_, err := tpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpc *TradingPairCreate) ExecX(ctx context.Context) {
	if err := tpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpc *TradingPairCreate) check() error {
	if _, ok := tpc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`entities: missing required field "TradingPair.symbol"`)}
	}
	if _, ok := tpc.mutation.Base(); !ok {
		return &ValidationError{Name: "base", err: errors.New(`entities: missing required field "TradingPair.base"`)}
	}
	if _, ok := tpc.mutation.BasePrecision(); !ok {
		return &ValidationError{Name: "base_precision", err: errors.New(`entities: missing required field "TradingPair.base_precision"`)}
	}
	if _, ok := tpc.mutation.Counter(); !ok {
		return &ValidationError{Name: "counter", err: errors.New(`entities: missing required field "TradingPair.counter"`)}
	}
	if _, ok := tpc.mutation.CounterPrecision(); !ok {
		return &ValidationError{Name: "counter_precision", err: errors.New(`entities: missing required field "TradingPair.counter_precision"`)}
	}
	if _, ok := tpc.mutation.ExchangeID(); !ok {
		return &ValidationError{Name: "exchange", err: errors.New(`entities: missing required edge "TradingPair.exchange"`)}
	}
	return nil
}

func (tpc *TradingPairCreate) sqlSave(ctx context.Context) (*TradingPair, error) {
	_node, _spec := tpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tpc *TradingPairCreate) createSpec() (*TradingPair, *sqlgraph.CreateSpec) {
	var (
		_node = &TradingPair{config: tpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tradingpair.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tradingpair.FieldID,
			},
		}
	)
	_spec.Schema = tpc.schemaConfig.TradingPair
	_spec.OnConflict = tpc.conflict
	if value, ok := tpc.mutation.Symbol(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tradingpair.FieldSymbol,
		})
		_node.Symbol = value
	}
	if value, ok := tpc.mutation.Base(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tradingpair.FieldBase,
		})
		_node.Base = value
	}
	if value, ok := tpc.mutation.BasePrecision(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBasePrecision,
		})
		_node.BasePrecision = value
	}
	if value, ok := tpc.mutation.Counter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tradingpair.FieldCounter,
		})
		_node.Counter = value
	}
	if value, ok := tpc.mutation.CounterPrecision(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterPrecision,
		})
		_node.CounterPrecision = value
	}
	if nodes := tpc.mutation.ExchangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.ExchangeTable,
			Columns: []string{tradingpair.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exchange.FieldID,
				},
			},
		}
		edge.Schema = tpc.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.exchange_trading_pairs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TradingPair.Create().
//		SetSymbol(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TradingPairUpsert) {
//			SetSymbol(v+v).
//		}).
//		Exec(ctx)
func (tpc *TradingPairCreate) OnConflict(opts ...sql.ConflictOption) *TradingPairUpsertOne {
	tpc.conflict = opts
	return &TradingPairUpsertOne{
		create: tpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TradingPair.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tpc *TradingPairCreate) OnConflictColumns(columns ...string) *TradingPairUpsertOne {
	tpc.conflict = append(tpc.conflict, sql.ConflictColumns(columns...))
	return &TradingPairUpsertOne{
		create: tpc,
	}
}

type (
	// TradingPairUpsertOne is the builder for "upsert"-ing
	//  one TradingPair node.
	TradingPairUpsertOne struct {
		create *TradingPairCreate
	}

	// TradingPairUpsert is the "OnConflict" setter.
	TradingPairUpsert struct {
		*sql.UpdateSet
	}
)

// SetSymbol sets the "symbol" field.
func (u *TradingPairUpsert) SetSymbol(v string) *TradingPairUpsert {
	u.Set(tradingpair.FieldSymbol, v)
	return u
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *TradingPairUpsert) UpdateSymbol() *TradingPairUpsert {
	u.SetExcluded(tradingpair.FieldSymbol)
	return u
}

// SetBase sets the "base" field.
func (u *TradingPairUpsert) SetBase(v string) *TradingPairUpsert {
	u.Set(tradingpair.FieldBase, v)
	return u
}

// UpdateBase sets the "base" field to the value that was provided on create.
func (u *TradingPairUpsert) UpdateBase() *TradingPairUpsert {
	u.SetExcluded(tradingpair.FieldBase)
	return u
}

// SetBasePrecision sets the "base_precision" field.
func (u *TradingPairUpsert) SetBasePrecision(v int) *TradingPairUpsert {
	u.Set(tradingpair.FieldBasePrecision, v)
	return u
}

// UpdateBasePrecision sets the "base_precision" field to the value that was provided on create.
func (u *TradingPairUpsert) UpdateBasePrecision() *TradingPairUpsert {
	u.SetExcluded(tradingpair.FieldBasePrecision)
	return u
}

// AddBasePrecision adds v to the "base_precision" field.
func (u *TradingPairUpsert) AddBasePrecision(v int) *TradingPairUpsert {
	u.Add(tradingpair.FieldBasePrecision, v)
	return u
}

// SetCounter sets the "counter" field.
func (u *TradingPairUpsert) SetCounter(v string) *TradingPairUpsert {
	u.Set(tradingpair.FieldCounter, v)
	return u
}

// UpdateCounter sets the "counter" field to the value that was provided on create.
func (u *TradingPairUpsert) UpdateCounter() *TradingPairUpsert {
	u.SetExcluded(tradingpair.FieldCounter)
	return u
}

// SetCounterPrecision sets the "counter_precision" field.
func (u *TradingPairUpsert) SetCounterPrecision(v int) *TradingPairUpsert {
	u.Set(tradingpair.FieldCounterPrecision, v)
	return u
}

// UpdateCounterPrecision sets the "counter_precision" field to the value that was provided on create.
func (u *TradingPairUpsert) UpdateCounterPrecision() *TradingPairUpsert {
	u.SetExcluded(tradingpair.FieldCounterPrecision)
	return u
}

// AddCounterPrecision adds v to the "counter_precision" field.
func (u *TradingPairUpsert) AddCounterPrecision(v int) *TradingPairUpsert {
	u.Add(tradingpair.FieldCounterPrecision, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TradingPair.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TradingPairUpsertOne) UpdateNewValues() *TradingPairUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TradingPair.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TradingPairUpsertOne) Ignore() *TradingPairUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TradingPairUpsertOne) DoNothing() *TradingPairUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TradingPairCreate.OnConflict
// documentation for more info.
func (u *TradingPairUpsertOne) Update(set func(*TradingPairUpsert)) *TradingPairUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TradingPairUpsert{UpdateSet: update})
	}))
	return u
}

// SetSymbol sets the "symbol" field.
func (u *TradingPairUpsertOne) SetSymbol(v string) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *TradingPairUpsertOne) UpdateSymbol() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateSymbol()
	})
}

// SetBase sets the "base" field.
func (u *TradingPairUpsertOne) SetBase(v string) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetBase(v)
	})
}

// UpdateBase sets the "base" field to the value that was provided on create.
func (u *TradingPairUpsertOne) UpdateBase() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateBase()
	})
}

// SetBasePrecision sets the "base_precision" field.
func (u *TradingPairUpsertOne) SetBasePrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetBasePrecision(v)
	})
}

// AddBasePrecision adds v to the "base_precision" field.
func (u *TradingPairUpsertOne) AddBasePrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddBasePrecision(v)
	})
}

// UpdateBasePrecision sets the "base_precision" field to the value that was provided on create.
func (u *TradingPairUpsertOne) UpdateBasePrecision() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateBasePrecision()
	})
}

// SetCounter sets the "counter" field.
func (u *TradingPairUpsertOne) SetCounter(v string) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetCounter(v)
	})
}

// UpdateCounter sets the "counter" field to the value that was provided on create.
func (u *TradingPairUpsertOne) UpdateCounter() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateCounter()
	})
}

// SetCounterPrecision sets the "counter_precision" field.
func (u *TradingPairUpsertOne) SetCounterPrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetCounterPrecision(v)
	})
}

// AddCounterPrecision adds v to the "counter_precision" field.
func (u *TradingPairUpsertOne) AddCounterPrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddCounterPrecision(v)
	})
}

// UpdateCounterPrecision sets the "counter_precision" field to the value that was provided on create.
func (u *TradingPairUpsertOne) UpdateCounterPrecision() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateCounterPrecision()
	})
}

// Exec executes the query.
func (u *TradingPairUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for TradingPairCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TradingPairUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TradingPairUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TradingPairUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TradingPairCreateBulk is the builder for creating many TradingPair entities in bulk.
type TradingPairCreateBulk struct {
	config
	builders []*TradingPairCreate
	conflict []sql.ConflictOption
}

// Save creates the TradingPair entities in the database.
func (tpcb *TradingPairCreateBulk) Save(ctx context.Context) ([]*TradingPair, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tpcb.builders))
	nodes := make([]*TradingPair, len(tpcb.builders))
	mutators := make([]Mutator, len(tpcb.builders))
	for i := range tpcb.builders {
		func(i int, root context.Context) {
			builder := tpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TradingPairMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tpcb *TradingPairCreateBulk) SaveX(ctx context.Context) []*TradingPair {
	v, err := tpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpcb *TradingPairCreateBulk) Exec(ctx context.Context) error {
	_, err := tpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpcb *TradingPairCreateBulk) ExecX(ctx context.Context) {
	if err := tpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TradingPair.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TradingPairUpsert) {
//			SetSymbol(v+v).
//		}).
//		Exec(ctx)
func (tpcb *TradingPairCreateBulk) OnConflict(opts ...sql.ConflictOption) *TradingPairUpsertBulk {
	tpcb.conflict = opts
	return &TradingPairUpsertBulk{
		create: tpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TradingPair.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tpcb *TradingPairCreateBulk) OnConflictColumns(columns ...string) *TradingPairUpsertBulk {
	tpcb.conflict = append(tpcb.conflict, sql.ConflictColumns(columns...))
	return &TradingPairUpsertBulk{
		create: tpcb,
	}
}

// TradingPairUpsertBulk is the builder for "upsert"-ing
// a bulk of TradingPair nodes.
type TradingPairUpsertBulk struct {
	create *TradingPairCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TradingPair.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TradingPairUpsertBulk) UpdateNewValues() *TradingPairUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TradingPair.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TradingPairUpsertBulk) Ignore() *TradingPairUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TradingPairUpsertBulk) DoNothing() *TradingPairUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TradingPairCreateBulk.OnConflict
// documentation for more info.
func (u *TradingPairUpsertBulk) Update(set func(*TradingPairUpsert)) *TradingPairUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TradingPairUpsert{UpdateSet: update})
	}))
	return u
}

// SetSymbol sets the "symbol" field.
func (u *TradingPairUpsertBulk) SetSymbol(v string) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *TradingPairUpsertBulk) UpdateSymbol() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateSymbol()
	})
}

// SetBase sets the "base" field.
func (u *TradingPairUpsertBulk) SetBase(v string) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetBase(v)
	})
}

// UpdateBase sets the "base" field to the value that was provided on create.
func (u *TradingPairUpsertBulk) UpdateBase() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateBase()
	})
}

// SetBasePrecision sets the "base_precision" field.
func (u *TradingPairUpsertBulk) SetBasePrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetBasePrecision(v)
	})
}

// AddBasePrecision adds v to the "base_precision" field.
func (u *TradingPairUpsertBulk) AddBasePrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddBasePrecision(v)
	})
}

// UpdateBasePrecision sets the "base_precision" field to the value that was provided on create.
func (u *TradingPairUpsertBulk) UpdateBasePrecision() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateBasePrecision()
	})
}

// SetCounter sets the "counter" field.
func (u *TradingPairUpsertBulk) SetCounter(v string) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetCounter(v)
	})
}

// UpdateCounter sets the "counter" field to the value that was provided on create.
func (u *TradingPairUpsertBulk) UpdateCounter() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateCounter()
	})
}

// SetCounterPrecision sets the "counter_precision" field.
func (u *TradingPairUpsertBulk) SetCounterPrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetCounterPrecision(v)
	})
}

// AddCounterPrecision adds v to the "counter_precision" field.
func (u *TradingPairUpsertBulk) AddCounterPrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddCounterPrecision(v)
	})
}

// UpdateCounterPrecision sets the "counter_precision" field to the value that was provided on create.
func (u *TradingPairUpsertBulk) UpdateCounterPrecision() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateCounterPrecision()
	})
}

// Exec executes the query.
func (u *TradingPairUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entities: OnConflict was set for builder %d. Set it on the TradingPairCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for TradingPairCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TradingPairUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
