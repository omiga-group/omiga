// Package rainv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package rainv1

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// Coin defines model for coin.
type Coin struct {
	BlockExplorer          string                 `json:"block_explorer"`
	Categories             []string               `json:"categories"`
	Code                   string                 `json:"code"`
	ExchangeWarningMinimum string                 `json:"exchange_warning_minimum"`
	Extensions             []Extension            `json:"extensions"`
	FiatPrecision          int                    `json:"fiat_precision"`
	IconUrl                string                 `json:"icon_url"`
	MinimumAmount          string                 `json:"minimum_amount"`
	MinimumConfirmations   int                    `json:"minimum_confirmations"`
	Name                   string                 `json:"name"`
	Networks               []Network              `json:"networks"`
	Precision              int                    `json:"precision"`
	Status                 string                 `json:"status"`
	StatusChangedAt        time.Time              `json:"status_changed_at"`
	AdditionalProperties   map[string]interface{} `json:"-"`
}

// Extension defines model for extension.
type Extension struct {
	Name                 string                 `json:"name"`
	Type                 string                 `json:"type"`
	Value                string                 `json:"value"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// GetCoinsResponse defines model for getCoinsResponse.
type GetCoinsResponse struct {
	Coins                []Coin                 `json:"coins"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Network defines model for network.
type Network struct {
	DefaultFee           string                 `json:"default_fee"`
	Extensions           []Extension            `json:"extensions"`
	Name                 string                 `json:"name"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Getter for additional properties for Coin. Returns the specified
// element and whether it was found
func (a Coin) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Coin
func (a *Coin) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Coin to handle AdditionalProperties
func (a *Coin) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["block_explorer"]; found {
		err = json.Unmarshal(raw, &a.BlockExplorer)
		if err != nil {
			return fmt.Errorf("error reading 'block_explorer': %w", err)
		}
		delete(object, "block_explorer")
	}

	if raw, found := object["categories"]; found {
		err = json.Unmarshal(raw, &a.Categories)
		if err != nil {
			return fmt.Errorf("error reading 'categories': %w", err)
		}
		delete(object, "categories")
	}

	if raw, found := object["code"]; found {
		err = json.Unmarshal(raw, &a.Code)
		if err != nil {
			return fmt.Errorf("error reading 'code': %w", err)
		}
		delete(object, "code")
	}

	if raw, found := object["exchange_warning_minimum"]; found {
		err = json.Unmarshal(raw, &a.ExchangeWarningMinimum)
		if err != nil {
			return fmt.Errorf("error reading 'exchange_warning_minimum': %w", err)
		}
		delete(object, "exchange_warning_minimum")
	}

	if raw, found := object["extensions"]; found {
		err = json.Unmarshal(raw, &a.Extensions)
		if err != nil {
			return fmt.Errorf("error reading 'extensions': %w", err)
		}
		delete(object, "extensions")
	}

	if raw, found := object["fiat_precision"]; found {
		err = json.Unmarshal(raw, &a.FiatPrecision)
		if err != nil {
			return fmt.Errorf("error reading 'fiat_precision': %w", err)
		}
		delete(object, "fiat_precision")
	}

	if raw, found := object["icon_url"]; found {
		err = json.Unmarshal(raw, &a.IconUrl)
		if err != nil {
			return fmt.Errorf("error reading 'icon_url': %w", err)
		}
		delete(object, "icon_url")
	}

	if raw, found := object["minimum_amount"]; found {
		err = json.Unmarshal(raw, &a.MinimumAmount)
		if err != nil {
			return fmt.Errorf("error reading 'minimum_amount': %w", err)
		}
		delete(object, "minimum_amount")
	}

	if raw, found := object["minimum_confirmations"]; found {
		err = json.Unmarshal(raw, &a.MinimumConfirmations)
		if err != nil {
			return fmt.Errorf("error reading 'minimum_confirmations': %w", err)
		}
		delete(object, "minimum_confirmations")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["networks"]; found {
		err = json.Unmarshal(raw, &a.Networks)
		if err != nil {
			return fmt.Errorf("error reading 'networks': %w", err)
		}
		delete(object, "networks")
	}

	if raw, found := object["precision"]; found {
		err = json.Unmarshal(raw, &a.Precision)
		if err != nil {
			return fmt.Errorf("error reading 'precision': %w", err)
		}
		delete(object, "precision")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["status_changed_at"]; found {
		err = json.Unmarshal(raw, &a.StatusChangedAt)
		if err != nil {
			return fmt.Errorf("error reading 'status_changed_at': %w", err)
		}
		delete(object, "status_changed_at")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshalling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Coin to handle AdditionalProperties
func (a Coin) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["block_explorer"], err = json.Marshal(a.BlockExplorer)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'block_explorer': %w", err)
	}

	object["categories"], err = json.Marshal(a.Categories)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'categories': %w", err)
	}

	object["code"], err = json.Marshal(a.Code)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'code': %w", err)
	}

	object["exchange_warning_minimum"], err = json.Marshal(a.ExchangeWarningMinimum)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'exchange_warning_minimum': %w", err)
	}

	object["extensions"], err = json.Marshal(a.Extensions)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'extensions': %w", err)
	}

	object["fiat_precision"], err = json.Marshal(a.FiatPrecision)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'fiat_precision': %w", err)
	}

	object["icon_url"], err = json.Marshal(a.IconUrl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'icon_url': %w", err)
	}

	object["minimum_amount"], err = json.Marshal(a.MinimumAmount)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'minimum_amount': %w", err)
	}

	object["minimum_confirmations"], err = json.Marshal(a.MinimumConfirmations)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'minimum_confirmations': %w", err)
	}

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	object["networks"], err = json.Marshal(a.Networks)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'networks': %w", err)
	}

	object["precision"], err = json.Marshal(a.Precision)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'precision': %w", err)
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	object["status_changed_at"], err = json.Marshal(a.StatusChangedAt)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status_changed_at': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Extension. Returns the specified
// element and whether it was found
func (a Extension) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Extension
func (a *Extension) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Extension to handle AdditionalProperties
func (a *Extension) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshalling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Extension to handle AdditionalProperties
func (a Extension) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	object["value"], err = json.Marshal(a.Value)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'value': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GetCoinsResponse. Returns the specified
// element and whether it was found
func (a GetCoinsResponse) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GetCoinsResponse
func (a *GetCoinsResponse) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GetCoinsResponse to handle AdditionalProperties
func (a *GetCoinsResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["coins"]; found {
		err = json.Unmarshal(raw, &a.Coins)
		if err != nil {
			return fmt.Errorf("error reading 'coins': %w", err)
		}
		delete(object, "coins")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshalling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GetCoinsResponse to handle AdditionalProperties
func (a GetCoinsResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["coins"], err = json.Marshal(a.Coins)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'coins': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Network. Returns the specified
// element and whether it was found
func (a Network) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Network
func (a *Network) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Network to handle AdditionalProperties
func (a *Network) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["default_fee"]; found {
		err = json.Unmarshal(raw, &a.DefaultFee)
		if err != nil {
			return fmt.Errorf("error reading 'default_fee': %w", err)
		}
		delete(object, "default_fee")
	}

	if raw, found := object["extensions"]; found {
		err = json.Unmarshal(raw, &a.Extensions)
		if err != nil {
			return fmt.Errorf("error reading 'extensions': %w", err)
		}
		delete(object, "extensions")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshalling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Network to handle AdditionalProperties
func (a Network) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["default_fee"], err = json.Marshal(a.DefaultFee)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'default_fee': %w", err)
	}

	object["extensions"], err = json.Marshal(a.Extensions)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'extensions': %w", err)
	}

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllCoins request
	GetAllCoins(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllCoins(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCoinsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllCoinsRequest generates requests for GetAllCoins
func NewGetAllCoinsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/coins")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllCoins request
	GetAllCoinsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCoinsResponse, error)
}

type GetAllCoinsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCoinsResponse
}

// Status returns HTTPResponse.Status
func (r GetAllCoinsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCoinsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllCoinsWithResponse request returning *GetAllCoinsResponse
func (c *ClientWithResponses) GetAllCoinsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCoinsResponse, error) {
	rsp, err := c.GetAllCoins(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCoinsResponse(rsp)
}

// ParseGetAllCoinsResponse parses an HTTP response from a GetAllCoinsWithResponse call
func ParseGetAllCoinsResponse(rsp *http.Response) (*GetAllCoinsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCoinsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCoinsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
