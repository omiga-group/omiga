const { GoGenerator } = require("@asyncapi/modelina");
const { File } = require("@asyncapi/generator-react-sdk");

export default async function ({ asyncapi, params }) {
  let foundTimeTypeField = false;
  let foundIDTypeField = false;
  let allEnumTypes = []

  const generator = new GoGenerator({
    presets: [
      {
        struct: {
          field({ field }) {
            const isRequired = field.required;
            const originalFieldName = field.unconstrainedPropertyName;
            const golangFieldName = field.propertyName;
            const originalInput = field.property.originalInput
            const description = originalInput.description
              ? ` // ${originalInput.description}`
              : "";
            const unrequiredMark = !isRequired ? "*" : "";
            const format = originalInput.format
            let fieldType = field.property.type;

            if (originalInput.enum) {
              allEnumTypes.push(fieldType)
            }
            
            if (originalInput.type === "array") {
              fieldType = fieldType.replace('interface{}', field.property.valueModel.union[0].type)
            }

            let finalFieldType = fieldType.startsWith("*")
              ? fieldType.substring(1)
              : fieldType;

            switch (format) {
              case "date-time":
                finalFieldType = "time.Time";
                foundTimeTypeField = true;

                break;

              case "int32":
                finalFieldType = "int32";

                break;

              case "int64":
                finalFieldType = "int64";

                break;

              case "uuid":
                finalFieldType = "uuid.UUID";
                foundIDTypeField = true;

                break;

              default:
                break;
            }

            const tag = isRequired
              ? `\`json:"${originalFieldName}"\``
              : `\`json:"${originalFieldName},omitempty"\``;

            if (originalInput.type === "array" && finalFieldType.startsWith("[]*")) {
              finalFieldType = "[]" + finalFieldType.substring("[]*".length);
            }

            return `${golangFieldName} ${unrequiredMark}${finalFieldType} ${tag} ${description}`;
          },
        },
      },
    ],
  });
  const models = await generator.generate(asyncapi);

  let payloadContent = `
// Code generated by go-connectilly-event-template, DO NOT EDIT.

package ${params.packageName}

`;

  if (allEnumTypes.length > 0 || foundTimeTypeField || foundIDTypeField) {
    payloadContent =
      payloadContent +
      `import (
    `;

    if (allEnumTypes.length > 0) {
      payloadContent =
      payloadContent +
      `
      "encoding/json"
      "fmt"
    `;
    }

    if (foundTimeTypeField) {
      payloadContent = payloadContent +
      `
      "time"
    `;
    }

    if (foundIDTypeField) {
      payloadContent =
      payloadContent +
      `
      "github.com/google/uuid"
    `;
    }

    payloadContent = payloadContent + ')';
  }

  models.forEach((model) => {
    let result = model.result;

    if (model.model.type === "string" && model.model.enum) {
      result = result.split("\n").reduce((reduction, line) => {
        if (line.indexOf(` = \"`) === -1) {
          return `${reduction}\n${line}`;
        }

        if (line.indexOf(` ${model.modelName} = \"`) !== -1) {
          return `${reduction}\n${line}`;
        }

        const updatedLine = line.replace(' = "', ` ${model.modelName} = \"`);

        return `${reduction}\n${updatedLine}`;
      }, "");
    }

    payloadContent += `
    ${model.dependencies.join("\n")}
    ${result}
    `;
  });

  allEnumTypes.forEach(enumType => {
    payloadContent += `
func (enumVal ${enumType}) MarshalJSON() ([]byte, error) {
  return json.Marshal(enumVal.String())
}

func (enumVal ${enumType}) String() string {
  return fmt.Sprintf("%v", ${enumType}Values[int(enumVal)])
}

func (enumVal *${enumType}) UnmarshalJSON(buffer []byte) error {
  var str string
  if err := json.Unmarshal(buffer, &str); err != nil {
    return err
  }

  var tmpEnumVal ${enumType}
  var ok bool

  if tmpEnumVal, ok = ValuesTo${enumType}[str]; !ok {
    return fmt.Errorf("unknown %s", str)
  }

  *enumVal = tmpEnumVal

  return nil
}
`;
  })

  return <File name="payloads_eventgen.go">{payloadContent}</File>;
}
