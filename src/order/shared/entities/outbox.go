// Code generated by ent, DO NOT EDIT.

package entities

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/omiga-group/omiga/src/order/shared/entities/outbox"
)

// Outbox is the model entity for the Outbox schema.
type Outbox struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Topic holds the value of the "topic" field.
	Topic string `json:"topic,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload []byte `json:"payload,omitempty"`
	// Headers holds the value of the "headers" field.
	Headers map[string]string `json:"headers,omitempty"`
	// RetryCount holds the value of the "retry_count" field.
	RetryCount int `json:"retry_count,omitempty"`
	// Status holds the value of the "status" field.
	Status outbox.Status `json:"status,omitempty"`
	// LastRetry holds the value of the "last_retry" field.
	LastRetry time.Time `json:"last_retry,omitempty"`
	// ProcessingErrors holds the value of the "processing_errors" field.
	ProcessingErrors []string `json:"processing_errors,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Outbox) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case outbox.FieldPayload, outbox.FieldHeaders, outbox.FieldProcessingErrors:
			values[i] = new([]byte)
		case outbox.FieldID, outbox.FieldRetryCount:
			values[i] = new(sql.NullInt64)
		case outbox.FieldTopic, outbox.FieldKey, outbox.FieldStatus:
			values[i] = new(sql.NullString)
		case outbox.FieldTimestamp, outbox.FieldLastRetry:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Outbox", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Outbox fields.
func (o *Outbox) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case outbox.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case outbox.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				o.Timestamp = value.Time
			}
		case outbox.FieldTopic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic", values[i])
			} else if value.Valid {
				o.Topic = value.String
			}
		case outbox.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				o.Key = value.String
			}
		case outbox.FieldPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value != nil {
				o.Payload = *value
			}
		case outbox.FieldHeaders:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field headers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.Headers); err != nil {
					return fmt.Errorf("unmarshal field headers: %w", err)
				}
			}
		case outbox.FieldRetryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retry_count", values[i])
			} else if value.Valid {
				o.RetryCount = int(value.Int64)
			}
		case outbox.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				o.Status = outbox.Status(value.String)
			}
		case outbox.FieldLastRetry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_retry", values[i])
			} else if value.Valid {
				o.LastRetry = value.Time
			}
		case outbox.FieldProcessingErrors:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field processing_errors", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.ProcessingErrors); err != nil {
					return fmt.Errorf("unmarshal field processing_errors: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Outbox.
// Note that you need to call Outbox.Unwrap() before calling this method if this Outbox
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Outbox) Update() *OutboxUpdateOne {
	return (&OutboxClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Outbox entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Outbox) Unwrap() *Outbox {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("entities: Outbox is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Outbox) String() string {
	var builder strings.Builder
	builder.WriteString("Outbox(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("timestamp=")
	builder.WriteString(o.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("topic=")
	builder.WriteString(o.Topic)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(o.Key)
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(fmt.Sprintf("%v", o.Payload))
	builder.WriteString(", ")
	builder.WriteString("headers=")
	builder.WriteString(fmt.Sprintf("%v", o.Headers))
	builder.WriteString(", ")
	builder.WriteString("retry_count=")
	builder.WriteString(fmt.Sprintf("%v", o.RetryCount))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", o.Status))
	builder.WriteString(", ")
	builder.WriteString("last_retry=")
	builder.WriteString(o.LastRetry.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("processing_errors=")
	builder.WriteString(fmt.Sprintf("%v", o.ProcessingErrors))
	builder.WriteByte(')')
	return builder.String()
}

// Outboxes is a parsable slice of Outbox.
type Outboxes []*Outbox

func (o Outboxes) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
