// Package xtv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package xtv1

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// GetMarketConfigResponse defines model for getMarketConfigResponse.
type GetMarketConfigResponse map[string]MarketConfig

// MarketConfig defines model for marketConfig.
type MarketConfig struct {
	CoinPoint            int                    `json:"coinPoint"`
	Maker                float64                `json:"maker"`
	MinAmount            float64                `json:"minAmount"`
	MinMoney             float64                `json:"minMoney"`
	PricePoint           int                    `json:"pricePoint"`
	Taker                float64                `json:"taker"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Getter for additional properties for MarketConfig. Returns the specified
// element and whether it was found
func (a MarketConfig) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MarketConfig
func (a *MarketConfig) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MarketConfig to handle AdditionalProperties
func (a *MarketConfig) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["coinPoint"]; found {
		err = json.Unmarshal(raw, &a.CoinPoint)
		if err != nil {
			return fmt.Errorf("error reading 'coinPoint': %w", err)
		}
		delete(object, "coinPoint")
	}

	if raw, found := object["maker"]; found {
		err = json.Unmarshal(raw, &a.Maker)
		if err != nil {
			return fmt.Errorf("error reading 'maker': %w", err)
		}
		delete(object, "maker")
	}

	if raw, found := object["minAmount"]; found {
		err = json.Unmarshal(raw, &a.MinAmount)
		if err != nil {
			return fmt.Errorf("error reading 'minAmount': %w", err)
		}
		delete(object, "minAmount")
	}

	if raw, found := object["minMoney"]; found {
		err = json.Unmarshal(raw, &a.MinMoney)
		if err != nil {
			return fmt.Errorf("error reading 'minMoney': %w", err)
		}
		delete(object, "minMoney")
	}

	if raw, found := object["pricePoint"]; found {
		err = json.Unmarshal(raw, &a.PricePoint)
		if err != nil {
			return fmt.Errorf("error reading 'pricePoint': %w", err)
		}
		delete(object, "pricePoint")
	}

	if raw, found := object["taker"]; found {
		err = json.Unmarshal(raw, &a.Taker)
		if err != nil {
			return fmt.Errorf("error reading 'taker': %w", err)
		}
		delete(object, "taker")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshalling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MarketConfig to handle AdditionalProperties
func (a MarketConfig) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["coinPoint"], err = json.Marshal(a.CoinPoint)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'coinPoint': %w", err)
	}

	object["maker"], err = json.Marshal(a.Maker)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maker': %w", err)
	}

	object["minAmount"], err = json.Marshal(a.MinAmount)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'minAmount': %w", err)
	}

	object["minMoney"], err = json.Marshal(a.MinMoney)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'minMoney': %w", err)
	}

	object["pricePoint"], err = json.Marshal(a.PricePoint)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pricePoint': %w", err)
	}

	object["taker"], err = json.Marshal(a.Taker)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'taker': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllMarketConfig request
	GetAllMarketConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllMarketConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllMarketConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllMarketConfigRequest generates requests for GetAllMarketConfig
func NewGetAllMarketConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getMarketConfig")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllMarketConfig request
	GetAllMarketConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllMarketConfigResponse, error)
}

type GetAllMarketConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMarketConfigResponse
}

// Status returns HTTPResponse.Status
func (r GetAllMarketConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllMarketConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllMarketConfigWithResponse request returning *GetAllMarketConfigResponse
func (c *ClientWithResponses) GetAllMarketConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllMarketConfigResponse, error) {
	rsp, err := c.GetAllMarketConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllMarketConfigResponse(rsp)
}

// ParseGetAllMarketConfigResponse parses an HTTP response from a GetAllMarketConfigWithResponse call
func ParseGetAllMarketConfigResponse(rsp *http.Response) (*GetAllMarketConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllMarketConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMarketConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
