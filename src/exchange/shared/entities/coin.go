// Code generated by ent, DO NOT EDIT.

package entities

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/coin"
)

// Coin is the model entity for the Coin schema.
type Coin struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CoinQuery when eager-loading is set.
	Edges CoinEdges `json:"edges"`
}

// CoinEdges holds the relations/edges for other nodes in the graph.
type CoinEdges struct {
	// CoinBase holds the value of the coin_base edge.
	CoinBase []*TradingPair `json:"coin_base,omitempty"`
	// CoinCounter holds the value of the coin_counter edge.
	CoinCounter []*TradingPair `json:"coin_counter,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedCoinBase    map[string][]*TradingPair
	namedCoinCounter map[string][]*TradingPair
}

// CoinBaseOrErr returns the CoinBase value or an error if the edge
// was not loaded in eager-loading.
func (e CoinEdges) CoinBaseOrErr() ([]*TradingPair, error) {
	if e.loadedTypes[0] {
		return e.CoinBase, nil
	}
	return nil, &NotLoadedError{edge: "coin_base"}
}

// CoinCounterOrErr returns the CoinCounter value or an error if the edge
// was not loaded in eager-loading.
func (e CoinEdges) CoinCounterOrErr() ([]*TradingPair, error) {
	if e.loadedTypes[1] {
		return e.CoinCounter, nil
	}
	return nil, &NotLoadedError{edge: "coin_counter"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Coin) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case coin.FieldID:
			values[i] = new(sql.NullInt64)
		case coin.FieldSymbol, coin.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Coin", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Coin fields.
func (c *Coin) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case coin.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				c.Symbol = value.String
			}
		case coin.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		}
	}
	return nil
}

// QueryCoinBase queries the "coin_base" edge of the Coin entity.
func (c *Coin) QueryCoinBase() *TradingPairQuery {
	return (&CoinClient{config: c.config}).QueryCoinBase(c)
}

// QueryCoinCounter queries the "coin_counter" edge of the Coin entity.
func (c *Coin) QueryCoinCounter() *TradingPairQuery {
	return (&CoinClient{config: c.config}).QueryCoinCounter(c)
}

// Update returns a builder for updating this Coin.
// Note that you need to call Coin.Unwrap() before calling this method if this Coin
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Coin) Update() *CoinUpdateOne {
	return (&CoinClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Coin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Coin) Unwrap() *Coin {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("entities: Coin is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Coin) String() string {
	var builder strings.Builder
	builder.WriteString("Coin(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("symbol=")
	builder.WriteString(c.Symbol)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NamedCoinBase returns the CoinBase named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Coin) NamedCoinBase(name string) ([]*TradingPair, error) {
	if c.Edges.namedCoinBase == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedCoinBase[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Coin) appendNamedCoinBase(name string, edges ...*TradingPair) {
	if c.Edges.namedCoinBase == nil {
		c.Edges.namedCoinBase = make(map[string][]*TradingPair)
	}
	if len(edges) == 0 {
		c.Edges.namedCoinBase[name] = []*TradingPair{}
	} else {
		c.Edges.namedCoinBase[name] = append(c.Edges.namedCoinBase[name], edges...)
	}
}

// NamedCoinCounter returns the CoinCounter named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Coin) NamedCoinCounter(name string) ([]*TradingPair, error) {
	if c.Edges.namedCoinCounter == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedCoinCounter[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Coin) appendNamedCoinCounter(name string, edges ...*TradingPair) {
	if c.Edges.namedCoinCounter == nil {
		c.Edges.namedCoinCounter = make(map[string][]*TradingPair)
	}
	if len(edges) == 0 {
		c.Edges.namedCoinCounter[name] = []*TradingPair{}
	} else {
		c.Edges.namedCoinCounter[name] = append(c.Edges.namedCoinCounter[name], edges...)
	}
}

// Coins is a parsable slice of Coin.
type Coins []*Coin

func (c Coins) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
