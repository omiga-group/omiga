// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package commands

import (
	"context"
	"github.com/omiga-group/omiga/src/order/order-api/graphql"
	"github.com/omiga-group/omiga/src/order/order-api/http"
	"github.com/omiga-group/omiga/src/order/order-api/publishers"
	"github.com/omiga-group/omiga/src/order/order-api/services"
	outbox2 "github.com/omiga-group/omiga/src/order/shared/outbox"
	"github.com/omiga-group/omiga/src/order/shared/repositories"
	"github.com/omiga-group/omiga/src/shared/enterprise/configuration"
	"github.com/omiga-group/omiga/src/shared/enterprise/cron"
	"github.com/omiga-group/omiga/src/shared/enterprise/database/postgres"
	"github.com/omiga-group/omiga/src/shared/enterprise/messaging/pulsar"
	"github.com/omiga-group/omiga/src/shared/enterprise/outbox"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func NewCronService(logger *zap.SugaredLogger) (cron.CronService, error) {
	cronService, err := cron.NewCronService(logger)
	if err != nil {
		return nil, err
	}
	return cronService, nil
}

func NewEntgoClient(logger *zap.SugaredLogger, postgresSettings postgres.PostgresSettings) (repositories.EntgoClient, error) {
	database, err := postgres.NewPostgres(logger, postgresSettings)
	if err != nil {
		return nil, err
	}
	entgoClient, err := repositories.NewEntgoClient(logger, database)
	if err != nil {
		return nil, err
	}
	return entgoClient, nil
}

func NewOrderOutboxBackgroundService(ctx context.Context, logger *zap.SugaredLogger, pulsarSettings pulsar.PulsarSettings, outboxSettings outbox.OutboxSettings, topic string, entgoClinet repositories.EntgoClient, cronService cron.CronService) (outbox2.OutboxBackgroundService, error) {
	messageProducer, err := pulsar.NewPulsarMessageProducer(logger, pulsarSettings, topic)
	if err != nil {
		return nil, err
	}
	outboxBackgroundService, err := outbox2.NewOutboxBackgroundService(ctx, logger, outboxSettings, messageProducer, topic, entgoClinet, cronService)
	if err != nil {
		return nil, err
	}
	return outboxBackgroundService, nil
}

func NewHttpServer(logger *zap.SugaredLogger, appSettings configuration.AppSettings, entgoClinet repositories.EntgoClient, orderOutboxBackgroundService outbox2.OutboxBackgroundService) (http.HttpServer, error) {
	outboxPublisher, err := outbox2.NewOutboxPublisher(logger, entgoClinet)
	if err != nil {
		return nil, err
	}
	orderPublisher, err := publishers.NewOrderPublisher(logger, outboxPublisher)
	if err != nil {
		return nil, err
	}
	orderService, err := services.NewOrderService(logger, entgoClinet, orderPublisher)
	if err != nil {
		return nil, err
	}
	server, err := graphql.NewGraphQLServer(entgoClinet, orderService, orderOutboxBackgroundService)
	if err != nil {
		return nil, err
	}
	httpServer, err := http.NewHttpServer(appSettings, server)
	if err != nil {
		return nil, err
	}
	return httpServer, nil
}
