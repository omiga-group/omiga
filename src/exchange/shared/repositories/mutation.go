// Code generated by ent, DO NOT EDIT.

package repositories

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/omiga-group/omiga/src/exchange/shared/repositories/exchange"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/outbox"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeExchange = "Exchange"
	TypeOutbox   = "Outbox"
)

// ExchangeMutation represents an operation that mutates the Exchange nodes in the graph.
type ExchangeMutation struct {
	config
	op                                 Op
	typ                                string
	id                                 *int
	exchange_id                        *string
	name                               *string
	year_established                   *int
	addyear_established                *int
	country                            *string
	image                              *string
	links                              *map[string]string
	has_trading_incentive              *bool
	centralized                        *bool
	public_notice                      *string
	alert_notice                       *string
	trust_score                        *int
	addtrust_score                     *int
	trust_score_rank                   *int
	addtrust_score_rank                *int
	trade_volume_24h_btc               *float64
	addtrade_volume_24h_btc            *float64
	trade_volume_24h_btc_normalized    *float64
	addtrade_volume_24h_btc_normalized *float64
	clearedFields                      map[string]struct{}
	done                               bool
	oldValue                           func(context.Context) (*Exchange, error)
	predicates                         []predicate.Exchange
}

var _ ent.Mutation = (*ExchangeMutation)(nil)

// exchangeOption allows management of the mutation configuration using functional options.
type exchangeOption func(*ExchangeMutation)

// newExchangeMutation creates new mutation for the Exchange entity.
func newExchangeMutation(c config, op Op, opts ...exchangeOption) *ExchangeMutation {
	m := &ExchangeMutation{
		config:        c,
		op:            op,
		typ:           TypeExchange,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExchangeID sets the ID field of the mutation.
func withExchangeID(id int) exchangeOption {
	return func(m *ExchangeMutation) {
		var (
			err   error
			once  sync.Once
			value *Exchange
		)
		m.oldValue = func(ctx context.Context) (*Exchange, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Exchange.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExchange sets the old Exchange of the mutation.
func withExchange(node *Exchange) exchangeOption {
	return func(m *ExchangeMutation) {
		m.oldValue = func(context.Context) (*Exchange, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExchangeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExchangeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("repositories: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExchangeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExchangeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Exchange.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetExchangeID sets the "exchange_id" field.
func (m *ExchangeMutation) SetExchangeID(s string) {
	m.exchange_id = &s
}

// ExchangeID returns the value of the "exchange_id" field in the mutation.
func (m *ExchangeMutation) ExchangeID() (r string, exists bool) {
	v := m.exchange_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExchangeID returns the old "exchange_id" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldExchangeID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExchangeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExchangeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExchangeID: %w", err)
	}
	return oldValue.ExchangeID, nil
}

// ResetExchangeID resets all changes to the "exchange_id" field.
func (m *ExchangeMutation) ResetExchangeID() {
	m.exchange_id = nil
}

// SetName sets the "name" field.
func (m *ExchangeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ExchangeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *ExchangeMutation) ClearName() {
	m.name = nil
	m.clearedFields[exchange.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *ExchangeMutation) NameCleared() bool {
	_, ok := m.clearedFields[exchange.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *ExchangeMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, exchange.FieldName)
}

// SetYearEstablished sets the "year_established" field.
func (m *ExchangeMutation) SetYearEstablished(i int) {
	m.year_established = &i
	m.addyear_established = nil
}

// YearEstablished returns the value of the "year_established" field in the mutation.
func (m *ExchangeMutation) YearEstablished() (r int, exists bool) {
	v := m.year_established
	if v == nil {
		return
	}
	return *v, true
}

// OldYearEstablished returns the old "year_established" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldYearEstablished(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYearEstablished is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYearEstablished requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYearEstablished: %w", err)
	}
	return oldValue.YearEstablished, nil
}

// AddYearEstablished adds i to the "year_established" field.
func (m *ExchangeMutation) AddYearEstablished(i int) {
	if m.addyear_established != nil {
		*m.addyear_established += i
	} else {
		m.addyear_established = &i
	}
}

// AddedYearEstablished returns the value that was added to the "year_established" field in this mutation.
func (m *ExchangeMutation) AddedYearEstablished() (r int, exists bool) {
	v := m.addyear_established
	if v == nil {
		return
	}
	return *v, true
}

// ClearYearEstablished clears the value of the "year_established" field.
func (m *ExchangeMutation) ClearYearEstablished() {
	m.year_established = nil
	m.addyear_established = nil
	m.clearedFields[exchange.FieldYearEstablished] = struct{}{}
}

// YearEstablishedCleared returns if the "year_established" field was cleared in this mutation.
func (m *ExchangeMutation) YearEstablishedCleared() bool {
	_, ok := m.clearedFields[exchange.FieldYearEstablished]
	return ok
}

// ResetYearEstablished resets all changes to the "year_established" field.
func (m *ExchangeMutation) ResetYearEstablished() {
	m.year_established = nil
	m.addyear_established = nil
	delete(m.clearedFields, exchange.FieldYearEstablished)
}

// SetCountry sets the "country" field.
func (m *ExchangeMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *ExchangeMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ClearCountry clears the value of the "country" field.
func (m *ExchangeMutation) ClearCountry() {
	m.country = nil
	m.clearedFields[exchange.FieldCountry] = struct{}{}
}

// CountryCleared returns if the "country" field was cleared in this mutation.
func (m *ExchangeMutation) CountryCleared() bool {
	_, ok := m.clearedFields[exchange.FieldCountry]
	return ok
}

// ResetCountry resets all changes to the "country" field.
func (m *ExchangeMutation) ResetCountry() {
	m.country = nil
	delete(m.clearedFields, exchange.FieldCountry)
}

// SetImage sets the "image" field.
func (m *ExchangeMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *ExchangeMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ClearImage clears the value of the "image" field.
func (m *ExchangeMutation) ClearImage() {
	m.image = nil
	m.clearedFields[exchange.FieldImage] = struct{}{}
}

// ImageCleared returns if the "image" field was cleared in this mutation.
func (m *ExchangeMutation) ImageCleared() bool {
	_, ok := m.clearedFields[exchange.FieldImage]
	return ok
}

// ResetImage resets all changes to the "image" field.
func (m *ExchangeMutation) ResetImage() {
	m.image = nil
	delete(m.clearedFields, exchange.FieldImage)
}

// SetLinks sets the "links" field.
func (m *ExchangeMutation) SetLinks(value map[string]string) {
	m.links = &value
}

// Links returns the value of the "links" field in the mutation.
func (m *ExchangeMutation) Links() (r map[string]string, exists bool) {
	v := m.links
	if v == nil {
		return
	}
	return *v, true
}

// OldLinks returns the old "links" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldLinks(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLinks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLinks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLinks: %w", err)
	}
	return oldValue.Links, nil
}

// ClearLinks clears the value of the "links" field.
func (m *ExchangeMutation) ClearLinks() {
	m.links = nil
	m.clearedFields[exchange.FieldLinks] = struct{}{}
}

// LinksCleared returns if the "links" field was cleared in this mutation.
func (m *ExchangeMutation) LinksCleared() bool {
	_, ok := m.clearedFields[exchange.FieldLinks]
	return ok
}

// ResetLinks resets all changes to the "links" field.
func (m *ExchangeMutation) ResetLinks() {
	m.links = nil
	delete(m.clearedFields, exchange.FieldLinks)
}

// SetHasTradingIncentive sets the "has_trading_incentive" field.
func (m *ExchangeMutation) SetHasTradingIncentive(b bool) {
	m.has_trading_incentive = &b
}

// HasTradingIncentive returns the value of the "has_trading_incentive" field in the mutation.
func (m *ExchangeMutation) HasTradingIncentive() (r bool, exists bool) {
	v := m.has_trading_incentive
	if v == nil {
		return
	}
	return *v, true
}

// OldHasTradingIncentive returns the old "has_trading_incentive" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldHasTradingIncentive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasTradingIncentive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasTradingIncentive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasTradingIncentive: %w", err)
	}
	return oldValue.HasTradingIncentive, nil
}

// ResetHasTradingIncentive resets all changes to the "has_trading_incentive" field.
func (m *ExchangeMutation) ResetHasTradingIncentive() {
	m.has_trading_incentive = nil
}

// SetCentralized sets the "centralized" field.
func (m *ExchangeMutation) SetCentralized(b bool) {
	m.centralized = &b
}

// Centralized returns the value of the "centralized" field in the mutation.
func (m *ExchangeMutation) Centralized() (r bool, exists bool) {
	v := m.centralized
	if v == nil {
		return
	}
	return *v, true
}

// OldCentralized returns the old "centralized" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldCentralized(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCentralized is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCentralized requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCentralized: %w", err)
	}
	return oldValue.Centralized, nil
}

// ResetCentralized resets all changes to the "centralized" field.
func (m *ExchangeMutation) ResetCentralized() {
	m.centralized = nil
}

// SetPublicNotice sets the "public_notice" field.
func (m *ExchangeMutation) SetPublicNotice(s string) {
	m.public_notice = &s
}

// PublicNotice returns the value of the "public_notice" field in the mutation.
func (m *ExchangeMutation) PublicNotice() (r string, exists bool) {
	v := m.public_notice
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicNotice returns the old "public_notice" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldPublicNotice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicNotice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicNotice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicNotice: %w", err)
	}
	return oldValue.PublicNotice, nil
}

// ResetPublicNotice resets all changes to the "public_notice" field.
func (m *ExchangeMutation) ResetPublicNotice() {
	m.public_notice = nil
}

// SetAlertNotice sets the "alert_notice" field.
func (m *ExchangeMutation) SetAlertNotice(s string) {
	m.alert_notice = &s
}

// AlertNotice returns the value of the "alert_notice" field in the mutation.
func (m *ExchangeMutation) AlertNotice() (r string, exists bool) {
	v := m.alert_notice
	if v == nil {
		return
	}
	return *v, true
}

// OldAlertNotice returns the old "alert_notice" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldAlertNotice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlertNotice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlertNotice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlertNotice: %w", err)
	}
	return oldValue.AlertNotice, nil
}

// ResetAlertNotice resets all changes to the "alert_notice" field.
func (m *ExchangeMutation) ResetAlertNotice() {
	m.alert_notice = nil
}

// SetTrustScore sets the "trust_score" field.
func (m *ExchangeMutation) SetTrustScore(i int) {
	m.trust_score = &i
	m.addtrust_score = nil
}

// TrustScore returns the value of the "trust_score" field in the mutation.
func (m *ExchangeMutation) TrustScore() (r int, exists bool) {
	v := m.trust_score
	if v == nil {
		return
	}
	return *v, true
}

// OldTrustScore returns the old "trust_score" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldTrustScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrustScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrustScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrustScore: %w", err)
	}
	return oldValue.TrustScore, nil
}

// AddTrustScore adds i to the "trust_score" field.
func (m *ExchangeMutation) AddTrustScore(i int) {
	if m.addtrust_score != nil {
		*m.addtrust_score += i
	} else {
		m.addtrust_score = &i
	}
}

// AddedTrustScore returns the value that was added to the "trust_score" field in this mutation.
func (m *ExchangeMutation) AddedTrustScore() (r int, exists bool) {
	v := m.addtrust_score
	if v == nil {
		return
	}
	return *v, true
}

// ResetTrustScore resets all changes to the "trust_score" field.
func (m *ExchangeMutation) ResetTrustScore() {
	m.trust_score = nil
	m.addtrust_score = nil
}

// SetTrustScoreRank sets the "trust_score_rank" field.
func (m *ExchangeMutation) SetTrustScoreRank(i int) {
	m.trust_score_rank = &i
	m.addtrust_score_rank = nil
}

// TrustScoreRank returns the value of the "trust_score_rank" field in the mutation.
func (m *ExchangeMutation) TrustScoreRank() (r int, exists bool) {
	v := m.trust_score_rank
	if v == nil {
		return
	}
	return *v, true
}

// OldTrustScoreRank returns the old "trust_score_rank" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldTrustScoreRank(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrustScoreRank is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrustScoreRank requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrustScoreRank: %w", err)
	}
	return oldValue.TrustScoreRank, nil
}

// AddTrustScoreRank adds i to the "trust_score_rank" field.
func (m *ExchangeMutation) AddTrustScoreRank(i int) {
	if m.addtrust_score_rank != nil {
		*m.addtrust_score_rank += i
	} else {
		m.addtrust_score_rank = &i
	}
}

// AddedTrustScoreRank returns the value that was added to the "trust_score_rank" field in this mutation.
func (m *ExchangeMutation) AddedTrustScoreRank() (r int, exists bool) {
	v := m.addtrust_score_rank
	if v == nil {
		return
	}
	return *v, true
}

// ResetTrustScoreRank resets all changes to the "trust_score_rank" field.
func (m *ExchangeMutation) ResetTrustScoreRank() {
	m.trust_score_rank = nil
	m.addtrust_score_rank = nil
}

// SetTradeVolume24hBtc sets the "trade_volume_24h_btc" field.
func (m *ExchangeMutation) SetTradeVolume24hBtc(f float64) {
	m.trade_volume_24h_btc = &f
	m.addtrade_volume_24h_btc = nil
}

// TradeVolume24hBtc returns the value of the "trade_volume_24h_btc" field in the mutation.
func (m *ExchangeMutation) TradeVolume24hBtc() (r float64, exists bool) {
	v := m.trade_volume_24h_btc
	if v == nil {
		return
	}
	return *v, true
}

// OldTradeVolume24hBtc returns the old "trade_volume_24h_btc" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldTradeVolume24hBtc(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTradeVolume24hBtc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTradeVolume24hBtc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTradeVolume24hBtc: %w", err)
	}
	return oldValue.TradeVolume24hBtc, nil
}

// AddTradeVolume24hBtc adds f to the "trade_volume_24h_btc" field.
func (m *ExchangeMutation) AddTradeVolume24hBtc(f float64) {
	if m.addtrade_volume_24h_btc != nil {
		*m.addtrade_volume_24h_btc += f
	} else {
		m.addtrade_volume_24h_btc = &f
	}
}

// AddedTradeVolume24hBtc returns the value that was added to the "trade_volume_24h_btc" field in this mutation.
func (m *ExchangeMutation) AddedTradeVolume24hBtc() (r float64, exists bool) {
	v := m.addtrade_volume_24h_btc
	if v == nil {
		return
	}
	return *v, true
}

// ResetTradeVolume24hBtc resets all changes to the "trade_volume_24h_btc" field.
func (m *ExchangeMutation) ResetTradeVolume24hBtc() {
	m.trade_volume_24h_btc = nil
	m.addtrade_volume_24h_btc = nil
}

// SetTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field.
func (m *ExchangeMutation) SetTradeVolume24hBtcNormalized(f float64) {
	m.trade_volume_24h_btc_normalized = &f
	m.addtrade_volume_24h_btc_normalized = nil
}

// TradeVolume24hBtcNormalized returns the value of the "trade_volume_24h_btc_normalized" field in the mutation.
func (m *ExchangeMutation) TradeVolume24hBtcNormalized() (r float64, exists bool) {
	v := m.trade_volume_24h_btc_normalized
	if v == nil {
		return
	}
	return *v, true
}

// OldTradeVolume24hBtcNormalized returns the old "trade_volume_24h_btc_normalized" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldTradeVolume24hBtcNormalized(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTradeVolume24hBtcNormalized is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTradeVolume24hBtcNormalized requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTradeVolume24hBtcNormalized: %w", err)
	}
	return oldValue.TradeVolume24hBtcNormalized, nil
}

// AddTradeVolume24hBtcNormalized adds f to the "trade_volume_24h_btc_normalized" field.
func (m *ExchangeMutation) AddTradeVolume24hBtcNormalized(f float64) {
	if m.addtrade_volume_24h_btc_normalized != nil {
		*m.addtrade_volume_24h_btc_normalized += f
	} else {
		m.addtrade_volume_24h_btc_normalized = &f
	}
}

// AddedTradeVolume24hBtcNormalized returns the value that was added to the "trade_volume_24h_btc_normalized" field in this mutation.
func (m *ExchangeMutation) AddedTradeVolume24hBtcNormalized() (r float64, exists bool) {
	v := m.addtrade_volume_24h_btc_normalized
	if v == nil {
		return
	}
	return *v, true
}

// ResetTradeVolume24hBtcNormalized resets all changes to the "trade_volume_24h_btc_normalized" field.
func (m *ExchangeMutation) ResetTradeVolume24hBtcNormalized() {
	m.trade_volume_24h_btc_normalized = nil
	m.addtrade_volume_24h_btc_normalized = nil
}

// Where appends a list predicates to the ExchangeMutation builder.
func (m *ExchangeMutation) Where(ps ...predicate.Exchange) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ExchangeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Exchange).
func (m *ExchangeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExchangeMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.exchange_id != nil {
		fields = append(fields, exchange.FieldExchangeID)
	}
	if m.name != nil {
		fields = append(fields, exchange.FieldName)
	}
	if m.year_established != nil {
		fields = append(fields, exchange.FieldYearEstablished)
	}
	if m.country != nil {
		fields = append(fields, exchange.FieldCountry)
	}
	if m.image != nil {
		fields = append(fields, exchange.FieldImage)
	}
	if m.links != nil {
		fields = append(fields, exchange.FieldLinks)
	}
	if m.has_trading_incentive != nil {
		fields = append(fields, exchange.FieldHasTradingIncentive)
	}
	if m.centralized != nil {
		fields = append(fields, exchange.FieldCentralized)
	}
	if m.public_notice != nil {
		fields = append(fields, exchange.FieldPublicNotice)
	}
	if m.alert_notice != nil {
		fields = append(fields, exchange.FieldAlertNotice)
	}
	if m.trust_score != nil {
		fields = append(fields, exchange.FieldTrustScore)
	}
	if m.trust_score_rank != nil {
		fields = append(fields, exchange.FieldTrustScoreRank)
	}
	if m.trade_volume_24h_btc != nil {
		fields = append(fields, exchange.FieldTradeVolume24hBtc)
	}
	if m.trade_volume_24h_btc_normalized != nil {
		fields = append(fields, exchange.FieldTradeVolume24hBtcNormalized)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExchangeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case exchange.FieldExchangeID:
		return m.ExchangeID()
	case exchange.FieldName:
		return m.Name()
	case exchange.FieldYearEstablished:
		return m.YearEstablished()
	case exchange.FieldCountry:
		return m.Country()
	case exchange.FieldImage:
		return m.Image()
	case exchange.FieldLinks:
		return m.Links()
	case exchange.FieldHasTradingIncentive:
		return m.HasTradingIncentive()
	case exchange.FieldCentralized:
		return m.Centralized()
	case exchange.FieldPublicNotice:
		return m.PublicNotice()
	case exchange.FieldAlertNotice:
		return m.AlertNotice()
	case exchange.FieldTrustScore:
		return m.TrustScore()
	case exchange.FieldTrustScoreRank:
		return m.TrustScoreRank()
	case exchange.FieldTradeVolume24hBtc:
		return m.TradeVolume24hBtc()
	case exchange.FieldTradeVolume24hBtcNormalized:
		return m.TradeVolume24hBtcNormalized()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExchangeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case exchange.FieldExchangeID:
		return m.OldExchangeID(ctx)
	case exchange.FieldName:
		return m.OldName(ctx)
	case exchange.FieldYearEstablished:
		return m.OldYearEstablished(ctx)
	case exchange.FieldCountry:
		return m.OldCountry(ctx)
	case exchange.FieldImage:
		return m.OldImage(ctx)
	case exchange.FieldLinks:
		return m.OldLinks(ctx)
	case exchange.FieldHasTradingIncentive:
		return m.OldHasTradingIncentive(ctx)
	case exchange.FieldCentralized:
		return m.OldCentralized(ctx)
	case exchange.FieldPublicNotice:
		return m.OldPublicNotice(ctx)
	case exchange.FieldAlertNotice:
		return m.OldAlertNotice(ctx)
	case exchange.FieldTrustScore:
		return m.OldTrustScore(ctx)
	case exchange.FieldTrustScoreRank:
		return m.OldTrustScoreRank(ctx)
	case exchange.FieldTradeVolume24hBtc:
		return m.OldTradeVolume24hBtc(ctx)
	case exchange.FieldTradeVolume24hBtcNormalized:
		return m.OldTradeVolume24hBtcNormalized(ctx)
	}
	return nil, fmt.Errorf("unknown Exchange field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExchangeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case exchange.FieldExchangeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExchangeID(v)
		return nil
	case exchange.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case exchange.FieldYearEstablished:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYearEstablished(v)
		return nil
	case exchange.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case exchange.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case exchange.FieldLinks:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLinks(v)
		return nil
	case exchange.FieldHasTradingIncentive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasTradingIncentive(v)
		return nil
	case exchange.FieldCentralized:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCentralized(v)
		return nil
	case exchange.FieldPublicNotice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicNotice(v)
		return nil
	case exchange.FieldAlertNotice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlertNotice(v)
		return nil
	case exchange.FieldTrustScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrustScore(v)
		return nil
	case exchange.FieldTrustScoreRank:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrustScoreRank(v)
		return nil
	case exchange.FieldTradeVolume24hBtc:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTradeVolume24hBtc(v)
		return nil
	case exchange.FieldTradeVolume24hBtcNormalized:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTradeVolume24hBtcNormalized(v)
		return nil
	}
	return fmt.Errorf("unknown Exchange field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExchangeMutation) AddedFields() []string {
	var fields []string
	if m.addyear_established != nil {
		fields = append(fields, exchange.FieldYearEstablished)
	}
	if m.addtrust_score != nil {
		fields = append(fields, exchange.FieldTrustScore)
	}
	if m.addtrust_score_rank != nil {
		fields = append(fields, exchange.FieldTrustScoreRank)
	}
	if m.addtrade_volume_24h_btc != nil {
		fields = append(fields, exchange.FieldTradeVolume24hBtc)
	}
	if m.addtrade_volume_24h_btc_normalized != nil {
		fields = append(fields, exchange.FieldTradeVolume24hBtcNormalized)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExchangeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case exchange.FieldYearEstablished:
		return m.AddedYearEstablished()
	case exchange.FieldTrustScore:
		return m.AddedTrustScore()
	case exchange.FieldTrustScoreRank:
		return m.AddedTrustScoreRank()
	case exchange.FieldTradeVolume24hBtc:
		return m.AddedTradeVolume24hBtc()
	case exchange.FieldTradeVolume24hBtcNormalized:
		return m.AddedTradeVolume24hBtcNormalized()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExchangeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case exchange.FieldYearEstablished:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddYearEstablished(v)
		return nil
	case exchange.FieldTrustScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTrustScore(v)
		return nil
	case exchange.FieldTrustScoreRank:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTrustScoreRank(v)
		return nil
	case exchange.FieldTradeVolume24hBtc:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTradeVolume24hBtc(v)
		return nil
	case exchange.FieldTradeVolume24hBtcNormalized:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTradeVolume24hBtcNormalized(v)
		return nil
	}
	return fmt.Errorf("unknown Exchange numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExchangeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(exchange.FieldName) {
		fields = append(fields, exchange.FieldName)
	}
	if m.FieldCleared(exchange.FieldYearEstablished) {
		fields = append(fields, exchange.FieldYearEstablished)
	}
	if m.FieldCleared(exchange.FieldCountry) {
		fields = append(fields, exchange.FieldCountry)
	}
	if m.FieldCleared(exchange.FieldImage) {
		fields = append(fields, exchange.FieldImage)
	}
	if m.FieldCleared(exchange.FieldLinks) {
		fields = append(fields, exchange.FieldLinks)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExchangeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExchangeMutation) ClearField(name string) error {
	switch name {
	case exchange.FieldName:
		m.ClearName()
		return nil
	case exchange.FieldYearEstablished:
		m.ClearYearEstablished()
		return nil
	case exchange.FieldCountry:
		m.ClearCountry()
		return nil
	case exchange.FieldImage:
		m.ClearImage()
		return nil
	case exchange.FieldLinks:
		m.ClearLinks()
		return nil
	}
	return fmt.Errorf("unknown Exchange nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExchangeMutation) ResetField(name string) error {
	switch name {
	case exchange.FieldExchangeID:
		m.ResetExchangeID()
		return nil
	case exchange.FieldName:
		m.ResetName()
		return nil
	case exchange.FieldYearEstablished:
		m.ResetYearEstablished()
		return nil
	case exchange.FieldCountry:
		m.ResetCountry()
		return nil
	case exchange.FieldImage:
		m.ResetImage()
		return nil
	case exchange.FieldLinks:
		m.ResetLinks()
		return nil
	case exchange.FieldHasTradingIncentive:
		m.ResetHasTradingIncentive()
		return nil
	case exchange.FieldCentralized:
		m.ResetCentralized()
		return nil
	case exchange.FieldPublicNotice:
		m.ResetPublicNotice()
		return nil
	case exchange.FieldAlertNotice:
		m.ResetAlertNotice()
		return nil
	case exchange.FieldTrustScore:
		m.ResetTrustScore()
		return nil
	case exchange.FieldTrustScoreRank:
		m.ResetTrustScoreRank()
		return nil
	case exchange.FieldTradeVolume24hBtc:
		m.ResetTradeVolume24hBtc()
		return nil
	case exchange.FieldTradeVolume24hBtcNormalized:
		m.ResetTradeVolume24hBtcNormalized()
		return nil
	}
	return fmt.Errorf("unknown Exchange field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExchangeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExchangeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExchangeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExchangeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExchangeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExchangeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExchangeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Exchange unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExchangeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Exchange edge %s", name)
}

// OutboxMutation represents an operation that mutates the Outbox nodes in the graph.
type OutboxMutation struct {
	config
	op                Op
	typ               string
	id                *int
	timestamp         *time.Time
	topic             *string
	key               *string
	payload           *[]byte
	headers           *map[string]string
	retry_count       *int
	addretry_count    *int
	status            *outbox.Status
	last_retry        *time.Time
	processing_errors *[]string
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Outbox, error)
	predicates        []predicate.Outbox
}

var _ ent.Mutation = (*OutboxMutation)(nil)

// outboxOption allows management of the mutation configuration using functional options.
type outboxOption func(*OutboxMutation)

// newOutboxMutation creates new mutation for the Outbox entity.
func newOutboxMutation(c config, op Op, opts ...outboxOption) *OutboxMutation {
	m := &OutboxMutation{
		config:        c,
		op:            op,
		typ:           TypeOutbox,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOutboxID sets the ID field of the mutation.
func withOutboxID(id int) outboxOption {
	return func(m *OutboxMutation) {
		var (
			err   error
			once  sync.Once
			value *Outbox
		)
		m.oldValue = func(ctx context.Context) (*Outbox, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Outbox.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOutbox sets the old Outbox of the mutation.
func withOutbox(node *Outbox) outboxOption {
	return func(m *OutboxMutation) {
		m.oldValue = func(context.Context) (*Outbox, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OutboxMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OutboxMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("repositories: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OutboxMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OutboxMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Outbox.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTimestamp sets the "timestamp" field.
func (m *OutboxMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *OutboxMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *OutboxMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetTopic sets the "topic" field.
func (m *OutboxMutation) SetTopic(s string) {
	m.topic = &s
}

// Topic returns the value of the "topic" field in the mutation.
func (m *OutboxMutation) Topic() (r string, exists bool) {
	v := m.topic
	if v == nil {
		return
	}
	return *v, true
}

// OldTopic returns the old "topic" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldTopic(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTopic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTopic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopic: %w", err)
	}
	return oldValue.Topic, nil
}

// ResetTopic resets all changes to the "topic" field.
func (m *OutboxMutation) ResetTopic() {
	m.topic = nil
}

// SetKey sets the "key" field.
func (m *OutboxMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *OutboxMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *OutboxMutation) ResetKey() {
	m.key = nil
}

// SetPayload sets the "payload" field.
func (m *OutboxMutation) SetPayload(b []byte) {
	m.payload = &b
}

// Payload returns the value of the "payload" field in the mutation.
func (m *OutboxMutation) Payload() (r []byte, exists bool) {
	v := m.payload
	if v == nil {
		return
	}
	return *v, true
}

// OldPayload returns the old "payload" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldPayload(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayload: %w", err)
	}
	return oldValue.Payload, nil
}

// ResetPayload resets all changes to the "payload" field.
func (m *OutboxMutation) ResetPayload() {
	m.payload = nil
}

// SetHeaders sets the "headers" field.
func (m *OutboxMutation) SetHeaders(value map[string]string) {
	m.headers = &value
}

// Headers returns the value of the "headers" field in the mutation.
func (m *OutboxMutation) Headers() (r map[string]string, exists bool) {
	v := m.headers
	if v == nil {
		return
	}
	return *v, true
}

// OldHeaders returns the old "headers" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldHeaders(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeaders is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeaders requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeaders: %w", err)
	}
	return oldValue.Headers, nil
}

// ResetHeaders resets all changes to the "headers" field.
func (m *OutboxMutation) ResetHeaders() {
	m.headers = nil
}

// SetRetryCount sets the "retry_count" field.
func (m *OutboxMutation) SetRetryCount(i int) {
	m.retry_count = &i
	m.addretry_count = nil
}

// RetryCount returns the value of the "retry_count" field in the mutation.
func (m *OutboxMutation) RetryCount() (r int, exists bool) {
	v := m.retry_count
	if v == nil {
		return
	}
	return *v, true
}

// OldRetryCount returns the old "retry_count" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldRetryCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetryCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetryCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetryCount: %w", err)
	}
	return oldValue.RetryCount, nil
}

// AddRetryCount adds i to the "retry_count" field.
func (m *OutboxMutation) AddRetryCount(i int) {
	if m.addretry_count != nil {
		*m.addretry_count += i
	} else {
		m.addretry_count = &i
	}
}

// AddedRetryCount returns the value that was added to the "retry_count" field in this mutation.
func (m *OutboxMutation) AddedRetryCount() (r int, exists bool) {
	v := m.addretry_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetRetryCount resets all changes to the "retry_count" field.
func (m *OutboxMutation) ResetRetryCount() {
	m.retry_count = nil
	m.addretry_count = nil
}

// SetStatus sets the "status" field.
func (m *OutboxMutation) SetStatus(o outbox.Status) {
	m.status = &o
}

// Status returns the value of the "status" field in the mutation.
func (m *OutboxMutation) Status() (r outbox.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldStatus(ctx context.Context) (v outbox.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *OutboxMutation) ResetStatus() {
	m.status = nil
}

// SetLastRetry sets the "last_retry" field.
func (m *OutboxMutation) SetLastRetry(t time.Time) {
	m.last_retry = &t
}

// LastRetry returns the value of the "last_retry" field in the mutation.
func (m *OutboxMutation) LastRetry() (r time.Time, exists bool) {
	v := m.last_retry
	if v == nil {
		return
	}
	return *v, true
}

// OldLastRetry returns the old "last_retry" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldLastRetry(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastRetry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastRetry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastRetry: %w", err)
	}
	return oldValue.LastRetry, nil
}

// ClearLastRetry clears the value of the "last_retry" field.
func (m *OutboxMutation) ClearLastRetry() {
	m.last_retry = nil
	m.clearedFields[outbox.FieldLastRetry] = struct{}{}
}

// LastRetryCleared returns if the "last_retry" field was cleared in this mutation.
func (m *OutboxMutation) LastRetryCleared() bool {
	_, ok := m.clearedFields[outbox.FieldLastRetry]
	return ok
}

// ResetLastRetry resets all changes to the "last_retry" field.
func (m *OutboxMutation) ResetLastRetry() {
	m.last_retry = nil
	delete(m.clearedFields, outbox.FieldLastRetry)
}

// SetProcessingErrors sets the "processing_errors" field.
func (m *OutboxMutation) SetProcessingErrors(s []string) {
	m.processing_errors = &s
}

// ProcessingErrors returns the value of the "processing_errors" field in the mutation.
func (m *OutboxMutation) ProcessingErrors() (r []string, exists bool) {
	v := m.processing_errors
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessingErrors returns the old "processing_errors" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldProcessingErrors(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessingErrors is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessingErrors requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessingErrors: %w", err)
	}
	return oldValue.ProcessingErrors, nil
}

// ClearProcessingErrors clears the value of the "processing_errors" field.
func (m *OutboxMutation) ClearProcessingErrors() {
	m.processing_errors = nil
	m.clearedFields[outbox.FieldProcessingErrors] = struct{}{}
}

// ProcessingErrorsCleared returns if the "processing_errors" field was cleared in this mutation.
func (m *OutboxMutation) ProcessingErrorsCleared() bool {
	_, ok := m.clearedFields[outbox.FieldProcessingErrors]
	return ok
}

// ResetProcessingErrors resets all changes to the "processing_errors" field.
func (m *OutboxMutation) ResetProcessingErrors() {
	m.processing_errors = nil
	delete(m.clearedFields, outbox.FieldProcessingErrors)
}

// Where appends a list predicates to the OutboxMutation builder.
func (m *OutboxMutation) Where(ps ...predicate.Outbox) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OutboxMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Outbox).
func (m *OutboxMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OutboxMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.timestamp != nil {
		fields = append(fields, outbox.FieldTimestamp)
	}
	if m.topic != nil {
		fields = append(fields, outbox.FieldTopic)
	}
	if m.key != nil {
		fields = append(fields, outbox.FieldKey)
	}
	if m.payload != nil {
		fields = append(fields, outbox.FieldPayload)
	}
	if m.headers != nil {
		fields = append(fields, outbox.FieldHeaders)
	}
	if m.retry_count != nil {
		fields = append(fields, outbox.FieldRetryCount)
	}
	if m.status != nil {
		fields = append(fields, outbox.FieldStatus)
	}
	if m.last_retry != nil {
		fields = append(fields, outbox.FieldLastRetry)
	}
	if m.processing_errors != nil {
		fields = append(fields, outbox.FieldProcessingErrors)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OutboxMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case outbox.FieldTimestamp:
		return m.Timestamp()
	case outbox.FieldTopic:
		return m.Topic()
	case outbox.FieldKey:
		return m.Key()
	case outbox.FieldPayload:
		return m.Payload()
	case outbox.FieldHeaders:
		return m.Headers()
	case outbox.FieldRetryCount:
		return m.RetryCount()
	case outbox.FieldStatus:
		return m.Status()
	case outbox.FieldLastRetry:
		return m.LastRetry()
	case outbox.FieldProcessingErrors:
		return m.ProcessingErrors()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OutboxMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case outbox.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case outbox.FieldTopic:
		return m.OldTopic(ctx)
	case outbox.FieldKey:
		return m.OldKey(ctx)
	case outbox.FieldPayload:
		return m.OldPayload(ctx)
	case outbox.FieldHeaders:
		return m.OldHeaders(ctx)
	case outbox.FieldRetryCount:
		return m.OldRetryCount(ctx)
	case outbox.FieldStatus:
		return m.OldStatus(ctx)
	case outbox.FieldLastRetry:
		return m.OldLastRetry(ctx)
	case outbox.FieldProcessingErrors:
		return m.OldProcessingErrors(ctx)
	}
	return nil, fmt.Errorf("unknown Outbox field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OutboxMutation) SetField(name string, value ent.Value) error {
	switch name {
	case outbox.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case outbox.FieldTopic:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopic(v)
		return nil
	case outbox.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case outbox.FieldPayload:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayload(v)
		return nil
	case outbox.FieldHeaders:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeaders(v)
		return nil
	case outbox.FieldRetryCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetryCount(v)
		return nil
	case outbox.FieldStatus:
		v, ok := value.(outbox.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case outbox.FieldLastRetry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastRetry(v)
		return nil
	case outbox.FieldProcessingErrors:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessingErrors(v)
		return nil
	}
	return fmt.Errorf("unknown Outbox field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OutboxMutation) AddedFields() []string {
	var fields []string
	if m.addretry_count != nil {
		fields = append(fields, outbox.FieldRetryCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OutboxMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case outbox.FieldRetryCount:
		return m.AddedRetryCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OutboxMutation) AddField(name string, value ent.Value) error {
	switch name {
	case outbox.FieldRetryCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRetryCount(v)
		return nil
	}
	return fmt.Errorf("unknown Outbox numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OutboxMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(outbox.FieldLastRetry) {
		fields = append(fields, outbox.FieldLastRetry)
	}
	if m.FieldCleared(outbox.FieldProcessingErrors) {
		fields = append(fields, outbox.FieldProcessingErrors)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OutboxMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OutboxMutation) ClearField(name string) error {
	switch name {
	case outbox.FieldLastRetry:
		m.ClearLastRetry()
		return nil
	case outbox.FieldProcessingErrors:
		m.ClearProcessingErrors()
		return nil
	}
	return fmt.Errorf("unknown Outbox nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OutboxMutation) ResetField(name string) error {
	switch name {
	case outbox.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case outbox.FieldTopic:
		m.ResetTopic()
		return nil
	case outbox.FieldKey:
		m.ResetKey()
		return nil
	case outbox.FieldPayload:
		m.ResetPayload()
		return nil
	case outbox.FieldHeaders:
		m.ResetHeaders()
		return nil
	case outbox.FieldRetryCount:
		m.ResetRetryCount()
		return nil
	case outbox.FieldStatus:
		m.ResetStatus()
		return nil
	case outbox.FieldLastRetry:
		m.ResetLastRetry()
		return nil
	case outbox.FieldProcessingErrors:
		m.ResetProcessingErrors()
		return nil
	}
	return fmt.Errorf("unknown Outbox field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OutboxMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OutboxMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OutboxMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OutboxMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OutboxMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OutboxMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OutboxMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Outbox unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OutboxMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Outbox edge %s", name)
}
