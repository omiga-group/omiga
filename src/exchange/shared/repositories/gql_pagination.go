// Code generated by ent, DO NOT EDIT.

package repositories

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/exchange"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/outbox"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/ticker"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// ExchangeEdge is the edge representation of Exchange.
type ExchangeEdge struct {
	Node   *Exchange `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// ExchangeConnection is the connection containing edges to Exchange.
type ExchangeConnection struct {
	Edges      []*ExchangeEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *ExchangeConnection) build(nodes []*Exchange, pager *exchangePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Exchange
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Exchange {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Exchange {
			return nodes[i]
		}
	}
	c.Edges = make([]*ExchangeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ExchangeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ExchangePaginateOption enables pagination customization.
type ExchangePaginateOption func(*exchangePager) error

// WithExchangeOrder configures pagination ordering.
func WithExchangeOrder(order *ExchangeOrder) ExchangePaginateOption {
	if order == nil {
		order = DefaultExchangeOrder
	}
	o := *order
	return func(pager *exchangePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultExchangeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithExchangeFilter configures pagination filter.
func WithExchangeFilter(filter func(*ExchangeQuery) (*ExchangeQuery, error)) ExchangePaginateOption {
	return func(pager *exchangePager) error {
		if filter == nil {
			return errors.New("ExchangeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type exchangePager struct {
	order  *ExchangeOrder
	filter func(*ExchangeQuery) (*ExchangeQuery, error)
}

func newExchangePager(opts []ExchangePaginateOption) (*exchangePager, error) {
	pager := &exchangePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultExchangeOrder
	}
	return pager, nil
}

func (p *exchangePager) applyFilter(query *ExchangeQuery) (*ExchangeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *exchangePager) toCursor(e *Exchange) Cursor {
	return p.order.Field.toCursor(e)
}

func (p *exchangePager) applyCursors(query *ExchangeQuery, after, before *Cursor) *ExchangeQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultExchangeOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *exchangePager) applyOrder(query *ExchangeQuery, reverse bool) *ExchangeQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultExchangeOrder.Field {
		query = query.Order(direction.orderFunc(DefaultExchangeOrder.Field.field))
	}
	return query
}

func (p *exchangePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultExchangeOrder.Field {
			b.Comma().Ident(DefaultExchangeOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Exchange.
func (e *ExchangeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ExchangePaginateOption,
) (*ExchangeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newExchangePager(opts)
	if err != nil {
		return nil, err
	}
	if e, err = pager.applyFilter(e); err != nil {
		return nil, err
	}
	conn := &ExchangeConnection{Edges: []*ExchangeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = e.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	e = pager.applyCursors(e, after, before)
	e = pager.applyOrder(e, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		e.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := e.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := e.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ExchangeOrderFieldExchangeID orders Exchange by exchange_id.
	ExchangeOrderFieldExchangeID = &ExchangeOrderField{
		field: exchange.FieldExchangeID,
		toCursor: func(e *Exchange) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.ExchangeID,
			}
		},
	}
	// ExchangeOrderFieldName orders Exchange by name.
	ExchangeOrderFieldName = &ExchangeOrderField{
		field: exchange.FieldName,
		toCursor: func(e *Exchange) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.Name,
			}
		},
	}
	// ExchangeOrderFieldYearEstablished orders Exchange by year_established.
	ExchangeOrderFieldYearEstablished = &ExchangeOrderField{
		field: exchange.FieldYearEstablished,
		toCursor: func(e *Exchange) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.YearEstablished,
			}
		},
	}
	// ExchangeOrderFieldCountry orders Exchange by country.
	ExchangeOrderFieldCountry = &ExchangeOrderField{
		field: exchange.FieldCountry,
		toCursor: func(e *Exchange) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.Country,
			}
		},
	}
	// ExchangeOrderFieldImage orders Exchange by image.
	ExchangeOrderFieldImage = &ExchangeOrderField{
		field: exchange.FieldImage,
		toCursor: func(e *Exchange) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.Image,
			}
		},
	}
	// ExchangeOrderFieldHasTradingIncentive orders Exchange by has_trading_incentive.
	ExchangeOrderFieldHasTradingIncentive = &ExchangeOrderField{
		field: exchange.FieldHasTradingIncentive,
		toCursor: func(e *Exchange) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.HasTradingIncentive,
			}
		},
	}
	// ExchangeOrderFieldCentralized orders Exchange by centralized.
	ExchangeOrderFieldCentralized = &ExchangeOrderField{
		field: exchange.FieldCentralized,
		toCursor: func(e *Exchange) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.Centralized,
			}
		},
	}
	// ExchangeOrderFieldPublicNotice orders Exchange by public_notice.
	ExchangeOrderFieldPublicNotice = &ExchangeOrderField{
		field: exchange.FieldPublicNotice,
		toCursor: func(e *Exchange) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.PublicNotice,
			}
		},
	}
	// ExchangeOrderFieldAlertNotice orders Exchange by alert_notice.
	ExchangeOrderFieldAlertNotice = &ExchangeOrderField{
		field: exchange.FieldAlertNotice,
		toCursor: func(e *Exchange) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.AlertNotice,
			}
		},
	}
	// ExchangeOrderFieldTrustScore orders Exchange by trust_score.
	ExchangeOrderFieldTrustScore = &ExchangeOrderField{
		field: exchange.FieldTrustScore,
		toCursor: func(e *Exchange) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.TrustScore,
			}
		},
	}
	// ExchangeOrderFieldTrustScoreRank orders Exchange by trust_score_rank.
	ExchangeOrderFieldTrustScoreRank = &ExchangeOrderField{
		field: exchange.FieldTrustScoreRank,
		toCursor: func(e *Exchange) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.TrustScoreRank,
			}
		},
	}
	// ExchangeOrderFieldTradeVolume24hBtc orders Exchange by trade_volume_24h_btc.
	ExchangeOrderFieldTradeVolume24hBtc = &ExchangeOrderField{
		field: exchange.FieldTradeVolume24hBtc,
		toCursor: func(e *Exchange) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.TradeVolume24hBtc,
			}
		},
	}
	// ExchangeOrderFieldTradeVolume24hBtcNormalized orders Exchange by trade_volume_24h_btc_normalized.
	ExchangeOrderFieldTradeVolume24hBtcNormalized = &ExchangeOrderField{
		field: exchange.FieldTradeVolume24hBtcNormalized,
		toCursor: func(e *Exchange) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.TradeVolume24hBtcNormalized,
			}
		},
	}
	// ExchangeOrderFieldMakerFee orders Exchange by maker_fee.
	ExchangeOrderFieldMakerFee = &ExchangeOrderField{
		field: exchange.FieldMakerFee,
		toCursor: func(e *Exchange) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.MakerFee,
			}
		},
	}
	// ExchangeOrderFieldTakerFee orders Exchange by taker_fee.
	ExchangeOrderFieldTakerFee = &ExchangeOrderField{
		field: exchange.FieldTakerFee,
		toCursor: func(e *Exchange) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.TakerFee,
			}
		},
	}
	// ExchangeOrderFieldSpreadFee orders Exchange by spread_fee.
	ExchangeOrderFieldSpreadFee = &ExchangeOrderField{
		field: exchange.FieldSpreadFee,
		toCursor: func(e *Exchange) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.SpreadFee,
			}
		},
	}
	// ExchangeOrderFieldSupportAPI orders Exchange by support_api.
	ExchangeOrderFieldSupportAPI = &ExchangeOrderField{
		field: exchange.FieldSupportAPI,
		toCursor: func(e *Exchange) Cursor {
			return Cursor{
				ID:    e.ID,
				Value: e.SupportAPI,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ExchangeOrderField) String() string {
	var str string
	switch f.field {
	case exchange.FieldExchangeID:
		str = "exchangeId"
	case exchange.FieldName:
		str = "name"
	case exchange.FieldYearEstablished:
		str = "yearEstablished"
	case exchange.FieldCountry:
		str = "country"
	case exchange.FieldImage:
		str = "image"
	case exchange.FieldHasTradingIncentive:
		str = "hasTradingIncentive"
	case exchange.FieldCentralized:
		str = "centralized"
	case exchange.FieldPublicNotice:
		str = "publicNotice"
	case exchange.FieldAlertNotice:
		str = "alertNotice"
	case exchange.FieldTrustScore:
		str = "trustScore"
	case exchange.FieldTrustScoreRank:
		str = "trustScoreRank"
	case exchange.FieldTradeVolume24hBtc:
		str = "tradeVolume24hBtc"
	case exchange.FieldTradeVolume24hBtcNormalized:
		str = "tradeVolume24hBtcNormalized"
	case exchange.FieldMakerFee:
		str = "makerFee"
	case exchange.FieldTakerFee:
		str = "takerFee"
	case exchange.FieldSpreadFee:
		str = "spreadFee"
	case exchange.FieldSupportAPI:
		str = "supportAPI"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ExchangeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ExchangeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ExchangeOrderField %T must be a string", v)
	}
	switch str {
	case "exchangeId":
		*f = *ExchangeOrderFieldExchangeID
	case "name":
		*f = *ExchangeOrderFieldName
	case "yearEstablished":
		*f = *ExchangeOrderFieldYearEstablished
	case "country":
		*f = *ExchangeOrderFieldCountry
	case "image":
		*f = *ExchangeOrderFieldImage
	case "hasTradingIncentive":
		*f = *ExchangeOrderFieldHasTradingIncentive
	case "centralized":
		*f = *ExchangeOrderFieldCentralized
	case "publicNotice":
		*f = *ExchangeOrderFieldPublicNotice
	case "alertNotice":
		*f = *ExchangeOrderFieldAlertNotice
	case "trustScore":
		*f = *ExchangeOrderFieldTrustScore
	case "trustScoreRank":
		*f = *ExchangeOrderFieldTrustScoreRank
	case "tradeVolume24hBtc":
		*f = *ExchangeOrderFieldTradeVolume24hBtc
	case "tradeVolume24hBtcNormalized":
		*f = *ExchangeOrderFieldTradeVolume24hBtcNormalized
	case "makerFee":
		*f = *ExchangeOrderFieldMakerFee
	case "takerFee":
		*f = *ExchangeOrderFieldTakerFee
	case "spreadFee":
		*f = *ExchangeOrderFieldSpreadFee
	case "supportAPI":
		*f = *ExchangeOrderFieldSupportAPI
	default:
		return fmt.Errorf("%s is not a valid ExchangeOrderField", str)
	}
	return nil
}

// ExchangeOrderField defines the ordering field of Exchange.
type ExchangeOrderField struct {
	field    string
	toCursor func(*Exchange) Cursor
}

// ExchangeOrder defines the ordering of Exchange.
type ExchangeOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *ExchangeOrderField `json:"field"`
}

// DefaultExchangeOrder is the default ordering of Exchange.
var DefaultExchangeOrder = &ExchangeOrder{
	Direction: OrderDirectionAsc,
	Field: &ExchangeOrderField{
		field: exchange.FieldID,
		toCursor: func(e *Exchange) Cursor {
			return Cursor{ID: e.ID}
		},
	},
}

// ToEdge converts Exchange into ExchangeEdge.
func (e *Exchange) ToEdge(order *ExchangeOrder) *ExchangeEdge {
	if order == nil {
		order = DefaultExchangeOrder
	}
	return &ExchangeEdge{
		Node:   e,
		Cursor: order.Field.toCursor(e),
	}
}

// OutboxEdge is the edge representation of Outbox.
type OutboxEdge struct {
	Node   *Outbox `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// OutboxConnection is the connection containing edges to Outbox.
type OutboxConnection struct {
	Edges      []*OutboxEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *OutboxConnection) build(nodes []*Outbox, pager *outboxPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Outbox
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Outbox {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Outbox {
			return nodes[i]
		}
	}
	c.Edges = make([]*OutboxEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OutboxEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OutboxPaginateOption enables pagination customization.
type OutboxPaginateOption func(*outboxPager) error

// WithOutboxOrder configures pagination ordering.
func WithOutboxOrder(order *OutboxOrder) OutboxPaginateOption {
	if order == nil {
		order = DefaultOutboxOrder
	}
	o := *order
	return func(pager *outboxPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOutboxOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOutboxFilter configures pagination filter.
func WithOutboxFilter(filter func(*OutboxQuery) (*OutboxQuery, error)) OutboxPaginateOption {
	return func(pager *outboxPager) error {
		if filter == nil {
			return errors.New("OutboxQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type outboxPager struct {
	order  *OutboxOrder
	filter func(*OutboxQuery) (*OutboxQuery, error)
}

func newOutboxPager(opts []OutboxPaginateOption) (*outboxPager, error) {
	pager := &outboxPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOutboxOrder
	}
	return pager, nil
}

func (p *outboxPager) applyFilter(query *OutboxQuery) (*OutboxQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *outboxPager) toCursor(o *Outbox) Cursor {
	return p.order.Field.toCursor(o)
}

func (p *outboxPager) applyCursors(query *OutboxQuery, after, before *Cursor) *OutboxQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOutboxOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *outboxPager) applyOrder(query *OutboxQuery, reverse bool) *OutboxQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOutboxOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOutboxOrder.Field.field))
	}
	return query
}

func (p *outboxPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOutboxOrder.Field {
			b.Comma().Ident(DefaultOutboxOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Outbox.
func (o *OutboxQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OutboxPaginateOption,
) (*OutboxConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOutboxPager(opts)
	if err != nil {
		return nil, err
	}
	if o, err = pager.applyFilter(o); err != nil {
		return nil, err
	}
	conn := &OutboxConnection{Edges: []*OutboxEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = o.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	o = pager.applyCursors(o, after, before)
	o = pager.applyOrder(o, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		o.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := o.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := o.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// OutboxOrderField defines the ordering field of Outbox.
type OutboxOrderField struct {
	field    string
	toCursor func(*Outbox) Cursor
}

// OutboxOrder defines the ordering of Outbox.
type OutboxOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *OutboxOrderField `json:"field"`
}

// DefaultOutboxOrder is the default ordering of Outbox.
var DefaultOutboxOrder = &OutboxOrder{
	Direction: OrderDirectionAsc,
	Field: &OutboxOrderField{
		field: outbox.FieldID,
		toCursor: func(o *Outbox) Cursor {
			return Cursor{ID: o.ID}
		},
	},
}

// ToEdge converts Outbox into OutboxEdge.
func (o *Outbox) ToEdge(order *OutboxOrder) *OutboxEdge {
	if order == nil {
		order = DefaultOutboxOrder
	}
	return &OutboxEdge{
		Node:   o,
		Cursor: order.Field.toCursor(o),
	}
}

// TickerEdge is the edge representation of Ticker.
type TickerEdge struct {
	Node   *Ticker `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// TickerConnection is the connection containing edges to Ticker.
type TickerConnection struct {
	Edges      []*TickerEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *TickerConnection) build(nodes []*Ticker, pager *tickerPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Ticker
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Ticker {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Ticker {
			return nodes[i]
		}
	}
	c.Edges = make([]*TickerEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TickerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TickerPaginateOption enables pagination customization.
type TickerPaginateOption func(*tickerPager) error

// WithTickerOrder configures pagination ordering.
func WithTickerOrder(order *TickerOrder) TickerPaginateOption {
	if order == nil {
		order = DefaultTickerOrder
	}
	o := *order
	return func(pager *tickerPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTickerOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTickerFilter configures pagination filter.
func WithTickerFilter(filter func(*TickerQuery) (*TickerQuery, error)) TickerPaginateOption {
	return func(pager *tickerPager) error {
		if filter == nil {
			return errors.New("TickerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tickerPager struct {
	order  *TickerOrder
	filter func(*TickerQuery) (*TickerQuery, error)
}

func newTickerPager(opts []TickerPaginateOption) (*tickerPager, error) {
	pager := &tickerPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTickerOrder
	}
	return pager, nil
}

func (p *tickerPager) applyFilter(query *TickerQuery) (*TickerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tickerPager) toCursor(t *Ticker) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *tickerPager) applyCursors(query *TickerQuery, after, before *Cursor) *TickerQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTickerOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *tickerPager) applyOrder(query *TickerQuery, reverse bool) *TickerQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTickerOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTickerOrder.Field.field))
	}
	return query
}

func (p *tickerPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTickerOrder.Field {
			b.Comma().Ident(DefaultTickerOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Ticker.
func (t *TickerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TickerPaginateOption,
) (*TickerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTickerPager(opts)
	if err != nil {
		return nil, err
	}
	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &TickerConnection{Edges: []*TickerEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = t.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	t = pager.applyCursors(t, after, before)
	t = pager.applyOrder(t, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		t.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := t.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TickerOrderFieldBase orders Ticker by base.
	TickerOrderFieldBase = &TickerOrderField{
		field: ticker.FieldBase,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Base,
			}
		},
	}
	// TickerOrderFieldTarget orders Ticker by target.
	TickerOrderFieldTarget = &TickerOrderField{
		field: ticker.FieldTarget,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Target,
			}
		},
	}
	// TickerOrderFieldLast orders Ticker by last.
	TickerOrderFieldLast = &TickerOrderField{
		field: ticker.FieldLast,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Last,
			}
		},
	}
	// TickerOrderFieldVolume orders Ticker by volume.
	TickerOrderFieldVolume = &TickerOrderField{
		field: ticker.FieldVolume,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Volume,
			}
		},
	}
	// TickerOrderFieldTrustScore orders Ticker by trust_score.
	TickerOrderFieldTrustScore = &TickerOrderField{
		field: ticker.FieldTrustScore,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.TrustScore,
			}
		},
	}
	// TickerOrderFieldBidAskSpreadPercentage orders Ticker by bid_ask_spread_percentage.
	TickerOrderFieldBidAskSpreadPercentage = &TickerOrderField{
		field: ticker.FieldBidAskSpreadPercentage,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.BidAskSpreadPercentage,
			}
		},
	}
	// TickerOrderFieldTimestamp orders Ticker by timestamp.
	TickerOrderFieldTimestamp = &TickerOrderField{
		field: ticker.FieldTimestamp,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Timestamp,
			}
		},
	}
	// TickerOrderFieldLastTradedAt orders Ticker by last_traded_at.
	TickerOrderFieldLastTradedAt = &TickerOrderField{
		field: ticker.FieldLastTradedAt,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.LastTradedAt,
			}
		},
	}
	// TickerOrderFieldLastFetchAt orders Ticker by last_fetch_at.
	TickerOrderFieldLastFetchAt = &TickerOrderField{
		field: ticker.FieldLastFetchAt,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.LastFetchAt,
			}
		},
	}
	// TickerOrderFieldIsAnomaly orders Ticker by is_anomaly.
	TickerOrderFieldIsAnomaly = &TickerOrderField{
		field: ticker.FieldIsAnomaly,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.IsAnomaly,
			}
		},
	}
	// TickerOrderFieldIsStale orders Ticker by is_stale.
	TickerOrderFieldIsStale = &TickerOrderField{
		field: ticker.FieldIsStale,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.IsStale,
			}
		},
	}
	// TickerOrderFieldTradeURL orders Ticker by trade_url.
	TickerOrderFieldTradeURL = &TickerOrderField{
		field: ticker.FieldTradeURL,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.TradeURL,
			}
		},
	}
	// TickerOrderFieldTokenInfoURL orders Ticker by token_info_url.
	TickerOrderFieldTokenInfoURL = &TickerOrderField{
		field: ticker.FieldTokenInfoURL,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.TokenInfoURL,
			}
		},
	}
	// TickerOrderFieldCoinID orders Ticker by coin_id.
	TickerOrderFieldCoinID = &TickerOrderField{
		field: ticker.FieldCoinID,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.CoinID,
			}
		},
	}
	// TickerOrderFieldTargetCoinID orders Ticker by target_coin_id.
	TickerOrderFieldTargetCoinID = &TickerOrderField{
		field: ticker.FieldTargetCoinID,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.TargetCoinID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TickerOrderField) String() string {
	var str string
	switch f.field {
	case ticker.FieldBase:
		str = "base"
	case ticker.FieldTarget:
		str = "target"
	case ticker.FieldLast:
		str = "last"
	case ticker.FieldVolume:
		str = "volume"
	case ticker.FieldTrustScore:
		str = "trustScore"
	case ticker.FieldBidAskSpreadPercentage:
		str = "bidAskSpreadPercentage"
	case ticker.FieldTimestamp:
		str = "timestamp"
	case ticker.FieldLastTradedAt:
		str = "lastTradedAt"
	case ticker.FieldLastFetchAt:
		str = "lastFetchAt"
	case ticker.FieldIsAnomaly:
		str = "isAnomaly"
	case ticker.FieldIsStale:
		str = "isStale"
	case ticker.FieldTradeURL:
		str = "tradeUrl"
	case ticker.FieldTokenInfoURL:
		str = "tokenInfoUrl"
	case ticker.FieldCoinID:
		str = "coinId"
	case ticker.FieldTargetCoinID:
		str = "targetCoinId"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TickerOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TickerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TickerOrderField %T must be a string", v)
	}
	switch str {
	case "base":
		*f = *TickerOrderFieldBase
	case "target":
		*f = *TickerOrderFieldTarget
	case "last":
		*f = *TickerOrderFieldLast
	case "volume":
		*f = *TickerOrderFieldVolume
	case "trustScore":
		*f = *TickerOrderFieldTrustScore
	case "bidAskSpreadPercentage":
		*f = *TickerOrderFieldBidAskSpreadPercentage
	case "timestamp":
		*f = *TickerOrderFieldTimestamp
	case "lastTradedAt":
		*f = *TickerOrderFieldLastTradedAt
	case "lastFetchAt":
		*f = *TickerOrderFieldLastFetchAt
	case "isAnomaly":
		*f = *TickerOrderFieldIsAnomaly
	case "isStale":
		*f = *TickerOrderFieldIsStale
	case "tradeUrl":
		*f = *TickerOrderFieldTradeURL
	case "tokenInfoUrl":
		*f = *TickerOrderFieldTokenInfoURL
	case "coinId":
		*f = *TickerOrderFieldCoinID
	case "targetCoinId":
		*f = *TickerOrderFieldTargetCoinID
	default:
		return fmt.Errorf("%s is not a valid TickerOrderField", str)
	}
	return nil
}

// TickerOrderField defines the ordering field of Ticker.
type TickerOrderField struct {
	field    string
	toCursor func(*Ticker) Cursor
}

// TickerOrder defines the ordering of Ticker.
type TickerOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *TickerOrderField `json:"field"`
}

// DefaultTickerOrder is the default ordering of Ticker.
var DefaultTickerOrder = &TickerOrder{
	Direction: OrderDirectionAsc,
	Field: &TickerOrderField{
		field: ticker.FieldID,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Ticker into TickerEdge.
func (t *Ticker) ToEdge(order *TickerOrder) *TickerEdge {
	if order == nil {
		order = DefaultTickerOrder
	}
	return &TickerEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}
