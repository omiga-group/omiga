
// Code generated by go-connectilly-event-template, DO NOT EDIT.

package syntheticorderv1

import (
    
      "encoding/json"
      "fmt"
    
      "time"
    
      "github.com/google/uuid"
    )
    
    // SyntheticOrderEvent represents a SyntheticOrderEvent model.
type SyntheticOrderEvent struct {
  Metadata Metadata `json:"metadata"` 
  Data Data `json:"data"` 
}
    
    
    // Metadata represents a Metadata model.
type Metadata struct {
  Id uuid.UUID `json:"id"`  // The unique message ID
  Source string `json:"source"` 
  ReservedType ReservedType `json:"type"` 
  Subject string `json:"subject"` 
  Time time.Time `json:"time"` 
  CorrelationId uuid.UUID `json:"correlationId"` 
  Actor string `json:"actor"` 
}
    
    
    // ReservedType represents an enum of ReservedType.
type ReservedType uint

const (
  ReservedTypeOrderSubmitted ReservedType = iota
  ReservedTypeOrderCancel
)

// Value returns the value of the enum.
func (op ReservedType) Value() any {
	if op >= ReservedType(len(ReservedTypeValues)) {
		return nil
	}
	return ReservedTypeValues[op]
}

var ReservedTypeValues = []any{"orderSubmitted","orderCancel"}
var ValuesToReservedType = map[any]ReservedType{
  ReservedTypeValues[ReservedTypeOrderSubmitted]: ReservedTypeOrderSubmitted,
  ReservedTypeValues[ReservedTypeOrderCancel]: ReservedTypeOrderCancel,
}

    
    
    // Data represents a Data model.
type Data struct {
  BeforeState *Order `json:"beforeState,omitempty"` 
  AfterState Order `json:"afterState"` 
}
    
    
    // Order represents a Order model.
type Order struct {
  Id int `json:"id"`  // The unique synthetic order ID
  Exchange *Exchange `json:"exchange,omitempty"`  // The destination order for this given synthetic order
  OrderDetails OrderDetails `json:"orderDetails"` 
  AdditionalProperties *map[string]interface{} `json:"additionalProperties,omitempty"` 
}
    
    
    // Exchange represents a Exchange model.
type Exchange struct {
  Id string `json:"id"`  // The unique ID of the supported exchange
}
    
    
    // OrderDetails represents a OrderDetails model.
type OrderDetails struct {
  BaseCurrency Currency `json:"baseCurrency"` 
  CounterCurrency Currency `json:"counterCurrency"` 
  ReservedType OrderType `json:"type"` 
  Side OrderSide `json:"side"` 
  Quantity Quantity `json:"quantity"` 
  Price Quantity `json:"price"` 
  AdditionalProperties *map[string]interface{} `json:"additionalProperties,omitempty"` 
}
    
    
    // Currency represents a Currency model.
type Currency struct {
  Code string `json:"code"` 
  Name string `json:"name"` 
  MaxPrecision int32 `json:"maxPrecision"` 
  Digital bool `json:"digital"` 
}
    
    
    // OrderType represents an enum of OrderType.
type OrderType uint

const (
  OrderTypeInstant OrderType = iota
  OrderTypeMarket
  OrderTypeLimit
  OrderTypeStop
  OrderTypeTrailingStop
)

// Value returns the value of the enum.
func (op OrderType) Value() any {
	if op >= OrderType(len(OrderTypeValues)) {
		return nil
	}
	return OrderTypeValues[op]
}

var OrderTypeValues = []any{"INSTANT","MARKET","LIMIT","STOP","TRAILING_STOP"}
var ValuesToOrderType = map[any]OrderType{
  OrderTypeValues[OrderTypeInstant]: OrderTypeInstant,
  OrderTypeValues[OrderTypeMarket]: OrderTypeMarket,
  OrderTypeValues[OrderTypeLimit]: OrderTypeLimit,
  OrderTypeValues[OrderTypeStop]: OrderTypeStop,
  OrderTypeValues[OrderTypeTrailingStop]: OrderTypeTrailingStop,
}

    
    
    // OrderSide represents an enum of OrderSide.
type OrderSide uint

const (
  OrderSideBid OrderSide = iota
  OrderSideAsk
)

// Value returns the value of the enum.
func (op OrderSide) Value() any {
	if op >= OrderSide(len(OrderSideValues)) {
		return nil
	}
	return OrderSideValues[op]
}

var OrderSideValues = []any{"BID","ASK"}
var ValuesToOrderSide = map[any]OrderSide{
  OrderSideValues[OrderSideBid]: OrderSideBid,
  OrderSideValues[OrderSideAsk]: OrderSideAsk,
}

    
    
    // Quantity represents a Quantity model.
type Quantity struct {
  Amount int64 `json:"amount"` 
  Scale int32 `json:"scale"` 
}
    
func (enumVal ReservedType) MarshalJSON() ([]byte, error) {
  return json.Marshal(enumVal.String())
}

func (enumVal ReservedType) String() string {
  return fmt.Sprintf("%v", ReservedTypeValues[int(enumVal)])
}

func (enumVal *ReservedType) UnmarshalJSON(buffer []byte) error {
  var str string
  if err := json.Unmarshal(buffer, &str); err != nil {
    return err
  }

  var tmpEnumVal ReservedType
  var ok bool

  if tmpEnumVal, ok = ValuesToReservedType[str]; !ok {
    return fmt.Errorf("unknown %s", str)
  }

  *enumVal = tmpEnumVal

  return nil
}

func (enumVal OrderType) MarshalJSON() ([]byte, error) {
  return json.Marshal(enumVal.String())
}

func (enumVal OrderType) String() string {
  return fmt.Sprintf("%v", OrderTypeValues[int(enumVal)])
}

func (enumVal *OrderType) UnmarshalJSON(buffer []byte) error {
  var str string
  if err := json.Unmarshal(buffer, &str); err != nil {
    return err
  }

  var tmpEnumVal OrderType
  var ok bool

  if tmpEnumVal, ok = ValuesToOrderType[str]; !ok {
    return fmt.Errorf("unknown %s", str)
  }

  *enumVal = tmpEnumVal

  return nil
}

func (enumVal OrderSide) MarshalJSON() ([]byte, error) {
  return json.Marshal(enumVal.String())
}

func (enumVal OrderSide) String() string {
  return fmt.Sprintf("%v", OrderSideValues[int(enumVal)])
}

func (enumVal *OrderSide) UnmarshalJSON(buffer []byte) error {
  var str string
  if err := json.Unmarshal(buffer, &str); err != nil {
    return err
  }

  var tmpEnumVal OrderSide
  var ok bool

  if tmpEnumVal, ok = ValuesToOrderSide[str]; !ok {
    return fmt.Errorf("unknown %s", str)
  }

  *enumVal = tmpEnumVal

  return nil
}
