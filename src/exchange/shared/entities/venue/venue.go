// Code generated by ent, DO NOT EDIT.

package venue

import (
	"fmt"
	"io"
	"strconv"
)

const (
	// Label holds the string label denoting the venue type in the database.
	Label = "venue"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVenueID holds the string denoting the venue_id field in the database.
	FieldVenueID = "venue_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldYearEstablished holds the string denoting the year_established field in the database.
	FieldYearEstablished = "year_established"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldLinks holds the string denoting the links field in the database.
	FieldLinks = "links"
	// FieldHasTradingIncentive holds the string denoting the has_trading_incentive field in the database.
	FieldHasTradingIncentive = "has_trading_incentive"
	// FieldCentralized holds the string denoting the centralized field in the database.
	FieldCentralized = "centralized"
	// FieldPublicNotice holds the string denoting the public_notice field in the database.
	FieldPublicNotice = "public_notice"
	// FieldAlertNotice holds the string denoting the alert_notice field in the database.
	FieldAlertNotice = "alert_notice"
	// FieldTrustScore holds the string denoting the trust_score field in the database.
	FieldTrustScore = "trust_score"
	// FieldTrustScoreRank holds the string denoting the trust_score_rank field in the database.
	FieldTrustScoreRank = "trust_score_rank"
	// FieldTradeVolume24hBtc holds the string denoting the trade_volume_24h_btc field in the database.
	FieldTradeVolume24hBtc = "trade_volume_24h_btc"
	// FieldTradeVolume24hBtcNormalized holds the string denoting the trade_volume_24h_btc_normalized field in the database.
	FieldTradeVolume24hBtcNormalized = "trade_volume_24h_btc_normalized"
	// FieldMakerFee holds the string denoting the maker_fee field in the database.
	FieldMakerFee = "maker_fee"
	// FieldTakerFee holds the string denoting the taker_fee field in the database.
	FieldTakerFee = "taker_fee"
	// FieldSpreadFee holds the string denoting the spread_fee field in the database.
	FieldSpreadFee = "spread_fee"
	// FieldSupportAPI holds the string denoting the support_api field in the database.
	FieldSupportAPI = "support_api"
	// EdgeTicker holds the string denoting the ticker edge name in mutations.
	EdgeTicker = "ticker"
	// EdgeTradingPair holds the string denoting the trading_pair edge name in mutations.
	EdgeTradingPair = "trading_pair"
	// EdgeMarket holds the string denoting the market edge name in mutations.
	EdgeMarket = "market"
	// Table holds the table name of the venue in the database.
	Table = "venues"
	// TickerTable is the table that holds the ticker relation/edge.
	TickerTable = "tickers"
	// TickerInverseTable is the table name for the Ticker entity.
	// It exists in this package in order to avoid circular dependency with the "ticker" package.
	TickerInverseTable = "tickers"
	// TickerColumn is the table column denoting the ticker relation/edge.
	TickerColumn = "venue_ticker"
	// TradingPairTable is the table that holds the trading_pair relation/edge.
	TradingPairTable = "trading_pairs"
	// TradingPairInverseTable is the table name for the TradingPair entity.
	// It exists in this package in order to avoid circular dependency with the "tradingpair" package.
	TradingPairInverseTable = "trading_pairs"
	// TradingPairColumn is the table column denoting the trading_pair relation/edge.
	TradingPairColumn = "venue_trading_pair"
	// MarketTable is the table that holds the market relation/edge.
	MarketTable = "markets"
	// MarketInverseTable is the table name for the Market entity.
	// It exists in this package in order to avoid circular dependency with the "market" package.
	MarketInverseTable = "markets"
	// MarketColumn is the table column denoting the market relation/edge.
	MarketColumn = "venue_market"
)

// Columns holds all SQL columns for venue fields.
var Columns = []string{
	FieldID,
	FieldVenueID,
	FieldType,
	FieldName,
	FieldYearEstablished,
	FieldCountry,
	FieldImage,
	FieldLinks,
	FieldHasTradingIncentive,
	FieldCentralized,
	FieldPublicNotice,
	FieldAlertNotice,
	FieldTrustScore,
	FieldTrustScoreRank,
	FieldTradeVolume24hBtc,
	FieldTradeVolume24hBtcNormalized,
	FieldMakerFee,
	FieldTakerFee,
	FieldSpreadFee,
	FieldSupportAPI,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeEXCHANGE Type = "EXCHANGE"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeEXCHANGE:
		return nil
	default:
		return fmt.Errorf("venue: invalid enum value for type field: %q", _type)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
