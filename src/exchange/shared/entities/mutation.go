// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/omiga-group/omiga/src/exchange/shared/entities/coin"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/exchange"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/market"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/outbox"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/predicate"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/ticker"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/tradingpair"
	"github.com/omiga-group/omiga/src/exchange/shared/models"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCoin        = "Coin"
	TypeExchange    = "Exchange"
	TypeMarket      = "Market"
	TypeOutbox      = "Outbox"
	TypeTicker      = "Ticker"
	TypeTradingPair = "TradingPair"
)

// CoinMutation represents an operation that mutates the Coin nodes in the graph.
type CoinMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	symbol              *string
	name                *string
	clearedFields       map[string]struct{}
	coin_base           map[int]struct{}
	removedcoin_base    map[int]struct{}
	clearedcoin_base    bool
	coin_counter        map[int]struct{}
	removedcoin_counter map[int]struct{}
	clearedcoin_counter bool
	done                bool
	oldValue            func(context.Context) (*Coin, error)
	predicates          []predicate.Coin
}

var _ ent.Mutation = (*CoinMutation)(nil)

// coinOption allows management of the mutation configuration using functional options.
type coinOption func(*CoinMutation)

// newCoinMutation creates new mutation for the Coin entity.
func newCoinMutation(c config, op Op, opts ...coinOption) *CoinMutation {
	m := &CoinMutation{
		config:        c,
		op:            op,
		typ:           TypeCoin,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoinID sets the ID field of the mutation.
func withCoinID(id int) coinOption {
	return func(m *CoinMutation) {
		var (
			err   error
			once  sync.Once
			value *Coin
		)
		m.oldValue = func(ctx context.Context) (*Coin, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Coin.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoin sets the old Coin of the mutation.
func withCoin(node *Coin) coinOption {
	return func(m *CoinMutation) {
		m.oldValue = func(context.Context) (*Coin, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoinMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoinMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoinMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CoinMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Coin.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSymbol sets the "symbol" field.
func (m *CoinMutation) SetSymbol(s string) {
	m.symbol = &s
}

// Symbol returns the value of the "symbol" field in the mutation.
func (m *CoinMutation) Symbol() (r string, exists bool) {
	v := m.symbol
	if v == nil {
		return
	}
	return *v, true
}

// OldSymbol returns the old "symbol" field's value of the Coin entity.
// If the Coin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinMutation) OldSymbol(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSymbol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSymbol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSymbol: %w", err)
	}
	return oldValue.Symbol, nil
}

// ResetSymbol resets all changes to the "symbol" field.
func (m *CoinMutation) ResetSymbol() {
	m.symbol = nil
}

// SetName sets the "name" field.
func (m *CoinMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CoinMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Coin entity.
// If the Coin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *CoinMutation) ClearName() {
	m.name = nil
	m.clearedFields[coin.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *CoinMutation) NameCleared() bool {
	_, ok := m.clearedFields[coin.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *CoinMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, coin.FieldName)
}

// AddCoinBaseIDs adds the "coin_base" edge to the TradingPair entity by ids.
func (m *CoinMutation) AddCoinBaseIDs(ids ...int) {
	if m.coin_base == nil {
		m.coin_base = make(map[int]struct{})
	}
	for i := range ids {
		m.coin_base[ids[i]] = struct{}{}
	}
}

// ClearCoinBase clears the "coin_base" edge to the TradingPair entity.
func (m *CoinMutation) ClearCoinBase() {
	m.clearedcoin_base = true
}

// CoinBaseCleared reports if the "coin_base" edge to the TradingPair entity was cleared.
func (m *CoinMutation) CoinBaseCleared() bool {
	return m.clearedcoin_base
}

// RemoveCoinBaseIDs removes the "coin_base" edge to the TradingPair entity by IDs.
func (m *CoinMutation) RemoveCoinBaseIDs(ids ...int) {
	if m.removedcoin_base == nil {
		m.removedcoin_base = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.coin_base, ids[i])
		m.removedcoin_base[ids[i]] = struct{}{}
	}
}

// RemovedCoinBase returns the removed IDs of the "coin_base" edge to the TradingPair entity.
func (m *CoinMutation) RemovedCoinBaseIDs() (ids []int) {
	for id := range m.removedcoin_base {
		ids = append(ids, id)
	}
	return
}

// CoinBaseIDs returns the "coin_base" edge IDs in the mutation.
func (m *CoinMutation) CoinBaseIDs() (ids []int) {
	for id := range m.coin_base {
		ids = append(ids, id)
	}
	return
}

// ResetCoinBase resets all changes to the "coin_base" edge.
func (m *CoinMutation) ResetCoinBase() {
	m.coin_base = nil
	m.clearedcoin_base = false
	m.removedcoin_base = nil
}

// AddCoinCounterIDs adds the "coin_counter" edge to the TradingPair entity by ids.
func (m *CoinMutation) AddCoinCounterIDs(ids ...int) {
	if m.coin_counter == nil {
		m.coin_counter = make(map[int]struct{})
	}
	for i := range ids {
		m.coin_counter[ids[i]] = struct{}{}
	}
}

// ClearCoinCounter clears the "coin_counter" edge to the TradingPair entity.
func (m *CoinMutation) ClearCoinCounter() {
	m.clearedcoin_counter = true
}

// CoinCounterCleared reports if the "coin_counter" edge to the TradingPair entity was cleared.
func (m *CoinMutation) CoinCounterCleared() bool {
	return m.clearedcoin_counter
}

// RemoveCoinCounterIDs removes the "coin_counter" edge to the TradingPair entity by IDs.
func (m *CoinMutation) RemoveCoinCounterIDs(ids ...int) {
	if m.removedcoin_counter == nil {
		m.removedcoin_counter = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.coin_counter, ids[i])
		m.removedcoin_counter[ids[i]] = struct{}{}
	}
}

// RemovedCoinCounter returns the removed IDs of the "coin_counter" edge to the TradingPair entity.
func (m *CoinMutation) RemovedCoinCounterIDs() (ids []int) {
	for id := range m.removedcoin_counter {
		ids = append(ids, id)
	}
	return
}

// CoinCounterIDs returns the "coin_counter" edge IDs in the mutation.
func (m *CoinMutation) CoinCounterIDs() (ids []int) {
	for id := range m.coin_counter {
		ids = append(ids, id)
	}
	return
}

// ResetCoinCounter resets all changes to the "coin_counter" edge.
func (m *CoinMutation) ResetCoinCounter() {
	m.coin_counter = nil
	m.clearedcoin_counter = false
	m.removedcoin_counter = nil
}

// Where appends a list predicates to the CoinMutation builder.
func (m *CoinMutation) Where(ps ...predicate.Coin) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CoinMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Coin).
func (m *CoinMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoinMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.symbol != nil {
		fields = append(fields, coin.FieldSymbol)
	}
	if m.name != nil {
		fields = append(fields, coin.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoinMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coin.FieldSymbol:
		return m.Symbol()
	case coin.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoinMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coin.FieldSymbol:
		return m.OldSymbol(ctx)
	case coin.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Coin field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coin.FieldSymbol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSymbol(v)
		return nil
	case coin.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Coin field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoinMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoinMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Coin numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoinMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(coin.FieldName) {
		fields = append(fields, coin.FieldName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoinMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoinMutation) ClearField(name string) error {
	switch name {
	case coin.FieldName:
		m.ClearName()
		return nil
	}
	return fmt.Errorf("unknown Coin nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoinMutation) ResetField(name string) error {
	switch name {
	case coin.FieldSymbol:
		m.ResetSymbol()
		return nil
	case coin.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Coin field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoinMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.coin_base != nil {
		edges = append(edges, coin.EdgeCoinBase)
	}
	if m.coin_counter != nil {
		edges = append(edges, coin.EdgeCoinCounter)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoinMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case coin.EdgeCoinBase:
		ids := make([]ent.Value, 0, len(m.coin_base))
		for id := range m.coin_base {
			ids = append(ids, id)
		}
		return ids
	case coin.EdgeCoinCounter:
		ids := make([]ent.Value, 0, len(m.coin_counter))
		for id := range m.coin_counter {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoinMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcoin_base != nil {
		edges = append(edges, coin.EdgeCoinBase)
	}
	if m.removedcoin_counter != nil {
		edges = append(edges, coin.EdgeCoinCounter)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoinMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case coin.EdgeCoinBase:
		ids := make([]ent.Value, 0, len(m.removedcoin_base))
		for id := range m.removedcoin_base {
			ids = append(ids, id)
		}
		return ids
	case coin.EdgeCoinCounter:
		ids := make([]ent.Value, 0, len(m.removedcoin_counter))
		for id := range m.removedcoin_counter {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoinMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcoin_base {
		edges = append(edges, coin.EdgeCoinBase)
	}
	if m.clearedcoin_counter {
		edges = append(edges, coin.EdgeCoinCounter)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoinMutation) EdgeCleared(name string) bool {
	switch name {
	case coin.EdgeCoinBase:
		return m.clearedcoin_base
	case coin.EdgeCoinCounter:
		return m.clearedcoin_counter
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoinMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Coin unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoinMutation) ResetEdge(name string) error {
	switch name {
	case coin.EdgeCoinBase:
		m.ResetCoinBase()
		return nil
	case coin.EdgeCoinCounter:
		m.ResetCoinCounter()
		return nil
	}
	return fmt.Errorf("unknown Coin edge %s", name)
}

// ExchangeMutation represents an operation that mutates the Exchange nodes in the graph.
type ExchangeMutation struct {
	config
	op                                 Op
	typ                                string
	id                                 *int
	exchange_id                        *string
	name                               *string
	year_established                   *int
	addyear_established                *int
	country                            *string
	image                              *string
	links                              *map[string]string
	has_trading_incentive              *bool
	centralized                        *bool
	public_notice                      *string
	alert_notice                       *string
	trust_score                        *int
	addtrust_score                     *int
	trust_score_rank                   *int
	addtrust_score_rank                *int
	trade_volume_24h_btc               *float64
	addtrade_volume_24h_btc            *float64
	trade_volume_24h_btc_normalized    *float64
	addtrade_volume_24h_btc_normalized *float64
	maker_fee                          *float64
	addmaker_fee                       *float64
	taker_fee                          *float64
	addtaker_fee                       *float64
	spread_fee                         *bool
	support_api                        *bool
	clearedFields                      map[string]struct{}
	ticker                             map[int]struct{}
	removedticker                      map[int]struct{}
	clearedticker                      bool
	trading_pair                       map[int]struct{}
	removedtrading_pair                map[int]struct{}
	clearedtrading_pair                bool
	market                             map[int]struct{}
	removedmarket                      map[int]struct{}
	clearedmarket                      bool
	done                               bool
	oldValue                           func(context.Context) (*Exchange, error)
	predicates                         []predicate.Exchange
}

var _ ent.Mutation = (*ExchangeMutation)(nil)

// exchangeOption allows management of the mutation configuration using functional options.
type exchangeOption func(*ExchangeMutation)

// newExchangeMutation creates new mutation for the Exchange entity.
func newExchangeMutation(c config, op Op, opts ...exchangeOption) *ExchangeMutation {
	m := &ExchangeMutation{
		config:        c,
		op:            op,
		typ:           TypeExchange,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExchangeID sets the ID field of the mutation.
func withExchangeID(id int) exchangeOption {
	return func(m *ExchangeMutation) {
		var (
			err   error
			once  sync.Once
			value *Exchange
		)
		m.oldValue = func(ctx context.Context) (*Exchange, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Exchange.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExchange sets the old Exchange of the mutation.
func withExchange(node *Exchange) exchangeOption {
	return func(m *ExchangeMutation) {
		m.oldValue = func(context.Context) (*Exchange, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExchangeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExchangeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExchangeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExchangeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Exchange.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetExchangeID sets the "exchange_id" field.
func (m *ExchangeMutation) SetExchangeID(s string) {
	m.exchange_id = &s
}

// ExchangeID returns the value of the "exchange_id" field in the mutation.
func (m *ExchangeMutation) ExchangeID() (r string, exists bool) {
	v := m.exchange_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExchangeID returns the old "exchange_id" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldExchangeID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExchangeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExchangeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExchangeID: %w", err)
	}
	return oldValue.ExchangeID, nil
}

// ResetExchangeID resets all changes to the "exchange_id" field.
func (m *ExchangeMutation) ResetExchangeID() {
	m.exchange_id = nil
}

// SetName sets the "name" field.
func (m *ExchangeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ExchangeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *ExchangeMutation) ClearName() {
	m.name = nil
	m.clearedFields[exchange.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *ExchangeMutation) NameCleared() bool {
	_, ok := m.clearedFields[exchange.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *ExchangeMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, exchange.FieldName)
}

// SetYearEstablished sets the "year_established" field.
func (m *ExchangeMutation) SetYearEstablished(i int) {
	m.year_established = &i
	m.addyear_established = nil
}

// YearEstablished returns the value of the "year_established" field in the mutation.
func (m *ExchangeMutation) YearEstablished() (r int, exists bool) {
	v := m.year_established
	if v == nil {
		return
	}
	return *v, true
}

// OldYearEstablished returns the old "year_established" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldYearEstablished(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYearEstablished is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYearEstablished requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYearEstablished: %w", err)
	}
	return oldValue.YearEstablished, nil
}

// AddYearEstablished adds i to the "year_established" field.
func (m *ExchangeMutation) AddYearEstablished(i int) {
	if m.addyear_established != nil {
		*m.addyear_established += i
	} else {
		m.addyear_established = &i
	}
}

// AddedYearEstablished returns the value that was added to the "year_established" field in this mutation.
func (m *ExchangeMutation) AddedYearEstablished() (r int, exists bool) {
	v := m.addyear_established
	if v == nil {
		return
	}
	return *v, true
}

// ClearYearEstablished clears the value of the "year_established" field.
func (m *ExchangeMutation) ClearYearEstablished() {
	m.year_established = nil
	m.addyear_established = nil
	m.clearedFields[exchange.FieldYearEstablished] = struct{}{}
}

// YearEstablishedCleared returns if the "year_established" field was cleared in this mutation.
func (m *ExchangeMutation) YearEstablishedCleared() bool {
	_, ok := m.clearedFields[exchange.FieldYearEstablished]
	return ok
}

// ResetYearEstablished resets all changes to the "year_established" field.
func (m *ExchangeMutation) ResetYearEstablished() {
	m.year_established = nil
	m.addyear_established = nil
	delete(m.clearedFields, exchange.FieldYearEstablished)
}

// SetCountry sets the "country" field.
func (m *ExchangeMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *ExchangeMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ClearCountry clears the value of the "country" field.
func (m *ExchangeMutation) ClearCountry() {
	m.country = nil
	m.clearedFields[exchange.FieldCountry] = struct{}{}
}

// CountryCleared returns if the "country" field was cleared in this mutation.
func (m *ExchangeMutation) CountryCleared() bool {
	_, ok := m.clearedFields[exchange.FieldCountry]
	return ok
}

// ResetCountry resets all changes to the "country" field.
func (m *ExchangeMutation) ResetCountry() {
	m.country = nil
	delete(m.clearedFields, exchange.FieldCountry)
}

// SetImage sets the "image" field.
func (m *ExchangeMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *ExchangeMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ClearImage clears the value of the "image" field.
func (m *ExchangeMutation) ClearImage() {
	m.image = nil
	m.clearedFields[exchange.FieldImage] = struct{}{}
}

// ImageCleared returns if the "image" field was cleared in this mutation.
func (m *ExchangeMutation) ImageCleared() bool {
	_, ok := m.clearedFields[exchange.FieldImage]
	return ok
}

// ResetImage resets all changes to the "image" field.
func (m *ExchangeMutation) ResetImage() {
	m.image = nil
	delete(m.clearedFields, exchange.FieldImage)
}

// SetLinks sets the "links" field.
func (m *ExchangeMutation) SetLinks(value map[string]string) {
	m.links = &value
}

// Links returns the value of the "links" field in the mutation.
func (m *ExchangeMutation) Links() (r map[string]string, exists bool) {
	v := m.links
	if v == nil {
		return
	}
	return *v, true
}

// OldLinks returns the old "links" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldLinks(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLinks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLinks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLinks: %w", err)
	}
	return oldValue.Links, nil
}

// ClearLinks clears the value of the "links" field.
func (m *ExchangeMutation) ClearLinks() {
	m.links = nil
	m.clearedFields[exchange.FieldLinks] = struct{}{}
}

// LinksCleared returns if the "links" field was cleared in this mutation.
func (m *ExchangeMutation) LinksCleared() bool {
	_, ok := m.clearedFields[exchange.FieldLinks]
	return ok
}

// ResetLinks resets all changes to the "links" field.
func (m *ExchangeMutation) ResetLinks() {
	m.links = nil
	delete(m.clearedFields, exchange.FieldLinks)
}

// SetHasTradingIncentive sets the "has_trading_incentive" field.
func (m *ExchangeMutation) SetHasTradingIncentive(b bool) {
	m.has_trading_incentive = &b
}

// HasTradingIncentive returns the value of the "has_trading_incentive" field in the mutation.
func (m *ExchangeMutation) HasTradingIncentive() (r bool, exists bool) {
	v := m.has_trading_incentive
	if v == nil {
		return
	}
	return *v, true
}

// OldHasTradingIncentive returns the old "has_trading_incentive" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldHasTradingIncentive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasTradingIncentive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasTradingIncentive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasTradingIncentive: %w", err)
	}
	return oldValue.HasTradingIncentive, nil
}

// ClearHasTradingIncentive clears the value of the "has_trading_incentive" field.
func (m *ExchangeMutation) ClearHasTradingIncentive() {
	m.has_trading_incentive = nil
	m.clearedFields[exchange.FieldHasTradingIncentive] = struct{}{}
}

// HasTradingIncentiveCleared returns if the "has_trading_incentive" field was cleared in this mutation.
func (m *ExchangeMutation) HasTradingIncentiveCleared() bool {
	_, ok := m.clearedFields[exchange.FieldHasTradingIncentive]
	return ok
}

// ResetHasTradingIncentive resets all changes to the "has_trading_incentive" field.
func (m *ExchangeMutation) ResetHasTradingIncentive() {
	m.has_trading_incentive = nil
	delete(m.clearedFields, exchange.FieldHasTradingIncentive)
}

// SetCentralized sets the "centralized" field.
func (m *ExchangeMutation) SetCentralized(b bool) {
	m.centralized = &b
}

// Centralized returns the value of the "centralized" field in the mutation.
func (m *ExchangeMutation) Centralized() (r bool, exists bool) {
	v := m.centralized
	if v == nil {
		return
	}
	return *v, true
}

// OldCentralized returns the old "centralized" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldCentralized(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCentralized is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCentralized requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCentralized: %w", err)
	}
	return oldValue.Centralized, nil
}

// ClearCentralized clears the value of the "centralized" field.
func (m *ExchangeMutation) ClearCentralized() {
	m.centralized = nil
	m.clearedFields[exchange.FieldCentralized] = struct{}{}
}

// CentralizedCleared returns if the "centralized" field was cleared in this mutation.
func (m *ExchangeMutation) CentralizedCleared() bool {
	_, ok := m.clearedFields[exchange.FieldCentralized]
	return ok
}

// ResetCentralized resets all changes to the "centralized" field.
func (m *ExchangeMutation) ResetCentralized() {
	m.centralized = nil
	delete(m.clearedFields, exchange.FieldCentralized)
}

// SetPublicNotice sets the "public_notice" field.
func (m *ExchangeMutation) SetPublicNotice(s string) {
	m.public_notice = &s
}

// PublicNotice returns the value of the "public_notice" field in the mutation.
func (m *ExchangeMutation) PublicNotice() (r string, exists bool) {
	v := m.public_notice
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicNotice returns the old "public_notice" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldPublicNotice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicNotice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicNotice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicNotice: %w", err)
	}
	return oldValue.PublicNotice, nil
}

// ClearPublicNotice clears the value of the "public_notice" field.
func (m *ExchangeMutation) ClearPublicNotice() {
	m.public_notice = nil
	m.clearedFields[exchange.FieldPublicNotice] = struct{}{}
}

// PublicNoticeCleared returns if the "public_notice" field was cleared in this mutation.
func (m *ExchangeMutation) PublicNoticeCleared() bool {
	_, ok := m.clearedFields[exchange.FieldPublicNotice]
	return ok
}

// ResetPublicNotice resets all changes to the "public_notice" field.
func (m *ExchangeMutation) ResetPublicNotice() {
	m.public_notice = nil
	delete(m.clearedFields, exchange.FieldPublicNotice)
}

// SetAlertNotice sets the "alert_notice" field.
func (m *ExchangeMutation) SetAlertNotice(s string) {
	m.alert_notice = &s
}

// AlertNotice returns the value of the "alert_notice" field in the mutation.
func (m *ExchangeMutation) AlertNotice() (r string, exists bool) {
	v := m.alert_notice
	if v == nil {
		return
	}
	return *v, true
}

// OldAlertNotice returns the old "alert_notice" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldAlertNotice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlertNotice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlertNotice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlertNotice: %w", err)
	}
	return oldValue.AlertNotice, nil
}

// ClearAlertNotice clears the value of the "alert_notice" field.
func (m *ExchangeMutation) ClearAlertNotice() {
	m.alert_notice = nil
	m.clearedFields[exchange.FieldAlertNotice] = struct{}{}
}

// AlertNoticeCleared returns if the "alert_notice" field was cleared in this mutation.
func (m *ExchangeMutation) AlertNoticeCleared() bool {
	_, ok := m.clearedFields[exchange.FieldAlertNotice]
	return ok
}

// ResetAlertNotice resets all changes to the "alert_notice" field.
func (m *ExchangeMutation) ResetAlertNotice() {
	m.alert_notice = nil
	delete(m.clearedFields, exchange.FieldAlertNotice)
}

// SetTrustScore sets the "trust_score" field.
func (m *ExchangeMutation) SetTrustScore(i int) {
	m.trust_score = &i
	m.addtrust_score = nil
}

// TrustScore returns the value of the "trust_score" field in the mutation.
func (m *ExchangeMutation) TrustScore() (r int, exists bool) {
	v := m.trust_score
	if v == nil {
		return
	}
	return *v, true
}

// OldTrustScore returns the old "trust_score" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldTrustScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrustScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrustScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrustScore: %w", err)
	}
	return oldValue.TrustScore, nil
}

// AddTrustScore adds i to the "trust_score" field.
func (m *ExchangeMutation) AddTrustScore(i int) {
	if m.addtrust_score != nil {
		*m.addtrust_score += i
	} else {
		m.addtrust_score = &i
	}
}

// AddedTrustScore returns the value that was added to the "trust_score" field in this mutation.
func (m *ExchangeMutation) AddedTrustScore() (r int, exists bool) {
	v := m.addtrust_score
	if v == nil {
		return
	}
	return *v, true
}

// ClearTrustScore clears the value of the "trust_score" field.
func (m *ExchangeMutation) ClearTrustScore() {
	m.trust_score = nil
	m.addtrust_score = nil
	m.clearedFields[exchange.FieldTrustScore] = struct{}{}
}

// TrustScoreCleared returns if the "trust_score" field was cleared in this mutation.
func (m *ExchangeMutation) TrustScoreCleared() bool {
	_, ok := m.clearedFields[exchange.FieldTrustScore]
	return ok
}

// ResetTrustScore resets all changes to the "trust_score" field.
func (m *ExchangeMutation) ResetTrustScore() {
	m.trust_score = nil
	m.addtrust_score = nil
	delete(m.clearedFields, exchange.FieldTrustScore)
}

// SetTrustScoreRank sets the "trust_score_rank" field.
func (m *ExchangeMutation) SetTrustScoreRank(i int) {
	m.trust_score_rank = &i
	m.addtrust_score_rank = nil
}

// TrustScoreRank returns the value of the "trust_score_rank" field in the mutation.
func (m *ExchangeMutation) TrustScoreRank() (r int, exists bool) {
	v := m.trust_score_rank
	if v == nil {
		return
	}
	return *v, true
}

// OldTrustScoreRank returns the old "trust_score_rank" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldTrustScoreRank(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrustScoreRank is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrustScoreRank requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrustScoreRank: %w", err)
	}
	return oldValue.TrustScoreRank, nil
}

// AddTrustScoreRank adds i to the "trust_score_rank" field.
func (m *ExchangeMutation) AddTrustScoreRank(i int) {
	if m.addtrust_score_rank != nil {
		*m.addtrust_score_rank += i
	} else {
		m.addtrust_score_rank = &i
	}
}

// AddedTrustScoreRank returns the value that was added to the "trust_score_rank" field in this mutation.
func (m *ExchangeMutation) AddedTrustScoreRank() (r int, exists bool) {
	v := m.addtrust_score_rank
	if v == nil {
		return
	}
	return *v, true
}

// ClearTrustScoreRank clears the value of the "trust_score_rank" field.
func (m *ExchangeMutation) ClearTrustScoreRank() {
	m.trust_score_rank = nil
	m.addtrust_score_rank = nil
	m.clearedFields[exchange.FieldTrustScoreRank] = struct{}{}
}

// TrustScoreRankCleared returns if the "trust_score_rank" field was cleared in this mutation.
func (m *ExchangeMutation) TrustScoreRankCleared() bool {
	_, ok := m.clearedFields[exchange.FieldTrustScoreRank]
	return ok
}

// ResetTrustScoreRank resets all changes to the "trust_score_rank" field.
func (m *ExchangeMutation) ResetTrustScoreRank() {
	m.trust_score_rank = nil
	m.addtrust_score_rank = nil
	delete(m.clearedFields, exchange.FieldTrustScoreRank)
}

// SetTradeVolume24hBtc sets the "trade_volume_24h_btc" field.
func (m *ExchangeMutation) SetTradeVolume24hBtc(f float64) {
	m.trade_volume_24h_btc = &f
	m.addtrade_volume_24h_btc = nil
}

// TradeVolume24hBtc returns the value of the "trade_volume_24h_btc" field in the mutation.
func (m *ExchangeMutation) TradeVolume24hBtc() (r float64, exists bool) {
	v := m.trade_volume_24h_btc
	if v == nil {
		return
	}
	return *v, true
}

// OldTradeVolume24hBtc returns the old "trade_volume_24h_btc" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldTradeVolume24hBtc(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTradeVolume24hBtc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTradeVolume24hBtc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTradeVolume24hBtc: %w", err)
	}
	return oldValue.TradeVolume24hBtc, nil
}

// AddTradeVolume24hBtc adds f to the "trade_volume_24h_btc" field.
func (m *ExchangeMutation) AddTradeVolume24hBtc(f float64) {
	if m.addtrade_volume_24h_btc != nil {
		*m.addtrade_volume_24h_btc += f
	} else {
		m.addtrade_volume_24h_btc = &f
	}
}

// AddedTradeVolume24hBtc returns the value that was added to the "trade_volume_24h_btc" field in this mutation.
func (m *ExchangeMutation) AddedTradeVolume24hBtc() (r float64, exists bool) {
	v := m.addtrade_volume_24h_btc
	if v == nil {
		return
	}
	return *v, true
}

// ClearTradeVolume24hBtc clears the value of the "trade_volume_24h_btc" field.
func (m *ExchangeMutation) ClearTradeVolume24hBtc() {
	m.trade_volume_24h_btc = nil
	m.addtrade_volume_24h_btc = nil
	m.clearedFields[exchange.FieldTradeVolume24hBtc] = struct{}{}
}

// TradeVolume24hBtcCleared returns if the "trade_volume_24h_btc" field was cleared in this mutation.
func (m *ExchangeMutation) TradeVolume24hBtcCleared() bool {
	_, ok := m.clearedFields[exchange.FieldTradeVolume24hBtc]
	return ok
}

// ResetTradeVolume24hBtc resets all changes to the "trade_volume_24h_btc" field.
func (m *ExchangeMutation) ResetTradeVolume24hBtc() {
	m.trade_volume_24h_btc = nil
	m.addtrade_volume_24h_btc = nil
	delete(m.clearedFields, exchange.FieldTradeVolume24hBtc)
}

// SetTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field.
func (m *ExchangeMutation) SetTradeVolume24hBtcNormalized(f float64) {
	m.trade_volume_24h_btc_normalized = &f
	m.addtrade_volume_24h_btc_normalized = nil
}

// TradeVolume24hBtcNormalized returns the value of the "trade_volume_24h_btc_normalized" field in the mutation.
func (m *ExchangeMutation) TradeVolume24hBtcNormalized() (r float64, exists bool) {
	v := m.trade_volume_24h_btc_normalized
	if v == nil {
		return
	}
	return *v, true
}

// OldTradeVolume24hBtcNormalized returns the old "trade_volume_24h_btc_normalized" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldTradeVolume24hBtcNormalized(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTradeVolume24hBtcNormalized is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTradeVolume24hBtcNormalized requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTradeVolume24hBtcNormalized: %w", err)
	}
	return oldValue.TradeVolume24hBtcNormalized, nil
}

// AddTradeVolume24hBtcNormalized adds f to the "trade_volume_24h_btc_normalized" field.
func (m *ExchangeMutation) AddTradeVolume24hBtcNormalized(f float64) {
	if m.addtrade_volume_24h_btc_normalized != nil {
		*m.addtrade_volume_24h_btc_normalized += f
	} else {
		m.addtrade_volume_24h_btc_normalized = &f
	}
}

// AddedTradeVolume24hBtcNormalized returns the value that was added to the "trade_volume_24h_btc_normalized" field in this mutation.
func (m *ExchangeMutation) AddedTradeVolume24hBtcNormalized() (r float64, exists bool) {
	v := m.addtrade_volume_24h_btc_normalized
	if v == nil {
		return
	}
	return *v, true
}

// ClearTradeVolume24hBtcNormalized clears the value of the "trade_volume_24h_btc_normalized" field.
func (m *ExchangeMutation) ClearTradeVolume24hBtcNormalized() {
	m.trade_volume_24h_btc_normalized = nil
	m.addtrade_volume_24h_btc_normalized = nil
	m.clearedFields[exchange.FieldTradeVolume24hBtcNormalized] = struct{}{}
}

// TradeVolume24hBtcNormalizedCleared returns if the "trade_volume_24h_btc_normalized" field was cleared in this mutation.
func (m *ExchangeMutation) TradeVolume24hBtcNormalizedCleared() bool {
	_, ok := m.clearedFields[exchange.FieldTradeVolume24hBtcNormalized]
	return ok
}

// ResetTradeVolume24hBtcNormalized resets all changes to the "trade_volume_24h_btc_normalized" field.
func (m *ExchangeMutation) ResetTradeVolume24hBtcNormalized() {
	m.trade_volume_24h_btc_normalized = nil
	m.addtrade_volume_24h_btc_normalized = nil
	delete(m.clearedFields, exchange.FieldTradeVolume24hBtcNormalized)
}

// SetMakerFee sets the "maker_fee" field.
func (m *ExchangeMutation) SetMakerFee(f float64) {
	m.maker_fee = &f
	m.addmaker_fee = nil
}

// MakerFee returns the value of the "maker_fee" field in the mutation.
func (m *ExchangeMutation) MakerFee() (r float64, exists bool) {
	v := m.maker_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldMakerFee returns the old "maker_fee" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldMakerFee(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMakerFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMakerFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMakerFee: %w", err)
	}
	return oldValue.MakerFee, nil
}

// AddMakerFee adds f to the "maker_fee" field.
func (m *ExchangeMutation) AddMakerFee(f float64) {
	if m.addmaker_fee != nil {
		*m.addmaker_fee += f
	} else {
		m.addmaker_fee = &f
	}
}

// AddedMakerFee returns the value that was added to the "maker_fee" field in this mutation.
func (m *ExchangeMutation) AddedMakerFee() (r float64, exists bool) {
	v := m.addmaker_fee
	if v == nil {
		return
	}
	return *v, true
}

// ClearMakerFee clears the value of the "maker_fee" field.
func (m *ExchangeMutation) ClearMakerFee() {
	m.maker_fee = nil
	m.addmaker_fee = nil
	m.clearedFields[exchange.FieldMakerFee] = struct{}{}
}

// MakerFeeCleared returns if the "maker_fee" field was cleared in this mutation.
func (m *ExchangeMutation) MakerFeeCleared() bool {
	_, ok := m.clearedFields[exchange.FieldMakerFee]
	return ok
}

// ResetMakerFee resets all changes to the "maker_fee" field.
func (m *ExchangeMutation) ResetMakerFee() {
	m.maker_fee = nil
	m.addmaker_fee = nil
	delete(m.clearedFields, exchange.FieldMakerFee)
}

// SetTakerFee sets the "taker_fee" field.
func (m *ExchangeMutation) SetTakerFee(f float64) {
	m.taker_fee = &f
	m.addtaker_fee = nil
}

// TakerFee returns the value of the "taker_fee" field in the mutation.
func (m *ExchangeMutation) TakerFee() (r float64, exists bool) {
	v := m.taker_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldTakerFee returns the old "taker_fee" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldTakerFee(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTakerFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTakerFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTakerFee: %w", err)
	}
	return oldValue.TakerFee, nil
}

// AddTakerFee adds f to the "taker_fee" field.
func (m *ExchangeMutation) AddTakerFee(f float64) {
	if m.addtaker_fee != nil {
		*m.addtaker_fee += f
	} else {
		m.addtaker_fee = &f
	}
}

// AddedTakerFee returns the value that was added to the "taker_fee" field in this mutation.
func (m *ExchangeMutation) AddedTakerFee() (r float64, exists bool) {
	v := m.addtaker_fee
	if v == nil {
		return
	}
	return *v, true
}

// ClearTakerFee clears the value of the "taker_fee" field.
func (m *ExchangeMutation) ClearTakerFee() {
	m.taker_fee = nil
	m.addtaker_fee = nil
	m.clearedFields[exchange.FieldTakerFee] = struct{}{}
}

// TakerFeeCleared returns if the "taker_fee" field was cleared in this mutation.
func (m *ExchangeMutation) TakerFeeCleared() bool {
	_, ok := m.clearedFields[exchange.FieldTakerFee]
	return ok
}

// ResetTakerFee resets all changes to the "taker_fee" field.
func (m *ExchangeMutation) ResetTakerFee() {
	m.taker_fee = nil
	m.addtaker_fee = nil
	delete(m.clearedFields, exchange.FieldTakerFee)
}

// SetSpreadFee sets the "spread_fee" field.
func (m *ExchangeMutation) SetSpreadFee(b bool) {
	m.spread_fee = &b
}

// SpreadFee returns the value of the "spread_fee" field in the mutation.
func (m *ExchangeMutation) SpreadFee() (r bool, exists bool) {
	v := m.spread_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldSpreadFee returns the old "spread_fee" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldSpreadFee(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpreadFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpreadFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpreadFee: %w", err)
	}
	return oldValue.SpreadFee, nil
}

// ClearSpreadFee clears the value of the "spread_fee" field.
func (m *ExchangeMutation) ClearSpreadFee() {
	m.spread_fee = nil
	m.clearedFields[exchange.FieldSpreadFee] = struct{}{}
}

// SpreadFeeCleared returns if the "spread_fee" field was cleared in this mutation.
func (m *ExchangeMutation) SpreadFeeCleared() bool {
	_, ok := m.clearedFields[exchange.FieldSpreadFee]
	return ok
}

// ResetSpreadFee resets all changes to the "spread_fee" field.
func (m *ExchangeMutation) ResetSpreadFee() {
	m.spread_fee = nil
	delete(m.clearedFields, exchange.FieldSpreadFee)
}

// SetSupportAPI sets the "support_api" field.
func (m *ExchangeMutation) SetSupportAPI(b bool) {
	m.support_api = &b
}

// SupportAPI returns the value of the "support_api" field in the mutation.
func (m *ExchangeMutation) SupportAPI() (r bool, exists bool) {
	v := m.support_api
	if v == nil {
		return
	}
	return *v, true
}

// OldSupportAPI returns the old "support_api" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldSupportAPI(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSupportAPI is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSupportAPI requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSupportAPI: %w", err)
	}
	return oldValue.SupportAPI, nil
}

// ClearSupportAPI clears the value of the "support_api" field.
func (m *ExchangeMutation) ClearSupportAPI() {
	m.support_api = nil
	m.clearedFields[exchange.FieldSupportAPI] = struct{}{}
}

// SupportAPICleared returns if the "support_api" field was cleared in this mutation.
func (m *ExchangeMutation) SupportAPICleared() bool {
	_, ok := m.clearedFields[exchange.FieldSupportAPI]
	return ok
}

// ResetSupportAPI resets all changes to the "support_api" field.
func (m *ExchangeMutation) ResetSupportAPI() {
	m.support_api = nil
	delete(m.clearedFields, exchange.FieldSupportAPI)
}

// AddTickerIDs adds the "ticker" edge to the Ticker entity by ids.
func (m *ExchangeMutation) AddTickerIDs(ids ...int) {
	if m.ticker == nil {
		m.ticker = make(map[int]struct{})
	}
	for i := range ids {
		m.ticker[ids[i]] = struct{}{}
	}
}

// ClearTicker clears the "ticker" edge to the Ticker entity.
func (m *ExchangeMutation) ClearTicker() {
	m.clearedticker = true
}

// TickerCleared reports if the "ticker" edge to the Ticker entity was cleared.
func (m *ExchangeMutation) TickerCleared() bool {
	return m.clearedticker
}

// RemoveTickerIDs removes the "ticker" edge to the Ticker entity by IDs.
func (m *ExchangeMutation) RemoveTickerIDs(ids ...int) {
	if m.removedticker == nil {
		m.removedticker = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.ticker, ids[i])
		m.removedticker[ids[i]] = struct{}{}
	}
}

// RemovedTicker returns the removed IDs of the "ticker" edge to the Ticker entity.
func (m *ExchangeMutation) RemovedTickerIDs() (ids []int) {
	for id := range m.removedticker {
		ids = append(ids, id)
	}
	return
}

// TickerIDs returns the "ticker" edge IDs in the mutation.
func (m *ExchangeMutation) TickerIDs() (ids []int) {
	for id := range m.ticker {
		ids = append(ids, id)
	}
	return
}

// ResetTicker resets all changes to the "ticker" edge.
func (m *ExchangeMutation) ResetTicker() {
	m.ticker = nil
	m.clearedticker = false
	m.removedticker = nil
}

// AddTradingPairIDs adds the "trading_pair" edge to the TradingPair entity by ids.
func (m *ExchangeMutation) AddTradingPairIDs(ids ...int) {
	if m.trading_pair == nil {
		m.trading_pair = make(map[int]struct{})
	}
	for i := range ids {
		m.trading_pair[ids[i]] = struct{}{}
	}
}

// ClearTradingPair clears the "trading_pair" edge to the TradingPair entity.
func (m *ExchangeMutation) ClearTradingPair() {
	m.clearedtrading_pair = true
}

// TradingPairCleared reports if the "trading_pair" edge to the TradingPair entity was cleared.
func (m *ExchangeMutation) TradingPairCleared() bool {
	return m.clearedtrading_pair
}

// RemoveTradingPairIDs removes the "trading_pair" edge to the TradingPair entity by IDs.
func (m *ExchangeMutation) RemoveTradingPairIDs(ids ...int) {
	if m.removedtrading_pair == nil {
		m.removedtrading_pair = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.trading_pair, ids[i])
		m.removedtrading_pair[ids[i]] = struct{}{}
	}
}

// RemovedTradingPair returns the removed IDs of the "trading_pair" edge to the TradingPair entity.
func (m *ExchangeMutation) RemovedTradingPairIDs() (ids []int) {
	for id := range m.removedtrading_pair {
		ids = append(ids, id)
	}
	return
}

// TradingPairIDs returns the "trading_pair" edge IDs in the mutation.
func (m *ExchangeMutation) TradingPairIDs() (ids []int) {
	for id := range m.trading_pair {
		ids = append(ids, id)
	}
	return
}

// ResetTradingPair resets all changes to the "trading_pair" edge.
func (m *ExchangeMutation) ResetTradingPair() {
	m.trading_pair = nil
	m.clearedtrading_pair = false
	m.removedtrading_pair = nil
}

// AddMarketIDs adds the "market" edge to the Market entity by ids.
func (m *ExchangeMutation) AddMarketIDs(ids ...int) {
	if m.market == nil {
		m.market = make(map[int]struct{})
	}
	for i := range ids {
		m.market[ids[i]] = struct{}{}
	}
}

// ClearMarket clears the "market" edge to the Market entity.
func (m *ExchangeMutation) ClearMarket() {
	m.clearedmarket = true
}

// MarketCleared reports if the "market" edge to the Market entity was cleared.
func (m *ExchangeMutation) MarketCleared() bool {
	return m.clearedmarket
}

// RemoveMarketIDs removes the "market" edge to the Market entity by IDs.
func (m *ExchangeMutation) RemoveMarketIDs(ids ...int) {
	if m.removedmarket == nil {
		m.removedmarket = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.market, ids[i])
		m.removedmarket[ids[i]] = struct{}{}
	}
}

// RemovedMarket returns the removed IDs of the "market" edge to the Market entity.
func (m *ExchangeMutation) RemovedMarketIDs() (ids []int) {
	for id := range m.removedmarket {
		ids = append(ids, id)
	}
	return
}

// MarketIDs returns the "market" edge IDs in the mutation.
func (m *ExchangeMutation) MarketIDs() (ids []int) {
	for id := range m.market {
		ids = append(ids, id)
	}
	return
}

// ResetMarket resets all changes to the "market" edge.
func (m *ExchangeMutation) ResetMarket() {
	m.market = nil
	m.clearedmarket = false
	m.removedmarket = nil
}

// Where appends a list predicates to the ExchangeMutation builder.
func (m *ExchangeMutation) Where(ps ...predicate.Exchange) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ExchangeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Exchange).
func (m *ExchangeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExchangeMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.exchange_id != nil {
		fields = append(fields, exchange.FieldExchangeID)
	}
	if m.name != nil {
		fields = append(fields, exchange.FieldName)
	}
	if m.year_established != nil {
		fields = append(fields, exchange.FieldYearEstablished)
	}
	if m.country != nil {
		fields = append(fields, exchange.FieldCountry)
	}
	if m.image != nil {
		fields = append(fields, exchange.FieldImage)
	}
	if m.links != nil {
		fields = append(fields, exchange.FieldLinks)
	}
	if m.has_trading_incentive != nil {
		fields = append(fields, exchange.FieldHasTradingIncentive)
	}
	if m.centralized != nil {
		fields = append(fields, exchange.FieldCentralized)
	}
	if m.public_notice != nil {
		fields = append(fields, exchange.FieldPublicNotice)
	}
	if m.alert_notice != nil {
		fields = append(fields, exchange.FieldAlertNotice)
	}
	if m.trust_score != nil {
		fields = append(fields, exchange.FieldTrustScore)
	}
	if m.trust_score_rank != nil {
		fields = append(fields, exchange.FieldTrustScoreRank)
	}
	if m.trade_volume_24h_btc != nil {
		fields = append(fields, exchange.FieldTradeVolume24hBtc)
	}
	if m.trade_volume_24h_btc_normalized != nil {
		fields = append(fields, exchange.FieldTradeVolume24hBtcNormalized)
	}
	if m.maker_fee != nil {
		fields = append(fields, exchange.FieldMakerFee)
	}
	if m.taker_fee != nil {
		fields = append(fields, exchange.FieldTakerFee)
	}
	if m.spread_fee != nil {
		fields = append(fields, exchange.FieldSpreadFee)
	}
	if m.support_api != nil {
		fields = append(fields, exchange.FieldSupportAPI)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExchangeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case exchange.FieldExchangeID:
		return m.ExchangeID()
	case exchange.FieldName:
		return m.Name()
	case exchange.FieldYearEstablished:
		return m.YearEstablished()
	case exchange.FieldCountry:
		return m.Country()
	case exchange.FieldImage:
		return m.Image()
	case exchange.FieldLinks:
		return m.Links()
	case exchange.FieldHasTradingIncentive:
		return m.HasTradingIncentive()
	case exchange.FieldCentralized:
		return m.Centralized()
	case exchange.FieldPublicNotice:
		return m.PublicNotice()
	case exchange.FieldAlertNotice:
		return m.AlertNotice()
	case exchange.FieldTrustScore:
		return m.TrustScore()
	case exchange.FieldTrustScoreRank:
		return m.TrustScoreRank()
	case exchange.FieldTradeVolume24hBtc:
		return m.TradeVolume24hBtc()
	case exchange.FieldTradeVolume24hBtcNormalized:
		return m.TradeVolume24hBtcNormalized()
	case exchange.FieldMakerFee:
		return m.MakerFee()
	case exchange.FieldTakerFee:
		return m.TakerFee()
	case exchange.FieldSpreadFee:
		return m.SpreadFee()
	case exchange.FieldSupportAPI:
		return m.SupportAPI()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExchangeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case exchange.FieldExchangeID:
		return m.OldExchangeID(ctx)
	case exchange.FieldName:
		return m.OldName(ctx)
	case exchange.FieldYearEstablished:
		return m.OldYearEstablished(ctx)
	case exchange.FieldCountry:
		return m.OldCountry(ctx)
	case exchange.FieldImage:
		return m.OldImage(ctx)
	case exchange.FieldLinks:
		return m.OldLinks(ctx)
	case exchange.FieldHasTradingIncentive:
		return m.OldHasTradingIncentive(ctx)
	case exchange.FieldCentralized:
		return m.OldCentralized(ctx)
	case exchange.FieldPublicNotice:
		return m.OldPublicNotice(ctx)
	case exchange.FieldAlertNotice:
		return m.OldAlertNotice(ctx)
	case exchange.FieldTrustScore:
		return m.OldTrustScore(ctx)
	case exchange.FieldTrustScoreRank:
		return m.OldTrustScoreRank(ctx)
	case exchange.FieldTradeVolume24hBtc:
		return m.OldTradeVolume24hBtc(ctx)
	case exchange.FieldTradeVolume24hBtcNormalized:
		return m.OldTradeVolume24hBtcNormalized(ctx)
	case exchange.FieldMakerFee:
		return m.OldMakerFee(ctx)
	case exchange.FieldTakerFee:
		return m.OldTakerFee(ctx)
	case exchange.FieldSpreadFee:
		return m.OldSpreadFee(ctx)
	case exchange.FieldSupportAPI:
		return m.OldSupportAPI(ctx)
	}
	return nil, fmt.Errorf("unknown Exchange field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExchangeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case exchange.FieldExchangeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExchangeID(v)
		return nil
	case exchange.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case exchange.FieldYearEstablished:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYearEstablished(v)
		return nil
	case exchange.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case exchange.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case exchange.FieldLinks:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLinks(v)
		return nil
	case exchange.FieldHasTradingIncentive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasTradingIncentive(v)
		return nil
	case exchange.FieldCentralized:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCentralized(v)
		return nil
	case exchange.FieldPublicNotice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicNotice(v)
		return nil
	case exchange.FieldAlertNotice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlertNotice(v)
		return nil
	case exchange.FieldTrustScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrustScore(v)
		return nil
	case exchange.FieldTrustScoreRank:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrustScoreRank(v)
		return nil
	case exchange.FieldTradeVolume24hBtc:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTradeVolume24hBtc(v)
		return nil
	case exchange.FieldTradeVolume24hBtcNormalized:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTradeVolume24hBtcNormalized(v)
		return nil
	case exchange.FieldMakerFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMakerFee(v)
		return nil
	case exchange.FieldTakerFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTakerFee(v)
		return nil
	case exchange.FieldSpreadFee:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpreadFee(v)
		return nil
	case exchange.FieldSupportAPI:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSupportAPI(v)
		return nil
	}
	return fmt.Errorf("unknown Exchange field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExchangeMutation) AddedFields() []string {
	var fields []string
	if m.addyear_established != nil {
		fields = append(fields, exchange.FieldYearEstablished)
	}
	if m.addtrust_score != nil {
		fields = append(fields, exchange.FieldTrustScore)
	}
	if m.addtrust_score_rank != nil {
		fields = append(fields, exchange.FieldTrustScoreRank)
	}
	if m.addtrade_volume_24h_btc != nil {
		fields = append(fields, exchange.FieldTradeVolume24hBtc)
	}
	if m.addtrade_volume_24h_btc_normalized != nil {
		fields = append(fields, exchange.FieldTradeVolume24hBtcNormalized)
	}
	if m.addmaker_fee != nil {
		fields = append(fields, exchange.FieldMakerFee)
	}
	if m.addtaker_fee != nil {
		fields = append(fields, exchange.FieldTakerFee)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExchangeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case exchange.FieldYearEstablished:
		return m.AddedYearEstablished()
	case exchange.FieldTrustScore:
		return m.AddedTrustScore()
	case exchange.FieldTrustScoreRank:
		return m.AddedTrustScoreRank()
	case exchange.FieldTradeVolume24hBtc:
		return m.AddedTradeVolume24hBtc()
	case exchange.FieldTradeVolume24hBtcNormalized:
		return m.AddedTradeVolume24hBtcNormalized()
	case exchange.FieldMakerFee:
		return m.AddedMakerFee()
	case exchange.FieldTakerFee:
		return m.AddedTakerFee()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExchangeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case exchange.FieldYearEstablished:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddYearEstablished(v)
		return nil
	case exchange.FieldTrustScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTrustScore(v)
		return nil
	case exchange.FieldTrustScoreRank:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTrustScoreRank(v)
		return nil
	case exchange.FieldTradeVolume24hBtc:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTradeVolume24hBtc(v)
		return nil
	case exchange.FieldTradeVolume24hBtcNormalized:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTradeVolume24hBtcNormalized(v)
		return nil
	case exchange.FieldMakerFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMakerFee(v)
		return nil
	case exchange.FieldTakerFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTakerFee(v)
		return nil
	}
	return fmt.Errorf("unknown Exchange numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExchangeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(exchange.FieldName) {
		fields = append(fields, exchange.FieldName)
	}
	if m.FieldCleared(exchange.FieldYearEstablished) {
		fields = append(fields, exchange.FieldYearEstablished)
	}
	if m.FieldCleared(exchange.FieldCountry) {
		fields = append(fields, exchange.FieldCountry)
	}
	if m.FieldCleared(exchange.FieldImage) {
		fields = append(fields, exchange.FieldImage)
	}
	if m.FieldCleared(exchange.FieldLinks) {
		fields = append(fields, exchange.FieldLinks)
	}
	if m.FieldCleared(exchange.FieldHasTradingIncentive) {
		fields = append(fields, exchange.FieldHasTradingIncentive)
	}
	if m.FieldCleared(exchange.FieldCentralized) {
		fields = append(fields, exchange.FieldCentralized)
	}
	if m.FieldCleared(exchange.FieldPublicNotice) {
		fields = append(fields, exchange.FieldPublicNotice)
	}
	if m.FieldCleared(exchange.FieldAlertNotice) {
		fields = append(fields, exchange.FieldAlertNotice)
	}
	if m.FieldCleared(exchange.FieldTrustScore) {
		fields = append(fields, exchange.FieldTrustScore)
	}
	if m.FieldCleared(exchange.FieldTrustScoreRank) {
		fields = append(fields, exchange.FieldTrustScoreRank)
	}
	if m.FieldCleared(exchange.FieldTradeVolume24hBtc) {
		fields = append(fields, exchange.FieldTradeVolume24hBtc)
	}
	if m.FieldCleared(exchange.FieldTradeVolume24hBtcNormalized) {
		fields = append(fields, exchange.FieldTradeVolume24hBtcNormalized)
	}
	if m.FieldCleared(exchange.FieldMakerFee) {
		fields = append(fields, exchange.FieldMakerFee)
	}
	if m.FieldCleared(exchange.FieldTakerFee) {
		fields = append(fields, exchange.FieldTakerFee)
	}
	if m.FieldCleared(exchange.FieldSpreadFee) {
		fields = append(fields, exchange.FieldSpreadFee)
	}
	if m.FieldCleared(exchange.FieldSupportAPI) {
		fields = append(fields, exchange.FieldSupportAPI)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExchangeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExchangeMutation) ClearField(name string) error {
	switch name {
	case exchange.FieldName:
		m.ClearName()
		return nil
	case exchange.FieldYearEstablished:
		m.ClearYearEstablished()
		return nil
	case exchange.FieldCountry:
		m.ClearCountry()
		return nil
	case exchange.FieldImage:
		m.ClearImage()
		return nil
	case exchange.FieldLinks:
		m.ClearLinks()
		return nil
	case exchange.FieldHasTradingIncentive:
		m.ClearHasTradingIncentive()
		return nil
	case exchange.FieldCentralized:
		m.ClearCentralized()
		return nil
	case exchange.FieldPublicNotice:
		m.ClearPublicNotice()
		return nil
	case exchange.FieldAlertNotice:
		m.ClearAlertNotice()
		return nil
	case exchange.FieldTrustScore:
		m.ClearTrustScore()
		return nil
	case exchange.FieldTrustScoreRank:
		m.ClearTrustScoreRank()
		return nil
	case exchange.FieldTradeVolume24hBtc:
		m.ClearTradeVolume24hBtc()
		return nil
	case exchange.FieldTradeVolume24hBtcNormalized:
		m.ClearTradeVolume24hBtcNormalized()
		return nil
	case exchange.FieldMakerFee:
		m.ClearMakerFee()
		return nil
	case exchange.FieldTakerFee:
		m.ClearTakerFee()
		return nil
	case exchange.FieldSpreadFee:
		m.ClearSpreadFee()
		return nil
	case exchange.FieldSupportAPI:
		m.ClearSupportAPI()
		return nil
	}
	return fmt.Errorf("unknown Exchange nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExchangeMutation) ResetField(name string) error {
	switch name {
	case exchange.FieldExchangeID:
		m.ResetExchangeID()
		return nil
	case exchange.FieldName:
		m.ResetName()
		return nil
	case exchange.FieldYearEstablished:
		m.ResetYearEstablished()
		return nil
	case exchange.FieldCountry:
		m.ResetCountry()
		return nil
	case exchange.FieldImage:
		m.ResetImage()
		return nil
	case exchange.FieldLinks:
		m.ResetLinks()
		return nil
	case exchange.FieldHasTradingIncentive:
		m.ResetHasTradingIncentive()
		return nil
	case exchange.FieldCentralized:
		m.ResetCentralized()
		return nil
	case exchange.FieldPublicNotice:
		m.ResetPublicNotice()
		return nil
	case exchange.FieldAlertNotice:
		m.ResetAlertNotice()
		return nil
	case exchange.FieldTrustScore:
		m.ResetTrustScore()
		return nil
	case exchange.FieldTrustScoreRank:
		m.ResetTrustScoreRank()
		return nil
	case exchange.FieldTradeVolume24hBtc:
		m.ResetTradeVolume24hBtc()
		return nil
	case exchange.FieldTradeVolume24hBtcNormalized:
		m.ResetTradeVolume24hBtcNormalized()
		return nil
	case exchange.FieldMakerFee:
		m.ResetMakerFee()
		return nil
	case exchange.FieldTakerFee:
		m.ResetTakerFee()
		return nil
	case exchange.FieldSpreadFee:
		m.ResetSpreadFee()
		return nil
	case exchange.FieldSupportAPI:
		m.ResetSupportAPI()
		return nil
	}
	return fmt.Errorf("unknown Exchange field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExchangeMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.ticker != nil {
		edges = append(edges, exchange.EdgeTicker)
	}
	if m.trading_pair != nil {
		edges = append(edges, exchange.EdgeTradingPair)
	}
	if m.market != nil {
		edges = append(edges, exchange.EdgeMarket)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExchangeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case exchange.EdgeTicker:
		ids := make([]ent.Value, 0, len(m.ticker))
		for id := range m.ticker {
			ids = append(ids, id)
		}
		return ids
	case exchange.EdgeTradingPair:
		ids := make([]ent.Value, 0, len(m.trading_pair))
		for id := range m.trading_pair {
			ids = append(ids, id)
		}
		return ids
	case exchange.EdgeMarket:
		ids := make([]ent.Value, 0, len(m.market))
		for id := range m.market {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExchangeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedticker != nil {
		edges = append(edges, exchange.EdgeTicker)
	}
	if m.removedtrading_pair != nil {
		edges = append(edges, exchange.EdgeTradingPair)
	}
	if m.removedmarket != nil {
		edges = append(edges, exchange.EdgeMarket)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExchangeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case exchange.EdgeTicker:
		ids := make([]ent.Value, 0, len(m.removedticker))
		for id := range m.removedticker {
			ids = append(ids, id)
		}
		return ids
	case exchange.EdgeTradingPair:
		ids := make([]ent.Value, 0, len(m.removedtrading_pair))
		for id := range m.removedtrading_pair {
			ids = append(ids, id)
		}
		return ids
	case exchange.EdgeMarket:
		ids := make([]ent.Value, 0, len(m.removedmarket))
		for id := range m.removedmarket {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExchangeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedticker {
		edges = append(edges, exchange.EdgeTicker)
	}
	if m.clearedtrading_pair {
		edges = append(edges, exchange.EdgeTradingPair)
	}
	if m.clearedmarket {
		edges = append(edges, exchange.EdgeMarket)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExchangeMutation) EdgeCleared(name string) bool {
	switch name {
	case exchange.EdgeTicker:
		return m.clearedticker
	case exchange.EdgeTradingPair:
		return m.clearedtrading_pair
	case exchange.EdgeMarket:
		return m.clearedmarket
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExchangeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Exchange unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExchangeMutation) ResetEdge(name string) error {
	switch name {
	case exchange.EdgeTicker:
		m.ResetTicker()
		return nil
	case exchange.EdgeTradingPair:
		m.ResetTradingPair()
		return nil
	case exchange.EdgeMarket:
		m.ResetMarket()
		return nil
	}
	return fmt.Errorf("unknown Exchange edge %s", name)
}

// MarketMutation represents an operation that mutates the Market nodes in the graph.
type MarketMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	_type               *market.Type
	clearedFields       map[string]struct{}
	exchange            *int
	clearedexchange     bool
	trading_pair        map[int]struct{}
	removedtrading_pair map[int]struct{}
	clearedtrading_pair bool
	done                bool
	oldValue            func(context.Context) (*Market, error)
	predicates          []predicate.Market
}

var _ ent.Mutation = (*MarketMutation)(nil)

// marketOption allows management of the mutation configuration using functional options.
type marketOption func(*MarketMutation)

// newMarketMutation creates new mutation for the Market entity.
func newMarketMutation(c config, op Op, opts ...marketOption) *MarketMutation {
	m := &MarketMutation{
		config:        c,
		op:            op,
		typ:           TypeMarket,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMarketID sets the ID field of the mutation.
func withMarketID(id int) marketOption {
	return func(m *MarketMutation) {
		var (
			err   error
			once  sync.Once
			value *Market
		)
		m.oldValue = func(ctx context.Context) (*Market, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Market.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMarket sets the old Market of the mutation.
func withMarket(node *Market) marketOption {
	return func(m *MarketMutation) {
		m.oldValue = func(context.Context) (*Market, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MarketMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MarketMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MarketMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MarketMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Market.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *MarketMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MarketMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Market entity.
// If the Market object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MarketMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MarketMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *MarketMutation) SetType(value market.Type) {
	m._type = &value
}

// GetType returns the value of the "type" field in the mutation.
func (m *MarketMutation) GetType() (r market.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Market entity.
// If the Market object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MarketMutation) OldType(ctx context.Context) (v market.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *MarketMutation) ResetType() {
	m._type = nil
}

// SetExchangeID sets the "exchange" edge to the Exchange entity by id.
func (m *MarketMutation) SetExchangeID(id int) {
	m.exchange = &id
}

// ClearExchange clears the "exchange" edge to the Exchange entity.
func (m *MarketMutation) ClearExchange() {
	m.clearedexchange = true
}

// ExchangeCleared reports if the "exchange" edge to the Exchange entity was cleared.
func (m *MarketMutation) ExchangeCleared() bool {
	return m.clearedexchange
}

// ExchangeID returns the "exchange" edge ID in the mutation.
func (m *MarketMutation) ExchangeID() (id int, exists bool) {
	if m.exchange != nil {
		return *m.exchange, true
	}
	return
}

// ExchangeIDs returns the "exchange" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ExchangeID instead. It exists only for internal usage by the builders.
func (m *MarketMutation) ExchangeIDs() (ids []int) {
	if id := m.exchange; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExchange resets all changes to the "exchange" edge.
func (m *MarketMutation) ResetExchange() {
	m.exchange = nil
	m.clearedexchange = false
}

// AddTradingPairIDs adds the "trading_pair" edge to the TradingPair entity by ids.
func (m *MarketMutation) AddTradingPairIDs(ids ...int) {
	if m.trading_pair == nil {
		m.trading_pair = make(map[int]struct{})
	}
	for i := range ids {
		m.trading_pair[ids[i]] = struct{}{}
	}
}

// ClearTradingPair clears the "trading_pair" edge to the TradingPair entity.
func (m *MarketMutation) ClearTradingPair() {
	m.clearedtrading_pair = true
}

// TradingPairCleared reports if the "trading_pair" edge to the TradingPair entity was cleared.
func (m *MarketMutation) TradingPairCleared() bool {
	return m.clearedtrading_pair
}

// RemoveTradingPairIDs removes the "trading_pair" edge to the TradingPair entity by IDs.
func (m *MarketMutation) RemoveTradingPairIDs(ids ...int) {
	if m.removedtrading_pair == nil {
		m.removedtrading_pair = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.trading_pair, ids[i])
		m.removedtrading_pair[ids[i]] = struct{}{}
	}
}

// RemovedTradingPair returns the removed IDs of the "trading_pair" edge to the TradingPair entity.
func (m *MarketMutation) RemovedTradingPairIDs() (ids []int) {
	for id := range m.removedtrading_pair {
		ids = append(ids, id)
	}
	return
}

// TradingPairIDs returns the "trading_pair" edge IDs in the mutation.
func (m *MarketMutation) TradingPairIDs() (ids []int) {
	for id := range m.trading_pair {
		ids = append(ids, id)
	}
	return
}

// ResetTradingPair resets all changes to the "trading_pair" edge.
func (m *MarketMutation) ResetTradingPair() {
	m.trading_pair = nil
	m.clearedtrading_pair = false
	m.removedtrading_pair = nil
}

// Where appends a list predicates to the MarketMutation builder.
func (m *MarketMutation) Where(ps ...predicate.Market) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MarketMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Market).
func (m *MarketMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MarketMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, market.FieldName)
	}
	if m._type != nil {
		fields = append(fields, market.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MarketMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case market.FieldName:
		return m.Name()
	case market.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MarketMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case market.FieldName:
		return m.OldName(ctx)
	case market.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Market field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MarketMutation) SetField(name string, value ent.Value) error {
	switch name {
	case market.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case market.FieldType:
		v, ok := value.(market.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Market field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MarketMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MarketMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MarketMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Market numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MarketMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MarketMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MarketMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Market nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MarketMutation) ResetField(name string) error {
	switch name {
	case market.FieldName:
		m.ResetName()
		return nil
	case market.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Market field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MarketMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.exchange != nil {
		edges = append(edges, market.EdgeExchange)
	}
	if m.trading_pair != nil {
		edges = append(edges, market.EdgeTradingPair)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MarketMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case market.EdgeExchange:
		if id := m.exchange; id != nil {
			return []ent.Value{*id}
		}
	case market.EdgeTradingPair:
		ids := make([]ent.Value, 0, len(m.trading_pair))
		for id := range m.trading_pair {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MarketMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtrading_pair != nil {
		edges = append(edges, market.EdgeTradingPair)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MarketMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case market.EdgeTradingPair:
		ids := make([]ent.Value, 0, len(m.removedtrading_pair))
		for id := range m.removedtrading_pair {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MarketMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedexchange {
		edges = append(edges, market.EdgeExchange)
	}
	if m.clearedtrading_pair {
		edges = append(edges, market.EdgeTradingPair)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MarketMutation) EdgeCleared(name string) bool {
	switch name {
	case market.EdgeExchange:
		return m.clearedexchange
	case market.EdgeTradingPair:
		return m.clearedtrading_pair
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MarketMutation) ClearEdge(name string) error {
	switch name {
	case market.EdgeExchange:
		m.ClearExchange()
		return nil
	}
	return fmt.Errorf("unknown Market unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MarketMutation) ResetEdge(name string) error {
	switch name {
	case market.EdgeExchange:
		m.ResetExchange()
		return nil
	case market.EdgeTradingPair:
		m.ResetTradingPair()
		return nil
	}
	return fmt.Errorf("unknown Market edge %s", name)
}

// OutboxMutation represents an operation that mutates the Outbox nodes in the graph.
type OutboxMutation struct {
	config
	op                Op
	typ               string
	id                *int
	timestamp         *time.Time
	topic             *string
	key               *string
	payload           *[]byte
	headers           *map[string]string
	retry_count       *int
	addretry_count    *int
	status            *outbox.Status
	last_retry        *time.Time
	processing_errors *[]string
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Outbox, error)
	predicates        []predicate.Outbox
}

var _ ent.Mutation = (*OutboxMutation)(nil)

// outboxOption allows management of the mutation configuration using functional options.
type outboxOption func(*OutboxMutation)

// newOutboxMutation creates new mutation for the Outbox entity.
func newOutboxMutation(c config, op Op, opts ...outboxOption) *OutboxMutation {
	m := &OutboxMutation{
		config:        c,
		op:            op,
		typ:           TypeOutbox,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOutboxID sets the ID field of the mutation.
func withOutboxID(id int) outboxOption {
	return func(m *OutboxMutation) {
		var (
			err   error
			once  sync.Once
			value *Outbox
		)
		m.oldValue = func(ctx context.Context) (*Outbox, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Outbox.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOutbox sets the old Outbox of the mutation.
func withOutbox(node *Outbox) outboxOption {
	return func(m *OutboxMutation) {
		m.oldValue = func(context.Context) (*Outbox, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OutboxMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OutboxMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OutboxMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OutboxMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Outbox.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTimestamp sets the "timestamp" field.
func (m *OutboxMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *OutboxMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *OutboxMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetTopic sets the "topic" field.
func (m *OutboxMutation) SetTopic(s string) {
	m.topic = &s
}

// Topic returns the value of the "topic" field in the mutation.
func (m *OutboxMutation) Topic() (r string, exists bool) {
	v := m.topic
	if v == nil {
		return
	}
	return *v, true
}

// OldTopic returns the old "topic" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldTopic(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTopic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTopic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopic: %w", err)
	}
	return oldValue.Topic, nil
}

// ResetTopic resets all changes to the "topic" field.
func (m *OutboxMutation) ResetTopic() {
	m.topic = nil
}

// SetKey sets the "key" field.
func (m *OutboxMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *OutboxMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *OutboxMutation) ResetKey() {
	m.key = nil
}

// SetPayload sets the "payload" field.
func (m *OutboxMutation) SetPayload(b []byte) {
	m.payload = &b
}

// Payload returns the value of the "payload" field in the mutation.
func (m *OutboxMutation) Payload() (r []byte, exists bool) {
	v := m.payload
	if v == nil {
		return
	}
	return *v, true
}

// OldPayload returns the old "payload" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldPayload(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayload: %w", err)
	}
	return oldValue.Payload, nil
}

// ResetPayload resets all changes to the "payload" field.
func (m *OutboxMutation) ResetPayload() {
	m.payload = nil
}

// SetHeaders sets the "headers" field.
func (m *OutboxMutation) SetHeaders(value map[string]string) {
	m.headers = &value
}

// Headers returns the value of the "headers" field in the mutation.
func (m *OutboxMutation) Headers() (r map[string]string, exists bool) {
	v := m.headers
	if v == nil {
		return
	}
	return *v, true
}

// OldHeaders returns the old "headers" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldHeaders(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeaders is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeaders requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeaders: %w", err)
	}
	return oldValue.Headers, nil
}

// ResetHeaders resets all changes to the "headers" field.
func (m *OutboxMutation) ResetHeaders() {
	m.headers = nil
}

// SetRetryCount sets the "retry_count" field.
func (m *OutboxMutation) SetRetryCount(i int) {
	m.retry_count = &i
	m.addretry_count = nil
}

// RetryCount returns the value of the "retry_count" field in the mutation.
func (m *OutboxMutation) RetryCount() (r int, exists bool) {
	v := m.retry_count
	if v == nil {
		return
	}
	return *v, true
}

// OldRetryCount returns the old "retry_count" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldRetryCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetryCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetryCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetryCount: %w", err)
	}
	return oldValue.RetryCount, nil
}

// AddRetryCount adds i to the "retry_count" field.
func (m *OutboxMutation) AddRetryCount(i int) {
	if m.addretry_count != nil {
		*m.addretry_count += i
	} else {
		m.addretry_count = &i
	}
}

// AddedRetryCount returns the value that was added to the "retry_count" field in this mutation.
func (m *OutboxMutation) AddedRetryCount() (r int, exists bool) {
	v := m.addretry_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetRetryCount resets all changes to the "retry_count" field.
func (m *OutboxMutation) ResetRetryCount() {
	m.retry_count = nil
	m.addretry_count = nil
}

// SetStatus sets the "status" field.
func (m *OutboxMutation) SetStatus(o outbox.Status) {
	m.status = &o
}

// Status returns the value of the "status" field in the mutation.
func (m *OutboxMutation) Status() (r outbox.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldStatus(ctx context.Context) (v outbox.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *OutboxMutation) ResetStatus() {
	m.status = nil
}

// SetLastRetry sets the "last_retry" field.
func (m *OutboxMutation) SetLastRetry(t time.Time) {
	m.last_retry = &t
}

// LastRetry returns the value of the "last_retry" field in the mutation.
func (m *OutboxMutation) LastRetry() (r time.Time, exists bool) {
	v := m.last_retry
	if v == nil {
		return
	}
	return *v, true
}

// OldLastRetry returns the old "last_retry" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldLastRetry(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastRetry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastRetry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastRetry: %w", err)
	}
	return oldValue.LastRetry, nil
}

// ClearLastRetry clears the value of the "last_retry" field.
func (m *OutboxMutation) ClearLastRetry() {
	m.last_retry = nil
	m.clearedFields[outbox.FieldLastRetry] = struct{}{}
}

// LastRetryCleared returns if the "last_retry" field was cleared in this mutation.
func (m *OutboxMutation) LastRetryCleared() bool {
	_, ok := m.clearedFields[outbox.FieldLastRetry]
	return ok
}

// ResetLastRetry resets all changes to the "last_retry" field.
func (m *OutboxMutation) ResetLastRetry() {
	m.last_retry = nil
	delete(m.clearedFields, outbox.FieldLastRetry)
}

// SetProcessingErrors sets the "processing_errors" field.
func (m *OutboxMutation) SetProcessingErrors(s []string) {
	m.processing_errors = &s
}

// ProcessingErrors returns the value of the "processing_errors" field in the mutation.
func (m *OutboxMutation) ProcessingErrors() (r []string, exists bool) {
	v := m.processing_errors
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessingErrors returns the old "processing_errors" field's value of the Outbox entity.
// If the Outbox object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutboxMutation) OldProcessingErrors(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessingErrors is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessingErrors requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessingErrors: %w", err)
	}
	return oldValue.ProcessingErrors, nil
}

// ClearProcessingErrors clears the value of the "processing_errors" field.
func (m *OutboxMutation) ClearProcessingErrors() {
	m.processing_errors = nil
	m.clearedFields[outbox.FieldProcessingErrors] = struct{}{}
}

// ProcessingErrorsCleared returns if the "processing_errors" field was cleared in this mutation.
func (m *OutboxMutation) ProcessingErrorsCleared() bool {
	_, ok := m.clearedFields[outbox.FieldProcessingErrors]
	return ok
}

// ResetProcessingErrors resets all changes to the "processing_errors" field.
func (m *OutboxMutation) ResetProcessingErrors() {
	m.processing_errors = nil
	delete(m.clearedFields, outbox.FieldProcessingErrors)
}

// Where appends a list predicates to the OutboxMutation builder.
func (m *OutboxMutation) Where(ps ...predicate.Outbox) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OutboxMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Outbox).
func (m *OutboxMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OutboxMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.timestamp != nil {
		fields = append(fields, outbox.FieldTimestamp)
	}
	if m.topic != nil {
		fields = append(fields, outbox.FieldTopic)
	}
	if m.key != nil {
		fields = append(fields, outbox.FieldKey)
	}
	if m.payload != nil {
		fields = append(fields, outbox.FieldPayload)
	}
	if m.headers != nil {
		fields = append(fields, outbox.FieldHeaders)
	}
	if m.retry_count != nil {
		fields = append(fields, outbox.FieldRetryCount)
	}
	if m.status != nil {
		fields = append(fields, outbox.FieldStatus)
	}
	if m.last_retry != nil {
		fields = append(fields, outbox.FieldLastRetry)
	}
	if m.processing_errors != nil {
		fields = append(fields, outbox.FieldProcessingErrors)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OutboxMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case outbox.FieldTimestamp:
		return m.Timestamp()
	case outbox.FieldTopic:
		return m.Topic()
	case outbox.FieldKey:
		return m.Key()
	case outbox.FieldPayload:
		return m.Payload()
	case outbox.FieldHeaders:
		return m.Headers()
	case outbox.FieldRetryCount:
		return m.RetryCount()
	case outbox.FieldStatus:
		return m.Status()
	case outbox.FieldLastRetry:
		return m.LastRetry()
	case outbox.FieldProcessingErrors:
		return m.ProcessingErrors()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OutboxMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case outbox.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case outbox.FieldTopic:
		return m.OldTopic(ctx)
	case outbox.FieldKey:
		return m.OldKey(ctx)
	case outbox.FieldPayload:
		return m.OldPayload(ctx)
	case outbox.FieldHeaders:
		return m.OldHeaders(ctx)
	case outbox.FieldRetryCount:
		return m.OldRetryCount(ctx)
	case outbox.FieldStatus:
		return m.OldStatus(ctx)
	case outbox.FieldLastRetry:
		return m.OldLastRetry(ctx)
	case outbox.FieldProcessingErrors:
		return m.OldProcessingErrors(ctx)
	}
	return nil, fmt.Errorf("unknown Outbox field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OutboxMutation) SetField(name string, value ent.Value) error {
	switch name {
	case outbox.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case outbox.FieldTopic:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopic(v)
		return nil
	case outbox.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case outbox.FieldPayload:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayload(v)
		return nil
	case outbox.FieldHeaders:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeaders(v)
		return nil
	case outbox.FieldRetryCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetryCount(v)
		return nil
	case outbox.FieldStatus:
		v, ok := value.(outbox.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case outbox.FieldLastRetry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastRetry(v)
		return nil
	case outbox.FieldProcessingErrors:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessingErrors(v)
		return nil
	}
	return fmt.Errorf("unknown Outbox field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OutboxMutation) AddedFields() []string {
	var fields []string
	if m.addretry_count != nil {
		fields = append(fields, outbox.FieldRetryCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OutboxMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case outbox.FieldRetryCount:
		return m.AddedRetryCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OutboxMutation) AddField(name string, value ent.Value) error {
	switch name {
	case outbox.FieldRetryCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRetryCount(v)
		return nil
	}
	return fmt.Errorf("unknown Outbox numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OutboxMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(outbox.FieldLastRetry) {
		fields = append(fields, outbox.FieldLastRetry)
	}
	if m.FieldCleared(outbox.FieldProcessingErrors) {
		fields = append(fields, outbox.FieldProcessingErrors)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OutboxMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OutboxMutation) ClearField(name string) error {
	switch name {
	case outbox.FieldLastRetry:
		m.ClearLastRetry()
		return nil
	case outbox.FieldProcessingErrors:
		m.ClearProcessingErrors()
		return nil
	}
	return fmt.Errorf("unknown Outbox nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OutboxMutation) ResetField(name string) error {
	switch name {
	case outbox.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case outbox.FieldTopic:
		m.ResetTopic()
		return nil
	case outbox.FieldKey:
		m.ResetKey()
		return nil
	case outbox.FieldPayload:
		m.ResetPayload()
		return nil
	case outbox.FieldHeaders:
		m.ResetHeaders()
		return nil
	case outbox.FieldRetryCount:
		m.ResetRetryCount()
		return nil
	case outbox.FieldStatus:
		m.ResetStatus()
		return nil
	case outbox.FieldLastRetry:
		m.ResetLastRetry()
		return nil
	case outbox.FieldProcessingErrors:
		m.ResetProcessingErrors()
		return nil
	}
	return fmt.Errorf("unknown Outbox field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OutboxMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OutboxMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OutboxMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OutboxMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OutboxMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OutboxMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OutboxMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Outbox unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OutboxMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Outbox edge %s", name)
}

// TickerMutation represents an operation that mutates the Ticker nodes in the graph.
type TickerMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	base                         *string
	base_coin_id                 *string
	counter                      *string
	counter_coin_id              *string
	market                       *models.Market
	last                         *float64
	addlast                      *float64
	volume                       *float64
	addvolume                    *float64
	converted_last               *models.ConvertedDetails
	converted_volume             *models.ConvertedDetails
	trust_score                  *string
	bid_ask_spread_percentage    *float64
	addbid_ask_spread_percentage *float64
	timestamp                    *time.Time
	last_traded_at               *time.Time
	last_fetch_at                *time.Time
	is_anomaly                   *bool
	is_stale                     *bool
	trade_url                    *string
	token_info_url               *string
	clearedFields                map[string]struct{}
	exchange                     *int
	clearedexchange              bool
	done                         bool
	oldValue                     func(context.Context) (*Ticker, error)
	predicates                   []predicate.Ticker
}

var _ ent.Mutation = (*TickerMutation)(nil)

// tickerOption allows management of the mutation configuration using functional options.
type tickerOption func(*TickerMutation)

// newTickerMutation creates new mutation for the Ticker entity.
func newTickerMutation(c config, op Op, opts ...tickerOption) *TickerMutation {
	m := &TickerMutation{
		config:        c,
		op:            op,
		typ:           TypeTicker,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTickerID sets the ID field of the mutation.
func withTickerID(id int) tickerOption {
	return func(m *TickerMutation) {
		var (
			err   error
			once  sync.Once
			value *Ticker
		)
		m.oldValue = func(ctx context.Context) (*Ticker, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Ticker.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTicker sets the old Ticker of the mutation.
func withTicker(node *Ticker) tickerOption {
	return func(m *TickerMutation) {
		m.oldValue = func(context.Context) (*Ticker, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TickerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TickerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TickerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TickerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Ticker.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBase sets the "base" field.
func (m *TickerMutation) SetBase(s string) {
	m.base = &s
}

// Base returns the value of the "base" field in the mutation.
func (m *TickerMutation) Base() (r string, exists bool) {
	v := m.base
	if v == nil {
		return
	}
	return *v, true
}

// OldBase returns the old "base" field's value of the Ticker entity.
// If the Ticker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TickerMutation) OldBase(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBase is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBase requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBase: %w", err)
	}
	return oldValue.Base, nil
}

// ResetBase resets all changes to the "base" field.
func (m *TickerMutation) ResetBase() {
	m.base = nil
}

// SetBaseCoinID sets the "base_coin_id" field.
func (m *TickerMutation) SetBaseCoinID(s string) {
	m.base_coin_id = &s
}

// BaseCoinID returns the value of the "base_coin_id" field in the mutation.
func (m *TickerMutation) BaseCoinID() (r string, exists bool) {
	v := m.base_coin_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBaseCoinID returns the old "base_coin_id" field's value of the Ticker entity.
// If the Ticker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TickerMutation) OldBaseCoinID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBaseCoinID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBaseCoinID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBaseCoinID: %w", err)
	}
	return oldValue.BaseCoinID, nil
}

// ClearBaseCoinID clears the value of the "base_coin_id" field.
func (m *TickerMutation) ClearBaseCoinID() {
	m.base_coin_id = nil
	m.clearedFields[ticker.FieldBaseCoinID] = struct{}{}
}

// BaseCoinIDCleared returns if the "base_coin_id" field was cleared in this mutation.
func (m *TickerMutation) BaseCoinIDCleared() bool {
	_, ok := m.clearedFields[ticker.FieldBaseCoinID]
	return ok
}

// ResetBaseCoinID resets all changes to the "base_coin_id" field.
func (m *TickerMutation) ResetBaseCoinID() {
	m.base_coin_id = nil
	delete(m.clearedFields, ticker.FieldBaseCoinID)
}

// SetCounter sets the "counter" field.
func (m *TickerMutation) SetCounter(s string) {
	m.counter = &s
}

// Counter returns the value of the "counter" field in the mutation.
func (m *TickerMutation) Counter() (r string, exists bool) {
	v := m.counter
	if v == nil {
		return
	}
	return *v, true
}

// OldCounter returns the old "counter" field's value of the Ticker entity.
// If the Ticker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TickerMutation) OldCounter(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCounter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCounter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCounter: %w", err)
	}
	return oldValue.Counter, nil
}

// ResetCounter resets all changes to the "counter" field.
func (m *TickerMutation) ResetCounter() {
	m.counter = nil
}

// SetCounterCoinID sets the "counter_coin_id" field.
func (m *TickerMutation) SetCounterCoinID(s string) {
	m.counter_coin_id = &s
}

// CounterCoinID returns the value of the "counter_coin_id" field in the mutation.
func (m *TickerMutation) CounterCoinID() (r string, exists bool) {
	v := m.counter_coin_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCounterCoinID returns the old "counter_coin_id" field's value of the Ticker entity.
// If the Ticker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TickerMutation) OldCounterCoinID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCounterCoinID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCounterCoinID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCounterCoinID: %w", err)
	}
	return oldValue.CounterCoinID, nil
}

// ClearCounterCoinID clears the value of the "counter_coin_id" field.
func (m *TickerMutation) ClearCounterCoinID() {
	m.counter_coin_id = nil
	m.clearedFields[ticker.FieldCounterCoinID] = struct{}{}
}

// CounterCoinIDCleared returns if the "counter_coin_id" field was cleared in this mutation.
func (m *TickerMutation) CounterCoinIDCleared() bool {
	_, ok := m.clearedFields[ticker.FieldCounterCoinID]
	return ok
}

// ResetCounterCoinID resets all changes to the "counter_coin_id" field.
func (m *TickerMutation) ResetCounterCoinID() {
	m.counter_coin_id = nil
	delete(m.clearedFields, ticker.FieldCounterCoinID)
}

// SetMarket sets the "market" field.
func (m *TickerMutation) SetMarket(value models.Market) {
	m.market = &value
}

// Market returns the value of the "market" field in the mutation.
func (m *TickerMutation) Market() (r models.Market, exists bool) {
	v := m.market
	if v == nil {
		return
	}
	return *v, true
}

// OldMarket returns the old "market" field's value of the Ticker entity.
// If the Ticker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TickerMutation) OldMarket(ctx context.Context) (v models.Market, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMarket is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMarket requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarket: %w", err)
	}
	return oldValue.Market, nil
}

// ClearMarket clears the value of the "market" field.
func (m *TickerMutation) ClearMarket() {
	m.market = nil
	m.clearedFields[ticker.FieldMarket] = struct{}{}
}

// MarketCleared returns if the "market" field was cleared in this mutation.
func (m *TickerMutation) MarketCleared() bool {
	_, ok := m.clearedFields[ticker.FieldMarket]
	return ok
}

// ResetMarket resets all changes to the "market" field.
func (m *TickerMutation) ResetMarket() {
	m.market = nil
	delete(m.clearedFields, ticker.FieldMarket)
}

// SetLast sets the "last" field.
func (m *TickerMutation) SetLast(f float64) {
	m.last = &f
	m.addlast = nil
}

// Last returns the value of the "last" field in the mutation.
func (m *TickerMutation) Last() (r float64, exists bool) {
	v := m.last
	if v == nil {
		return
	}
	return *v, true
}

// OldLast returns the old "last" field's value of the Ticker entity.
// If the Ticker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TickerMutation) OldLast(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLast is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLast requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLast: %w", err)
	}
	return oldValue.Last, nil
}

// AddLast adds f to the "last" field.
func (m *TickerMutation) AddLast(f float64) {
	if m.addlast != nil {
		*m.addlast += f
	} else {
		m.addlast = &f
	}
}

// AddedLast returns the value that was added to the "last" field in this mutation.
func (m *TickerMutation) AddedLast() (r float64, exists bool) {
	v := m.addlast
	if v == nil {
		return
	}
	return *v, true
}

// ClearLast clears the value of the "last" field.
func (m *TickerMutation) ClearLast() {
	m.last = nil
	m.addlast = nil
	m.clearedFields[ticker.FieldLast] = struct{}{}
}

// LastCleared returns if the "last" field was cleared in this mutation.
func (m *TickerMutation) LastCleared() bool {
	_, ok := m.clearedFields[ticker.FieldLast]
	return ok
}

// ResetLast resets all changes to the "last" field.
func (m *TickerMutation) ResetLast() {
	m.last = nil
	m.addlast = nil
	delete(m.clearedFields, ticker.FieldLast)
}

// SetVolume sets the "volume" field.
func (m *TickerMutation) SetVolume(f float64) {
	m.volume = &f
	m.addvolume = nil
}

// Volume returns the value of the "volume" field in the mutation.
func (m *TickerMutation) Volume() (r float64, exists bool) {
	v := m.volume
	if v == nil {
		return
	}
	return *v, true
}

// OldVolume returns the old "volume" field's value of the Ticker entity.
// If the Ticker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TickerMutation) OldVolume(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVolume is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVolume requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVolume: %w", err)
	}
	return oldValue.Volume, nil
}

// AddVolume adds f to the "volume" field.
func (m *TickerMutation) AddVolume(f float64) {
	if m.addvolume != nil {
		*m.addvolume += f
	} else {
		m.addvolume = &f
	}
}

// AddedVolume returns the value that was added to the "volume" field in this mutation.
func (m *TickerMutation) AddedVolume() (r float64, exists bool) {
	v := m.addvolume
	if v == nil {
		return
	}
	return *v, true
}

// ClearVolume clears the value of the "volume" field.
func (m *TickerMutation) ClearVolume() {
	m.volume = nil
	m.addvolume = nil
	m.clearedFields[ticker.FieldVolume] = struct{}{}
}

// VolumeCleared returns if the "volume" field was cleared in this mutation.
func (m *TickerMutation) VolumeCleared() bool {
	_, ok := m.clearedFields[ticker.FieldVolume]
	return ok
}

// ResetVolume resets all changes to the "volume" field.
func (m *TickerMutation) ResetVolume() {
	m.volume = nil
	m.addvolume = nil
	delete(m.clearedFields, ticker.FieldVolume)
}

// SetConvertedLast sets the "converted_last" field.
func (m *TickerMutation) SetConvertedLast(md models.ConvertedDetails) {
	m.converted_last = &md
}

// ConvertedLast returns the value of the "converted_last" field in the mutation.
func (m *TickerMutation) ConvertedLast() (r models.ConvertedDetails, exists bool) {
	v := m.converted_last
	if v == nil {
		return
	}
	return *v, true
}

// OldConvertedLast returns the old "converted_last" field's value of the Ticker entity.
// If the Ticker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TickerMutation) OldConvertedLast(ctx context.Context) (v models.ConvertedDetails, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConvertedLast is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConvertedLast requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConvertedLast: %w", err)
	}
	return oldValue.ConvertedLast, nil
}

// ClearConvertedLast clears the value of the "converted_last" field.
func (m *TickerMutation) ClearConvertedLast() {
	m.converted_last = nil
	m.clearedFields[ticker.FieldConvertedLast] = struct{}{}
}

// ConvertedLastCleared returns if the "converted_last" field was cleared in this mutation.
func (m *TickerMutation) ConvertedLastCleared() bool {
	_, ok := m.clearedFields[ticker.FieldConvertedLast]
	return ok
}

// ResetConvertedLast resets all changes to the "converted_last" field.
func (m *TickerMutation) ResetConvertedLast() {
	m.converted_last = nil
	delete(m.clearedFields, ticker.FieldConvertedLast)
}

// SetConvertedVolume sets the "converted_volume" field.
func (m *TickerMutation) SetConvertedVolume(md models.ConvertedDetails) {
	m.converted_volume = &md
}

// ConvertedVolume returns the value of the "converted_volume" field in the mutation.
func (m *TickerMutation) ConvertedVolume() (r models.ConvertedDetails, exists bool) {
	v := m.converted_volume
	if v == nil {
		return
	}
	return *v, true
}

// OldConvertedVolume returns the old "converted_volume" field's value of the Ticker entity.
// If the Ticker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TickerMutation) OldConvertedVolume(ctx context.Context) (v models.ConvertedDetails, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConvertedVolume is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConvertedVolume requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConvertedVolume: %w", err)
	}
	return oldValue.ConvertedVolume, nil
}

// ClearConvertedVolume clears the value of the "converted_volume" field.
func (m *TickerMutation) ClearConvertedVolume() {
	m.converted_volume = nil
	m.clearedFields[ticker.FieldConvertedVolume] = struct{}{}
}

// ConvertedVolumeCleared returns if the "converted_volume" field was cleared in this mutation.
func (m *TickerMutation) ConvertedVolumeCleared() bool {
	_, ok := m.clearedFields[ticker.FieldConvertedVolume]
	return ok
}

// ResetConvertedVolume resets all changes to the "converted_volume" field.
func (m *TickerMutation) ResetConvertedVolume() {
	m.converted_volume = nil
	delete(m.clearedFields, ticker.FieldConvertedVolume)
}

// SetTrustScore sets the "trust_score" field.
func (m *TickerMutation) SetTrustScore(s string) {
	m.trust_score = &s
}

// TrustScore returns the value of the "trust_score" field in the mutation.
func (m *TickerMutation) TrustScore() (r string, exists bool) {
	v := m.trust_score
	if v == nil {
		return
	}
	return *v, true
}

// OldTrustScore returns the old "trust_score" field's value of the Ticker entity.
// If the Ticker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TickerMutation) OldTrustScore(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrustScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrustScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrustScore: %w", err)
	}
	return oldValue.TrustScore, nil
}

// ClearTrustScore clears the value of the "trust_score" field.
func (m *TickerMutation) ClearTrustScore() {
	m.trust_score = nil
	m.clearedFields[ticker.FieldTrustScore] = struct{}{}
}

// TrustScoreCleared returns if the "trust_score" field was cleared in this mutation.
func (m *TickerMutation) TrustScoreCleared() bool {
	_, ok := m.clearedFields[ticker.FieldTrustScore]
	return ok
}

// ResetTrustScore resets all changes to the "trust_score" field.
func (m *TickerMutation) ResetTrustScore() {
	m.trust_score = nil
	delete(m.clearedFields, ticker.FieldTrustScore)
}

// SetBidAskSpreadPercentage sets the "bid_ask_spread_percentage" field.
func (m *TickerMutation) SetBidAskSpreadPercentage(f float64) {
	m.bid_ask_spread_percentage = &f
	m.addbid_ask_spread_percentage = nil
}

// BidAskSpreadPercentage returns the value of the "bid_ask_spread_percentage" field in the mutation.
func (m *TickerMutation) BidAskSpreadPercentage() (r float64, exists bool) {
	v := m.bid_ask_spread_percentage
	if v == nil {
		return
	}
	return *v, true
}

// OldBidAskSpreadPercentage returns the old "bid_ask_spread_percentage" field's value of the Ticker entity.
// If the Ticker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TickerMutation) OldBidAskSpreadPercentage(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBidAskSpreadPercentage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBidAskSpreadPercentage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBidAskSpreadPercentage: %w", err)
	}
	return oldValue.BidAskSpreadPercentage, nil
}

// AddBidAskSpreadPercentage adds f to the "bid_ask_spread_percentage" field.
func (m *TickerMutation) AddBidAskSpreadPercentage(f float64) {
	if m.addbid_ask_spread_percentage != nil {
		*m.addbid_ask_spread_percentage += f
	} else {
		m.addbid_ask_spread_percentage = &f
	}
}

// AddedBidAskSpreadPercentage returns the value that was added to the "bid_ask_spread_percentage" field in this mutation.
func (m *TickerMutation) AddedBidAskSpreadPercentage() (r float64, exists bool) {
	v := m.addbid_ask_spread_percentage
	if v == nil {
		return
	}
	return *v, true
}

// ClearBidAskSpreadPercentage clears the value of the "bid_ask_spread_percentage" field.
func (m *TickerMutation) ClearBidAskSpreadPercentage() {
	m.bid_ask_spread_percentage = nil
	m.addbid_ask_spread_percentage = nil
	m.clearedFields[ticker.FieldBidAskSpreadPercentage] = struct{}{}
}

// BidAskSpreadPercentageCleared returns if the "bid_ask_spread_percentage" field was cleared in this mutation.
func (m *TickerMutation) BidAskSpreadPercentageCleared() bool {
	_, ok := m.clearedFields[ticker.FieldBidAskSpreadPercentage]
	return ok
}

// ResetBidAskSpreadPercentage resets all changes to the "bid_ask_spread_percentage" field.
func (m *TickerMutation) ResetBidAskSpreadPercentage() {
	m.bid_ask_spread_percentage = nil
	m.addbid_ask_spread_percentage = nil
	delete(m.clearedFields, ticker.FieldBidAskSpreadPercentage)
}

// SetTimestamp sets the "timestamp" field.
func (m *TickerMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *TickerMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the Ticker entity.
// If the Ticker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TickerMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ClearTimestamp clears the value of the "timestamp" field.
func (m *TickerMutation) ClearTimestamp() {
	m.timestamp = nil
	m.clearedFields[ticker.FieldTimestamp] = struct{}{}
}

// TimestampCleared returns if the "timestamp" field was cleared in this mutation.
func (m *TickerMutation) TimestampCleared() bool {
	_, ok := m.clearedFields[ticker.FieldTimestamp]
	return ok
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *TickerMutation) ResetTimestamp() {
	m.timestamp = nil
	delete(m.clearedFields, ticker.FieldTimestamp)
}

// SetLastTradedAt sets the "last_traded_at" field.
func (m *TickerMutation) SetLastTradedAt(t time.Time) {
	m.last_traded_at = &t
}

// LastTradedAt returns the value of the "last_traded_at" field in the mutation.
func (m *TickerMutation) LastTradedAt() (r time.Time, exists bool) {
	v := m.last_traded_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastTradedAt returns the old "last_traded_at" field's value of the Ticker entity.
// If the Ticker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TickerMutation) OldLastTradedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastTradedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastTradedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastTradedAt: %w", err)
	}
	return oldValue.LastTradedAt, nil
}

// ClearLastTradedAt clears the value of the "last_traded_at" field.
func (m *TickerMutation) ClearLastTradedAt() {
	m.last_traded_at = nil
	m.clearedFields[ticker.FieldLastTradedAt] = struct{}{}
}

// LastTradedAtCleared returns if the "last_traded_at" field was cleared in this mutation.
func (m *TickerMutation) LastTradedAtCleared() bool {
	_, ok := m.clearedFields[ticker.FieldLastTradedAt]
	return ok
}

// ResetLastTradedAt resets all changes to the "last_traded_at" field.
func (m *TickerMutation) ResetLastTradedAt() {
	m.last_traded_at = nil
	delete(m.clearedFields, ticker.FieldLastTradedAt)
}

// SetLastFetchAt sets the "last_fetch_at" field.
func (m *TickerMutation) SetLastFetchAt(t time.Time) {
	m.last_fetch_at = &t
}

// LastFetchAt returns the value of the "last_fetch_at" field in the mutation.
func (m *TickerMutation) LastFetchAt() (r time.Time, exists bool) {
	v := m.last_fetch_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastFetchAt returns the old "last_fetch_at" field's value of the Ticker entity.
// If the Ticker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TickerMutation) OldLastFetchAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastFetchAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastFetchAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastFetchAt: %w", err)
	}
	return oldValue.LastFetchAt, nil
}

// ClearLastFetchAt clears the value of the "last_fetch_at" field.
func (m *TickerMutation) ClearLastFetchAt() {
	m.last_fetch_at = nil
	m.clearedFields[ticker.FieldLastFetchAt] = struct{}{}
}

// LastFetchAtCleared returns if the "last_fetch_at" field was cleared in this mutation.
func (m *TickerMutation) LastFetchAtCleared() bool {
	_, ok := m.clearedFields[ticker.FieldLastFetchAt]
	return ok
}

// ResetLastFetchAt resets all changes to the "last_fetch_at" field.
func (m *TickerMutation) ResetLastFetchAt() {
	m.last_fetch_at = nil
	delete(m.clearedFields, ticker.FieldLastFetchAt)
}

// SetIsAnomaly sets the "is_anomaly" field.
func (m *TickerMutation) SetIsAnomaly(b bool) {
	m.is_anomaly = &b
}

// IsAnomaly returns the value of the "is_anomaly" field in the mutation.
func (m *TickerMutation) IsAnomaly() (r bool, exists bool) {
	v := m.is_anomaly
	if v == nil {
		return
	}
	return *v, true
}

// OldIsAnomaly returns the old "is_anomaly" field's value of the Ticker entity.
// If the Ticker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TickerMutation) OldIsAnomaly(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsAnomaly is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsAnomaly requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsAnomaly: %w", err)
	}
	return oldValue.IsAnomaly, nil
}

// ClearIsAnomaly clears the value of the "is_anomaly" field.
func (m *TickerMutation) ClearIsAnomaly() {
	m.is_anomaly = nil
	m.clearedFields[ticker.FieldIsAnomaly] = struct{}{}
}

// IsAnomalyCleared returns if the "is_anomaly" field was cleared in this mutation.
func (m *TickerMutation) IsAnomalyCleared() bool {
	_, ok := m.clearedFields[ticker.FieldIsAnomaly]
	return ok
}

// ResetIsAnomaly resets all changes to the "is_anomaly" field.
func (m *TickerMutation) ResetIsAnomaly() {
	m.is_anomaly = nil
	delete(m.clearedFields, ticker.FieldIsAnomaly)
}

// SetIsStale sets the "is_stale" field.
func (m *TickerMutation) SetIsStale(b bool) {
	m.is_stale = &b
}

// IsStale returns the value of the "is_stale" field in the mutation.
func (m *TickerMutation) IsStale() (r bool, exists bool) {
	v := m.is_stale
	if v == nil {
		return
	}
	return *v, true
}

// OldIsStale returns the old "is_stale" field's value of the Ticker entity.
// If the Ticker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TickerMutation) OldIsStale(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsStale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsStale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsStale: %w", err)
	}
	return oldValue.IsStale, nil
}

// ClearIsStale clears the value of the "is_stale" field.
func (m *TickerMutation) ClearIsStale() {
	m.is_stale = nil
	m.clearedFields[ticker.FieldIsStale] = struct{}{}
}

// IsStaleCleared returns if the "is_stale" field was cleared in this mutation.
func (m *TickerMutation) IsStaleCleared() bool {
	_, ok := m.clearedFields[ticker.FieldIsStale]
	return ok
}

// ResetIsStale resets all changes to the "is_stale" field.
func (m *TickerMutation) ResetIsStale() {
	m.is_stale = nil
	delete(m.clearedFields, ticker.FieldIsStale)
}

// SetTradeURL sets the "trade_url" field.
func (m *TickerMutation) SetTradeURL(s string) {
	m.trade_url = &s
}

// TradeURL returns the value of the "trade_url" field in the mutation.
func (m *TickerMutation) TradeURL() (r string, exists bool) {
	v := m.trade_url
	if v == nil {
		return
	}
	return *v, true
}

// OldTradeURL returns the old "trade_url" field's value of the Ticker entity.
// If the Ticker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TickerMutation) OldTradeURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTradeURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTradeURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTradeURL: %w", err)
	}
	return oldValue.TradeURL, nil
}

// ClearTradeURL clears the value of the "trade_url" field.
func (m *TickerMutation) ClearTradeURL() {
	m.trade_url = nil
	m.clearedFields[ticker.FieldTradeURL] = struct{}{}
}

// TradeURLCleared returns if the "trade_url" field was cleared in this mutation.
func (m *TickerMutation) TradeURLCleared() bool {
	_, ok := m.clearedFields[ticker.FieldTradeURL]
	return ok
}

// ResetTradeURL resets all changes to the "trade_url" field.
func (m *TickerMutation) ResetTradeURL() {
	m.trade_url = nil
	delete(m.clearedFields, ticker.FieldTradeURL)
}

// SetTokenInfoURL sets the "token_info_url" field.
func (m *TickerMutation) SetTokenInfoURL(s string) {
	m.token_info_url = &s
}

// TokenInfoURL returns the value of the "token_info_url" field in the mutation.
func (m *TickerMutation) TokenInfoURL() (r string, exists bool) {
	v := m.token_info_url
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenInfoURL returns the old "token_info_url" field's value of the Ticker entity.
// If the Ticker object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TickerMutation) OldTokenInfoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenInfoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenInfoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenInfoURL: %w", err)
	}
	return oldValue.TokenInfoURL, nil
}

// ClearTokenInfoURL clears the value of the "token_info_url" field.
func (m *TickerMutation) ClearTokenInfoURL() {
	m.token_info_url = nil
	m.clearedFields[ticker.FieldTokenInfoURL] = struct{}{}
}

// TokenInfoURLCleared returns if the "token_info_url" field was cleared in this mutation.
func (m *TickerMutation) TokenInfoURLCleared() bool {
	_, ok := m.clearedFields[ticker.FieldTokenInfoURL]
	return ok
}

// ResetTokenInfoURL resets all changes to the "token_info_url" field.
func (m *TickerMutation) ResetTokenInfoURL() {
	m.token_info_url = nil
	delete(m.clearedFields, ticker.FieldTokenInfoURL)
}

// SetExchangeID sets the "exchange" edge to the Exchange entity by id.
func (m *TickerMutation) SetExchangeID(id int) {
	m.exchange = &id
}

// ClearExchange clears the "exchange" edge to the Exchange entity.
func (m *TickerMutation) ClearExchange() {
	m.clearedexchange = true
}

// ExchangeCleared reports if the "exchange" edge to the Exchange entity was cleared.
func (m *TickerMutation) ExchangeCleared() bool {
	return m.clearedexchange
}

// ExchangeID returns the "exchange" edge ID in the mutation.
func (m *TickerMutation) ExchangeID() (id int, exists bool) {
	if m.exchange != nil {
		return *m.exchange, true
	}
	return
}

// ExchangeIDs returns the "exchange" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ExchangeID instead. It exists only for internal usage by the builders.
func (m *TickerMutation) ExchangeIDs() (ids []int) {
	if id := m.exchange; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExchange resets all changes to the "exchange" edge.
func (m *TickerMutation) ResetExchange() {
	m.exchange = nil
	m.clearedexchange = false
}

// Where appends a list predicates to the TickerMutation builder.
func (m *TickerMutation) Where(ps ...predicate.Ticker) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TickerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Ticker).
func (m *TickerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TickerMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.base != nil {
		fields = append(fields, ticker.FieldBase)
	}
	if m.base_coin_id != nil {
		fields = append(fields, ticker.FieldBaseCoinID)
	}
	if m.counter != nil {
		fields = append(fields, ticker.FieldCounter)
	}
	if m.counter_coin_id != nil {
		fields = append(fields, ticker.FieldCounterCoinID)
	}
	if m.market != nil {
		fields = append(fields, ticker.FieldMarket)
	}
	if m.last != nil {
		fields = append(fields, ticker.FieldLast)
	}
	if m.volume != nil {
		fields = append(fields, ticker.FieldVolume)
	}
	if m.converted_last != nil {
		fields = append(fields, ticker.FieldConvertedLast)
	}
	if m.converted_volume != nil {
		fields = append(fields, ticker.FieldConvertedVolume)
	}
	if m.trust_score != nil {
		fields = append(fields, ticker.FieldTrustScore)
	}
	if m.bid_ask_spread_percentage != nil {
		fields = append(fields, ticker.FieldBidAskSpreadPercentage)
	}
	if m.timestamp != nil {
		fields = append(fields, ticker.FieldTimestamp)
	}
	if m.last_traded_at != nil {
		fields = append(fields, ticker.FieldLastTradedAt)
	}
	if m.last_fetch_at != nil {
		fields = append(fields, ticker.FieldLastFetchAt)
	}
	if m.is_anomaly != nil {
		fields = append(fields, ticker.FieldIsAnomaly)
	}
	if m.is_stale != nil {
		fields = append(fields, ticker.FieldIsStale)
	}
	if m.trade_url != nil {
		fields = append(fields, ticker.FieldTradeURL)
	}
	if m.token_info_url != nil {
		fields = append(fields, ticker.FieldTokenInfoURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TickerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ticker.FieldBase:
		return m.Base()
	case ticker.FieldBaseCoinID:
		return m.BaseCoinID()
	case ticker.FieldCounter:
		return m.Counter()
	case ticker.FieldCounterCoinID:
		return m.CounterCoinID()
	case ticker.FieldMarket:
		return m.Market()
	case ticker.FieldLast:
		return m.Last()
	case ticker.FieldVolume:
		return m.Volume()
	case ticker.FieldConvertedLast:
		return m.ConvertedLast()
	case ticker.FieldConvertedVolume:
		return m.ConvertedVolume()
	case ticker.FieldTrustScore:
		return m.TrustScore()
	case ticker.FieldBidAskSpreadPercentage:
		return m.BidAskSpreadPercentage()
	case ticker.FieldTimestamp:
		return m.Timestamp()
	case ticker.FieldLastTradedAt:
		return m.LastTradedAt()
	case ticker.FieldLastFetchAt:
		return m.LastFetchAt()
	case ticker.FieldIsAnomaly:
		return m.IsAnomaly()
	case ticker.FieldIsStale:
		return m.IsStale()
	case ticker.FieldTradeURL:
		return m.TradeURL()
	case ticker.FieldTokenInfoURL:
		return m.TokenInfoURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TickerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ticker.FieldBase:
		return m.OldBase(ctx)
	case ticker.FieldBaseCoinID:
		return m.OldBaseCoinID(ctx)
	case ticker.FieldCounter:
		return m.OldCounter(ctx)
	case ticker.FieldCounterCoinID:
		return m.OldCounterCoinID(ctx)
	case ticker.FieldMarket:
		return m.OldMarket(ctx)
	case ticker.FieldLast:
		return m.OldLast(ctx)
	case ticker.FieldVolume:
		return m.OldVolume(ctx)
	case ticker.FieldConvertedLast:
		return m.OldConvertedLast(ctx)
	case ticker.FieldConvertedVolume:
		return m.OldConvertedVolume(ctx)
	case ticker.FieldTrustScore:
		return m.OldTrustScore(ctx)
	case ticker.FieldBidAskSpreadPercentage:
		return m.OldBidAskSpreadPercentage(ctx)
	case ticker.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case ticker.FieldLastTradedAt:
		return m.OldLastTradedAt(ctx)
	case ticker.FieldLastFetchAt:
		return m.OldLastFetchAt(ctx)
	case ticker.FieldIsAnomaly:
		return m.OldIsAnomaly(ctx)
	case ticker.FieldIsStale:
		return m.OldIsStale(ctx)
	case ticker.FieldTradeURL:
		return m.OldTradeURL(ctx)
	case ticker.FieldTokenInfoURL:
		return m.OldTokenInfoURL(ctx)
	}
	return nil, fmt.Errorf("unknown Ticker field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TickerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ticker.FieldBase:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBase(v)
		return nil
	case ticker.FieldBaseCoinID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBaseCoinID(v)
		return nil
	case ticker.FieldCounter:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCounter(v)
		return nil
	case ticker.FieldCounterCoinID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCounterCoinID(v)
		return nil
	case ticker.FieldMarket:
		v, ok := value.(models.Market)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarket(v)
		return nil
	case ticker.FieldLast:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLast(v)
		return nil
	case ticker.FieldVolume:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVolume(v)
		return nil
	case ticker.FieldConvertedLast:
		v, ok := value.(models.ConvertedDetails)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConvertedLast(v)
		return nil
	case ticker.FieldConvertedVolume:
		v, ok := value.(models.ConvertedDetails)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConvertedVolume(v)
		return nil
	case ticker.FieldTrustScore:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrustScore(v)
		return nil
	case ticker.FieldBidAskSpreadPercentage:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBidAskSpreadPercentage(v)
		return nil
	case ticker.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case ticker.FieldLastTradedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastTradedAt(v)
		return nil
	case ticker.FieldLastFetchAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastFetchAt(v)
		return nil
	case ticker.FieldIsAnomaly:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsAnomaly(v)
		return nil
	case ticker.FieldIsStale:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsStale(v)
		return nil
	case ticker.FieldTradeURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTradeURL(v)
		return nil
	case ticker.FieldTokenInfoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenInfoURL(v)
		return nil
	}
	return fmt.Errorf("unknown Ticker field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TickerMutation) AddedFields() []string {
	var fields []string
	if m.addlast != nil {
		fields = append(fields, ticker.FieldLast)
	}
	if m.addvolume != nil {
		fields = append(fields, ticker.FieldVolume)
	}
	if m.addbid_ask_spread_percentage != nil {
		fields = append(fields, ticker.FieldBidAskSpreadPercentage)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TickerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case ticker.FieldLast:
		return m.AddedLast()
	case ticker.FieldVolume:
		return m.AddedVolume()
	case ticker.FieldBidAskSpreadPercentage:
		return m.AddedBidAskSpreadPercentage()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TickerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case ticker.FieldLast:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLast(v)
		return nil
	case ticker.FieldVolume:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVolume(v)
		return nil
	case ticker.FieldBidAskSpreadPercentage:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBidAskSpreadPercentage(v)
		return nil
	}
	return fmt.Errorf("unknown Ticker numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TickerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(ticker.FieldBaseCoinID) {
		fields = append(fields, ticker.FieldBaseCoinID)
	}
	if m.FieldCleared(ticker.FieldCounterCoinID) {
		fields = append(fields, ticker.FieldCounterCoinID)
	}
	if m.FieldCleared(ticker.FieldMarket) {
		fields = append(fields, ticker.FieldMarket)
	}
	if m.FieldCleared(ticker.FieldLast) {
		fields = append(fields, ticker.FieldLast)
	}
	if m.FieldCleared(ticker.FieldVolume) {
		fields = append(fields, ticker.FieldVolume)
	}
	if m.FieldCleared(ticker.FieldConvertedLast) {
		fields = append(fields, ticker.FieldConvertedLast)
	}
	if m.FieldCleared(ticker.FieldConvertedVolume) {
		fields = append(fields, ticker.FieldConvertedVolume)
	}
	if m.FieldCleared(ticker.FieldTrustScore) {
		fields = append(fields, ticker.FieldTrustScore)
	}
	if m.FieldCleared(ticker.FieldBidAskSpreadPercentage) {
		fields = append(fields, ticker.FieldBidAskSpreadPercentage)
	}
	if m.FieldCleared(ticker.FieldTimestamp) {
		fields = append(fields, ticker.FieldTimestamp)
	}
	if m.FieldCleared(ticker.FieldLastTradedAt) {
		fields = append(fields, ticker.FieldLastTradedAt)
	}
	if m.FieldCleared(ticker.FieldLastFetchAt) {
		fields = append(fields, ticker.FieldLastFetchAt)
	}
	if m.FieldCleared(ticker.FieldIsAnomaly) {
		fields = append(fields, ticker.FieldIsAnomaly)
	}
	if m.FieldCleared(ticker.FieldIsStale) {
		fields = append(fields, ticker.FieldIsStale)
	}
	if m.FieldCleared(ticker.FieldTradeURL) {
		fields = append(fields, ticker.FieldTradeURL)
	}
	if m.FieldCleared(ticker.FieldTokenInfoURL) {
		fields = append(fields, ticker.FieldTokenInfoURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TickerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TickerMutation) ClearField(name string) error {
	switch name {
	case ticker.FieldBaseCoinID:
		m.ClearBaseCoinID()
		return nil
	case ticker.FieldCounterCoinID:
		m.ClearCounterCoinID()
		return nil
	case ticker.FieldMarket:
		m.ClearMarket()
		return nil
	case ticker.FieldLast:
		m.ClearLast()
		return nil
	case ticker.FieldVolume:
		m.ClearVolume()
		return nil
	case ticker.FieldConvertedLast:
		m.ClearConvertedLast()
		return nil
	case ticker.FieldConvertedVolume:
		m.ClearConvertedVolume()
		return nil
	case ticker.FieldTrustScore:
		m.ClearTrustScore()
		return nil
	case ticker.FieldBidAskSpreadPercentage:
		m.ClearBidAskSpreadPercentage()
		return nil
	case ticker.FieldTimestamp:
		m.ClearTimestamp()
		return nil
	case ticker.FieldLastTradedAt:
		m.ClearLastTradedAt()
		return nil
	case ticker.FieldLastFetchAt:
		m.ClearLastFetchAt()
		return nil
	case ticker.FieldIsAnomaly:
		m.ClearIsAnomaly()
		return nil
	case ticker.FieldIsStale:
		m.ClearIsStale()
		return nil
	case ticker.FieldTradeURL:
		m.ClearTradeURL()
		return nil
	case ticker.FieldTokenInfoURL:
		m.ClearTokenInfoURL()
		return nil
	}
	return fmt.Errorf("unknown Ticker nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TickerMutation) ResetField(name string) error {
	switch name {
	case ticker.FieldBase:
		m.ResetBase()
		return nil
	case ticker.FieldBaseCoinID:
		m.ResetBaseCoinID()
		return nil
	case ticker.FieldCounter:
		m.ResetCounter()
		return nil
	case ticker.FieldCounterCoinID:
		m.ResetCounterCoinID()
		return nil
	case ticker.FieldMarket:
		m.ResetMarket()
		return nil
	case ticker.FieldLast:
		m.ResetLast()
		return nil
	case ticker.FieldVolume:
		m.ResetVolume()
		return nil
	case ticker.FieldConvertedLast:
		m.ResetConvertedLast()
		return nil
	case ticker.FieldConvertedVolume:
		m.ResetConvertedVolume()
		return nil
	case ticker.FieldTrustScore:
		m.ResetTrustScore()
		return nil
	case ticker.FieldBidAskSpreadPercentage:
		m.ResetBidAskSpreadPercentage()
		return nil
	case ticker.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case ticker.FieldLastTradedAt:
		m.ResetLastTradedAt()
		return nil
	case ticker.FieldLastFetchAt:
		m.ResetLastFetchAt()
		return nil
	case ticker.FieldIsAnomaly:
		m.ResetIsAnomaly()
		return nil
	case ticker.FieldIsStale:
		m.ResetIsStale()
		return nil
	case ticker.FieldTradeURL:
		m.ResetTradeURL()
		return nil
	case ticker.FieldTokenInfoURL:
		m.ResetTokenInfoURL()
		return nil
	}
	return fmt.Errorf("unknown Ticker field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TickerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.exchange != nil {
		edges = append(edges, ticker.EdgeExchange)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TickerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ticker.EdgeExchange:
		if id := m.exchange; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TickerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TickerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TickerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedexchange {
		edges = append(edges, ticker.EdgeExchange)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TickerMutation) EdgeCleared(name string) bool {
	switch name {
	case ticker.EdgeExchange:
		return m.clearedexchange
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TickerMutation) ClearEdge(name string) error {
	switch name {
	case ticker.EdgeExchange:
		m.ClearExchange()
		return nil
	}
	return fmt.Errorf("unknown Ticker unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TickerMutation) ResetEdge(name string) error {
	switch name {
	case ticker.EdgeExchange:
		m.ResetExchange()
		return nil
	}
	return fmt.Errorf("unknown Ticker edge %s", name)
}

// TradingPairMutation represents an operation that mutates the TradingPair nodes in the graph.
type TradingPairMutation struct {
	config
	op                                Op
	typ                               string
	id                                *int
	symbol                            *string
	base_price_min_precision          *int
	addbase_price_min_precision       *int
	base_price_max_precision          *int
	addbase_price_max_precision       *int
	base_quantity_min_precision       *int
	addbase_quantity_min_precision    *int
	base_quantity_max_precision       *int
	addbase_quantity_max_precision    *int
	counter_price_min_precision       *int
	addcounter_price_min_precision    *int
	counter_price_max_precision       *int
	addcounter_price_max_precision    *int
	counter_quantity_min_precision    *int
	addcounter_quantity_min_precision *int
	counter_quantity_max_precision    *int
	addcounter_quantity_max_precision *int
	clearedFields                     map[string]struct{}
	exchange                          *int
	clearedexchange                   bool
	base                              *int
	clearedbase                       bool
	counter                           *int
	clearedcounter                    bool
	market                            map[int]struct{}
	removedmarket                     map[int]struct{}
	clearedmarket                     bool
	done                              bool
	oldValue                          func(context.Context) (*TradingPair, error)
	predicates                        []predicate.TradingPair
}

var _ ent.Mutation = (*TradingPairMutation)(nil)

// tradingpairOption allows management of the mutation configuration using functional options.
type tradingpairOption func(*TradingPairMutation)

// newTradingPairMutation creates new mutation for the TradingPair entity.
func newTradingPairMutation(c config, op Op, opts ...tradingpairOption) *TradingPairMutation {
	m := &TradingPairMutation{
		config:        c,
		op:            op,
		typ:           TypeTradingPair,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTradingPairID sets the ID field of the mutation.
func withTradingPairID(id int) tradingpairOption {
	return func(m *TradingPairMutation) {
		var (
			err   error
			once  sync.Once
			value *TradingPair
		)
		m.oldValue = func(ctx context.Context) (*TradingPair, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TradingPair.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTradingPair sets the old TradingPair of the mutation.
func withTradingPair(node *TradingPair) tradingpairOption {
	return func(m *TradingPairMutation) {
		m.oldValue = func(context.Context) (*TradingPair, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TradingPairMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TradingPairMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TradingPairMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TradingPairMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TradingPair.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSymbol sets the "symbol" field.
func (m *TradingPairMutation) SetSymbol(s string) {
	m.symbol = &s
}

// Symbol returns the value of the "symbol" field in the mutation.
func (m *TradingPairMutation) Symbol() (r string, exists bool) {
	v := m.symbol
	if v == nil {
		return
	}
	return *v, true
}

// OldSymbol returns the old "symbol" field's value of the TradingPair entity.
// If the TradingPair object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradingPairMutation) OldSymbol(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSymbol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSymbol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSymbol: %w", err)
	}
	return oldValue.Symbol, nil
}

// ResetSymbol resets all changes to the "symbol" field.
func (m *TradingPairMutation) ResetSymbol() {
	m.symbol = nil
}

// SetBasePriceMinPrecision sets the "base_price_min_precision" field.
func (m *TradingPairMutation) SetBasePriceMinPrecision(i int) {
	m.base_price_min_precision = &i
	m.addbase_price_min_precision = nil
}

// BasePriceMinPrecision returns the value of the "base_price_min_precision" field in the mutation.
func (m *TradingPairMutation) BasePriceMinPrecision() (r int, exists bool) {
	v := m.base_price_min_precision
	if v == nil {
		return
	}
	return *v, true
}

// OldBasePriceMinPrecision returns the old "base_price_min_precision" field's value of the TradingPair entity.
// If the TradingPair object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradingPairMutation) OldBasePriceMinPrecision(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBasePriceMinPrecision is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBasePriceMinPrecision requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBasePriceMinPrecision: %w", err)
	}
	return oldValue.BasePriceMinPrecision, nil
}

// AddBasePriceMinPrecision adds i to the "base_price_min_precision" field.
func (m *TradingPairMutation) AddBasePriceMinPrecision(i int) {
	if m.addbase_price_min_precision != nil {
		*m.addbase_price_min_precision += i
	} else {
		m.addbase_price_min_precision = &i
	}
}

// AddedBasePriceMinPrecision returns the value that was added to the "base_price_min_precision" field in this mutation.
func (m *TradingPairMutation) AddedBasePriceMinPrecision() (r int, exists bool) {
	v := m.addbase_price_min_precision
	if v == nil {
		return
	}
	return *v, true
}

// ClearBasePriceMinPrecision clears the value of the "base_price_min_precision" field.
func (m *TradingPairMutation) ClearBasePriceMinPrecision() {
	m.base_price_min_precision = nil
	m.addbase_price_min_precision = nil
	m.clearedFields[tradingpair.FieldBasePriceMinPrecision] = struct{}{}
}

// BasePriceMinPrecisionCleared returns if the "base_price_min_precision" field was cleared in this mutation.
func (m *TradingPairMutation) BasePriceMinPrecisionCleared() bool {
	_, ok := m.clearedFields[tradingpair.FieldBasePriceMinPrecision]
	return ok
}

// ResetBasePriceMinPrecision resets all changes to the "base_price_min_precision" field.
func (m *TradingPairMutation) ResetBasePriceMinPrecision() {
	m.base_price_min_precision = nil
	m.addbase_price_min_precision = nil
	delete(m.clearedFields, tradingpair.FieldBasePriceMinPrecision)
}

// SetBasePriceMaxPrecision sets the "base_price_max_precision" field.
func (m *TradingPairMutation) SetBasePriceMaxPrecision(i int) {
	m.base_price_max_precision = &i
	m.addbase_price_max_precision = nil
}

// BasePriceMaxPrecision returns the value of the "base_price_max_precision" field in the mutation.
func (m *TradingPairMutation) BasePriceMaxPrecision() (r int, exists bool) {
	v := m.base_price_max_precision
	if v == nil {
		return
	}
	return *v, true
}

// OldBasePriceMaxPrecision returns the old "base_price_max_precision" field's value of the TradingPair entity.
// If the TradingPair object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradingPairMutation) OldBasePriceMaxPrecision(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBasePriceMaxPrecision is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBasePriceMaxPrecision requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBasePriceMaxPrecision: %w", err)
	}
	return oldValue.BasePriceMaxPrecision, nil
}

// AddBasePriceMaxPrecision adds i to the "base_price_max_precision" field.
func (m *TradingPairMutation) AddBasePriceMaxPrecision(i int) {
	if m.addbase_price_max_precision != nil {
		*m.addbase_price_max_precision += i
	} else {
		m.addbase_price_max_precision = &i
	}
}

// AddedBasePriceMaxPrecision returns the value that was added to the "base_price_max_precision" field in this mutation.
func (m *TradingPairMutation) AddedBasePriceMaxPrecision() (r int, exists bool) {
	v := m.addbase_price_max_precision
	if v == nil {
		return
	}
	return *v, true
}

// ClearBasePriceMaxPrecision clears the value of the "base_price_max_precision" field.
func (m *TradingPairMutation) ClearBasePriceMaxPrecision() {
	m.base_price_max_precision = nil
	m.addbase_price_max_precision = nil
	m.clearedFields[tradingpair.FieldBasePriceMaxPrecision] = struct{}{}
}

// BasePriceMaxPrecisionCleared returns if the "base_price_max_precision" field was cleared in this mutation.
func (m *TradingPairMutation) BasePriceMaxPrecisionCleared() bool {
	_, ok := m.clearedFields[tradingpair.FieldBasePriceMaxPrecision]
	return ok
}

// ResetBasePriceMaxPrecision resets all changes to the "base_price_max_precision" field.
func (m *TradingPairMutation) ResetBasePriceMaxPrecision() {
	m.base_price_max_precision = nil
	m.addbase_price_max_precision = nil
	delete(m.clearedFields, tradingpair.FieldBasePriceMaxPrecision)
}

// SetBaseQuantityMinPrecision sets the "base_quantity_min_precision" field.
func (m *TradingPairMutation) SetBaseQuantityMinPrecision(i int) {
	m.base_quantity_min_precision = &i
	m.addbase_quantity_min_precision = nil
}

// BaseQuantityMinPrecision returns the value of the "base_quantity_min_precision" field in the mutation.
func (m *TradingPairMutation) BaseQuantityMinPrecision() (r int, exists bool) {
	v := m.base_quantity_min_precision
	if v == nil {
		return
	}
	return *v, true
}

// OldBaseQuantityMinPrecision returns the old "base_quantity_min_precision" field's value of the TradingPair entity.
// If the TradingPair object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradingPairMutation) OldBaseQuantityMinPrecision(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBaseQuantityMinPrecision is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBaseQuantityMinPrecision requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBaseQuantityMinPrecision: %w", err)
	}
	return oldValue.BaseQuantityMinPrecision, nil
}

// AddBaseQuantityMinPrecision adds i to the "base_quantity_min_precision" field.
func (m *TradingPairMutation) AddBaseQuantityMinPrecision(i int) {
	if m.addbase_quantity_min_precision != nil {
		*m.addbase_quantity_min_precision += i
	} else {
		m.addbase_quantity_min_precision = &i
	}
}

// AddedBaseQuantityMinPrecision returns the value that was added to the "base_quantity_min_precision" field in this mutation.
func (m *TradingPairMutation) AddedBaseQuantityMinPrecision() (r int, exists bool) {
	v := m.addbase_quantity_min_precision
	if v == nil {
		return
	}
	return *v, true
}

// ClearBaseQuantityMinPrecision clears the value of the "base_quantity_min_precision" field.
func (m *TradingPairMutation) ClearBaseQuantityMinPrecision() {
	m.base_quantity_min_precision = nil
	m.addbase_quantity_min_precision = nil
	m.clearedFields[tradingpair.FieldBaseQuantityMinPrecision] = struct{}{}
}

// BaseQuantityMinPrecisionCleared returns if the "base_quantity_min_precision" field was cleared in this mutation.
func (m *TradingPairMutation) BaseQuantityMinPrecisionCleared() bool {
	_, ok := m.clearedFields[tradingpair.FieldBaseQuantityMinPrecision]
	return ok
}

// ResetBaseQuantityMinPrecision resets all changes to the "base_quantity_min_precision" field.
func (m *TradingPairMutation) ResetBaseQuantityMinPrecision() {
	m.base_quantity_min_precision = nil
	m.addbase_quantity_min_precision = nil
	delete(m.clearedFields, tradingpair.FieldBaseQuantityMinPrecision)
}

// SetBaseQuantityMaxPrecision sets the "base_quantity_max_precision" field.
func (m *TradingPairMutation) SetBaseQuantityMaxPrecision(i int) {
	m.base_quantity_max_precision = &i
	m.addbase_quantity_max_precision = nil
}

// BaseQuantityMaxPrecision returns the value of the "base_quantity_max_precision" field in the mutation.
func (m *TradingPairMutation) BaseQuantityMaxPrecision() (r int, exists bool) {
	v := m.base_quantity_max_precision
	if v == nil {
		return
	}
	return *v, true
}

// OldBaseQuantityMaxPrecision returns the old "base_quantity_max_precision" field's value of the TradingPair entity.
// If the TradingPair object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradingPairMutation) OldBaseQuantityMaxPrecision(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBaseQuantityMaxPrecision is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBaseQuantityMaxPrecision requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBaseQuantityMaxPrecision: %w", err)
	}
	return oldValue.BaseQuantityMaxPrecision, nil
}

// AddBaseQuantityMaxPrecision adds i to the "base_quantity_max_precision" field.
func (m *TradingPairMutation) AddBaseQuantityMaxPrecision(i int) {
	if m.addbase_quantity_max_precision != nil {
		*m.addbase_quantity_max_precision += i
	} else {
		m.addbase_quantity_max_precision = &i
	}
}

// AddedBaseQuantityMaxPrecision returns the value that was added to the "base_quantity_max_precision" field in this mutation.
func (m *TradingPairMutation) AddedBaseQuantityMaxPrecision() (r int, exists bool) {
	v := m.addbase_quantity_max_precision
	if v == nil {
		return
	}
	return *v, true
}

// ClearBaseQuantityMaxPrecision clears the value of the "base_quantity_max_precision" field.
func (m *TradingPairMutation) ClearBaseQuantityMaxPrecision() {
	m.base_quantity_max_precision = nil
	m.addbase_quantity_max_precision = nil
	m.clearedFields[tradingpair.FieldBaseQuantityMaxPrecision] = struct{}{}
}

// BaseQuantityMaxPrecisionCleared returns if the "base_quantity_max_precision" field was cleared in this mutation.
func (m *TradingPairMutation) BaseQuantityMaxPrecisionCleared() bool {
	_, ok := m.clearedFields[tradingpair.FieldBaseQuantityMaxPrecision]
	return ok
}

// ResetBaseQuantityMaxPrecision resets all changes to the "base_quantity_max_precision" field.
func (m *TradingPairMutation) ResetBaseQuantityMaxPrecision() {
	m.base_quantity_max_precision = nil
	m.addbase_quantity_max_precision = nil
	delete(m.clearedFields, tradingpair.FieldBaseQuantityMaxPrecision)
}

// SetCounterPriceMinPrecision sets the "counter_price_min_precision" field.
func (m *TradingPairMutation) SetCounterPriceMinPrecision(i int) {
	m.counter_price_min_precision = &i
	m.addcounter_price_min_precision = nil
}

// CounterPriceMinPrecision returns the value of the "counter_price_min_precision" field in the mutation.
func (m *TradingPairMutation) CounterPriceMinPrecision() (r int, exists bool) {
	v := m.counter_price_min_precision
	if v == nil {
		return
	}
	return *v, true
}

// OldCounterPriceMinPrecision returns the old "counter_price_min_precision" field's value of the TradingPair entity.
// If the TradingPair object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradingPairMutation) OldCounterPriceMinPrecision(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCounterPriceMinPrecision is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCounterPriceMinPrecision requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCounterPriceMinPrecision: %w", err)
	}
	return oldValue.CounterPriceMinPrecision, nil
}

// AddCounterPriceMinPrecision adds i to the "counter_price_min_precision" field.
func (m *TradingPairMutation) AddCounterPriceMinPrecision(i int) {
	if m.addcounter_price_min_precision != nil {
		*m.addcounter_price_min_precision += i
	} else {
		m.addcounter_price_min_precision = &i
	}
}

// AddedCounterPriceMinPrecision returns the value that was added to the "counter_price_min_precision" field in this mutation.
func (m *TradingPairMutation) AddedCounterPriceMinPrecision() (r int, exists bool) {
	v := m.addcounter_price_min_precision
	if v == nil {
		return
	}
	return *v, true
}

// ClearCounterPriceMinPrecision clears the value of the "counter_price_min_precision" field.
func (m *TradingPairMutation) ClearCounterPriceMinPrecision() {
	m.counter_price_min_precision = nil
	m.addcounter_price_min_precision = nil
	m.clearedFields[tradingpair.FieldCounterPriceMinPrecision] = struct{}{}
}

// CounterPriceMinPrecisionCleared returns if the "counter_price_min_precision" field was cleared in this mutation.
func (m *TradingPairMutation) CounterPriceMinPrecisionCleared() bool {
	_, ok := m.clearedFields[tradingpair.FieldCounterPriceMinPrecision]
	return ok
}

// ResetCounterPriceMinPrecision resets all changes to the "counter_price_min_precision" field.
func (m *TradingPairMutation) ResetCounterPriceMinPrecision() {
	m.counter_price_min_precision = nil
	m.addcounter_price_min_precision = nil
	delete(m.clearedFields, tradingpair.FieldCounterPriceMinPrecision)
}

// SetCounterPriceMaxPrecision sets the "counter_price_max_precision" field.
func (m *TradingPairMutation) SetCounterPriceMaxPrecision(i int) {
	m.counter_price_max_precision = &i
	m.addcounter_price_max_precision = nil
}

// CounterPriceMaxPrecision returns the value of the "counter_price_max_precision" field in the mutation.
func (m *TradingPairMutation) CounterPriceMaxPrecision() (r int, exists bool) {
	v := m.counter_price_max_precision
	if v == nil {
		return
	}
	return *v, true
}

// OldCounterPriceMaxPrecision returns the old "counter_price_max_precision" field's value of the TradingPair entity.
// If the TradingPair object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradingPairMutation) OldCounterPriceMaxPrecision(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCounterPriceMaxPrecision is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCounterPriceMaxPrecision requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCounterPriceMaxPrecision: %w", err)
	}
	return oldValue.CounterPriceMaxPrecision, nil
}

// AddCounterPriceMaxPrecision adds i to the "counter_price_max_precision" field.
func (m *TradingPairMutation) AddCounterPriceMaxPrecision(i int) {
	if m.addcounter_price_max_precision != nil {
		*m.addcounter_price_max_precision += i
	} else {
		m.addcounter_price_max_precision = &i
	}
}

// AddedCounterPriceMaxPrecision returns the value that was added to the "counter_price_max_precision" field in this mutation.
func (m *TradingPairMutation) AddedCounterPriceMaxPrecision() (r int, exists bool) {
	v := m.addcounter_price_max_precision
	if v == nil {
		return
	}
	return *v, true
}

// ClearCounterPriceMaxPrecision clears the value of the "counter_price_max_precision" field.
func (m *TradingPairMutation) ClearCounterPriceMaxPrecision() {
	m.counter_price_max_precision = nil
	m.addcounter_price_max_precision = nil
	m.clearedFields[tradingpair.FieldCounterPriceMaxPrecision] = struct{}{}
}

// CounterPriceMaxPrecisionCleared returns if the "counter_price_max_precision" field was cleared in this mutation.
func (m *TradingPairMutation) CounterPriceMaxPrecisionCleared() bool {
	_, ok := m.clearedFields[tradingpair.FieldCounterPriceMaxPrecision]
	return ok
}

// ResetCounterPriceMaxPrecision resets all changes to the "counter_price_max_precision" field.
func (m *TradingPairMutation) ResetCounterPriceMaxPrecision() {
	m.counter_price_max_precision = nil
	m.addcounter_price_max_precision = nil
	delete(m.clearedFields, tradingpair.FieldCounterPriceMaxPrecision)
}

// SetCounterQuantityMinPrecision sets the "counter_quantity_min_precision" field.
func (m *TradingPairMutation) SetCounterQuantityMinPrecision(i int) {
	m.counter_quantity_min_precision = &i
	m.addcounter_quantity_min_precision = nil
}

// CounterQuantityMinPrecision returns the value of the "counter_quantity_min_precision" field in the mutation.
func (m *TradingPairMutation) CounterQuantityMinPrecision() (r int, exists bool) {
	v := m.counter_quantity_min_precision
	if v == nil {
		return
	}
	return *v, true
}

// OldCounterQuantityMinPrecision returns the old "counter_quantity_min_precision" field's value of the TradingPair entity.
// If the TradingPair object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradingPairMutation) OldCounterQuantityMinPrecision(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCounterQuantityMinPrecision is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCounterQuantityMinPrecision requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCounterQuantityMinPrecision: %w", err)
	}
	return oldValue.CounterQuantityMinPrecision, nil
}

// AddCounterQuantityMinPrecision adds i to the "counter_quantity_min_precision" field.
func (m *TradingPairMutation) AddCounterQuantityMinPrecision(i int) {
	if m.addcounter_quantity_min_precision != nil {
		*m.addcounter_quantity_min_precision += i
	} else {
		m.addcounter_quantity_min_precision = &i
	}
}

// AddedCounterQuantityMinPrecision returns the value that was added to the "counter_quantity_min_precision" field in this mutation.
func (m *TradingPairMutation) AddedCounterQuantityMinPrecision() (r int, exists bool) {
	v := m.addcounter_quantity_min_precision
	if v == nil {
		return
	}
	return *v, true
}

// ClearCounterQuantityMinPrecision clears the value of the "counter_quantity_min_precision" field.
func (m *TradingPairMutation) ClearCounterQuantityMinPrecision() {
	m.counter_quantity_min_precision = nil
	m.addcounter_quantity_min_precision = nil
	m.clearedFields[tradingpair.FieldCounterQuantityMinPrecision] = struct{}{}
}

// CounterQuantityMinPrecisionCleared returns if the "counter_quantity_min_precision" field was cleared in this mutation.
func (m *TradingPairMutation) CounterQuantityMinPrecisionCleared() bool {
	_, ok := m.clearedFields[tradingpair.FieldCounterQuantityMinPrecision]
	return ok
}

// ResetCounterQuantityMinPrecision resets all changes to the "counter_quantity_min_precision" field.
func (m *TradingPairMutation) ResetCounterQuantityMinPrecision() {
	m.counter_quantity_min_precision = nil
	m.addcounter_quantity_min_precision = nil
	delete(m.clearedFields, tradingpair.FieldCounterQuantityMinPrecision)
}

// SetCounterQuantityMaxPrecision sets the "counter_quantity_max_precision" field.
func (m *TradingPairMutation) SetCounterQuantityMaxPrecision(i int) {
	m.counter_quantity_max_precision = &i
	m.addcounter_quantity_max_precision = nil
}

// CounterQuantityMaxPrecision returns the value of the "counter_quantity_max_precision" field in the mutation.
func (m *TradingPairMutation) CounterQuantityMaxPrecision() (r int, exists bool) {
	v := m.counter_quantity_max_precision
	if v == nil {
		return
	}
	return *v, true
}

// OldCounterQuantityMaxPrecision returns the old "counter_quantity_max_precision" field's value of the TradingPair entity.
// If the TradingPair object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TradingPairMutation) OldCounterQuantityMaxPrecision(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCounterQuantityMaxPrecision is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCounterQuantityMaxPrecision requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCounterQuantityMaxPrecision: %w", err)
	}
	return oldValue.CounterQuantityMaxPrecision, nil
}

// AddCounterQuantityMaxPrecision adds i to the "counter_quantity_max_precision" field.
func (m *TradingPairMutation) AddCounterQuantityMaxPrecision(i int) {
	if m.addcounter_quantity_max_precision != nil {
		*m.addcounter_quantity_max_precision += i
	} else {
		m.addcounter_quantity_max_precision = &i
	}
}

// AddedCounterQuantityMaxPrecision returns the value that was added to the "counter_quantity_max_precision" field in this mutation.
func (m *TradingPairMutation) AddedCounterQuantityMaxPrecision() (r int, exists bool) {
	v := m.addcounter_quantity_max_precision
	if v == nil {
		return
	}
	return *v, true
}

// ClearCounterQuantityMaxPrecision clears the value of the "counter_quantity_max_precision" field.
func (m *TradingPairMutation) ClearCounterQuantityMaxPrecision() {
	m.counter_quantity_max_precision = nil
	m.addcounter_quantity_max_precision = nil
	m.clearedFields[tradingpair.FieldCounterQuantityMaxPrecision] = struct{}{}
}

// CounterQuantityMaxPrecisionCleared returns if the "counter_quantity_max_precision" field was cleared in this mutation.
func (m *TradingPairMutation) CounterQuantityMaxPrecisionCleared() bool {
	_, ok := m.clearedFields[tradingpair.FieldCounterQuantityMaxPrecision]
	return ok
}

// ResetCounterQuantityMaxPrecision resets all changes to the "counter_quantity_max_precision" field.
func (m *TradingPairMutation) ResetCounterQuantityMaxPrecision() {
	m.counter_quantity_max_precision = nil
	m.addcounter_quantity_max_precision = nil
	delete(m.clearedFields, tradingpair.FieldCounterQuantityMaxPrecision)
}

// SetExchangeID sets the "exchange" edge to the Exchange entity by id.
func (m *TradingPairMutation) SetExchangeID(id int) {
	m.exchange = &id
}

// ClearExchange clears the "exchange" edge to the Exchange entity.
func (m *TradingPairMutation) ClearExchange() {
	m.clearedexchange = true
}

// ExchangeCleared reports if the "exchange" edge to the Exchange entity was cleared.
func (m *TradingPairMutation) ExchangeCleared() bool {
	return m.clearedexchange
}

// ExchangeID returns the "exchange" edge ID in the mutation.
func (m *TradingPairMutation) ExchangeID() (id int, exists bool) {
	if m.exchange != nil {
		return *m.exchange, true
	}
	return
}

// ExchangeIDs returns the "exchange" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ExchangeID instead. It exists only for internal usage by the builders.
func (m *TradingPairMutation) ExchangeIDs() (ids []int) {
	if id := m.exchange; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExchange resets all changes to the "exchange" edge.
func (m *TradingPairMutation) ResetExchange() {
	m.exchange = nil
	m.clearedexchange = false
}

// SetBaseID sets the "base" edge to the Coin entity by id.
func (m *TradingPairMutation) SetBaseID(id int) {
	m.base = &id
}

// ClearBase clears the "base" edge to the Coin entity.
func (m *TradingPairMutation) ClearBase() {
	m.clearedbase = true
}

// BaseCleared reports if the "base" edge to the Coin entity was cleared.
func (m *TradingPairMutation) BaseCleared() bool {
	return m.clearedbase
}

// BaseID returns the "base" edge ID in the mutation.
func (m *TradingPairMutation) BaseID() (id int, exists bool) {
	if m.base != nil {
		return *m.base, true
	}
	return
}

// BaseIDs returns the "base" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BaseID instead. It exists only for internal usage by the builders.
func (m *TradingPairMutation) BaseIDs() (ids []int) {
	if id := m.base; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBase resets all changes to the "base" edge.
func (m *TradingPairMutation) ResetBase() {
	m.base = nil
	m.clearedbase = false
}

// SetCounterID sets the "counter" edge to the Coin entity by id.
func (m *TradingPairMutation) SetCounterID(id int) {
	m.counter = &id
}

// ClearCounter clears the "counter" edge to the Coin entity.
func (m *TradingPairMutation) ClearCounter() {
	m.clearedcounter = true
}

// CounterCleared reports if the "counter" edge to the Coin entity was cleared.
func (m *TradingPairMutation) CounterCleared() bool {
	return m.clearedcounter
}

// CounterID returns the "counter" edge ID in the mutation.
func (m *TradingPairMutation) CounterID() (id int, exists bool) {
	if m.counter != nil {
		return *m.counter, true
	}
	return
}

// CounterIDs returns the "counter" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CounterID instead. It exists only for internal usage by the builders.
func (m *TradingPairMutation) CounterIDs() (ids []int) {
	if id := m.counter; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCounter resets all changes to the "counter" edge.
func (m *TradingPairMutation) ResetCounter() {
	m.counter = nil
	m.clearedcounter = false
}

// AddMarketIDs adds the "market" edge to the Market entity by ids.
func (m *TradingPairMutation) AddMarketIDs(ids ...int) {
	if m.market == nil {
		m.market = make(map[int]struct{})
	}
	for i := range ids {
		m.market[ids[i]] = struct{}{}
	}
}

// ClearMarket clears the "market" edge to the Market entity.
func (m *TradingPairMutation) ClearMarket() {
	m.clearedmarket = true
}

// MarketCleared reports if the "market" edge to the Market entity was cleared.
func (m *TradingPairMutation) MarketCleared() bool {
	return m.clearedmarket
}

// RemoveMarketIDs removes the "market" edge to the Market entity by IDs.
func (m *TradingPairMutation) RemoveMarketIDs(ids ...int) {
	if m.removedmarket == nil {
		m.removedmarket = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.market, ids[i])
		m.removedmarket[ids[i]] = struct{}{}
	}
}

// RemovedMarket returns the removed IDs of the "market" edge to the Market entity.
func (m *TradingPairMutation) RemovedMarketIDs() (ids []int) {
	for id := range m.removedmarket {
		ids = append(ids, id)
	}
	return
}

// MarketIDs returns the "market" edge IDs in the mutation.
func (m *TradingPairMutation) MarketIDs() (ids []int) {
	for id := range m.market {
		ids = append(ids, id)
	}
	return
}

// ResetMarket resets all changes to the "market" edge.
func (m *TradingPairMutation) ResetMarket() {
	m.market = nil
	m.clearedmarket = false
	m.removedmarket = nil
}

// Where appends a list predicates to the TradingPairMutation builder.
func (m *TradingPairMutation) Where(ps ...predicate.TradingPair) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TradingPairMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TradingPair).
func (m *TradingPairMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TradingPairMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.symbol != nil {
		fields = append(fields, tradingpair.FieldSymbol)
	}
	if m.base_price_min_precision != nil {
		fields = append(fields, tradingpair.FieldBasePriceMinPrecision)
	}
	if m.base_price_max_precision != nil {
		fields = append(fields, tradingpair.FieldBasePriceMaxPrecision)
	}
	if m.base_quantity_min_precision != nil {
		fields = append(fields, tradingpair.FieldBaseQuantityMinPrecision)
	}
	if m.base_quantity_max_precision != nil {
		fields = append(fields, tradingpair.FieldBaseQuantityMaxPrecision)
	}
	if m.counter_price_min_precision != nil {
		fields = append(fields, tradingpair.FieldCounterPriceMinPrecision)
	}
	if m.counter_price_max_precision != nil {
		fields = append(fields, tradingpair.FieldCounterPriceMaxPrecision)
	}
	if m.counter_quantity_min_precision != nil {
		fields = append(fields, tradingpair.FieldCounterQuantityMinPrecision)
	}
	if m.counter_quantity_max_precision != nil {
		fields = append(fields, tradingpair.FieldCounterQuantityMaxPrecision)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TradingPairMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tradingpair.FieldSymbol:
		return m.Symbol()
	case tradingpair.FieldBasePriceMinPrecision:
		return m.BasePriceMinPrecision()
	case tradingpair.FieldBasePriceMaxPrecision:
		return m.BasePriceMaxPrecision()
	case tradingpair.FieldBaseQuantityMinPrecision:
		return m.BaseQuantityMinPrecision()
	case tradingpair.FieldBaseQuantityMaxPrecision:
		return m.BaseQuantityMaxPrecision()
	case tradingpair.FieldCounterPriceMinPrecision:
		return m.CounterPriceMinPrecision()
	case tradingpair.FieldCounterPriceMaxPrecision:
		return m.CounterPriceMaxPrecision()
	case tradingpair.FieldCounterQuantityMinPrecision:
		return m.CounterQuantityMinPrecision()
	case tradingpair.FieldCounterQuantityMaxPrecision:
		return m.CounterQuantityMaxPrecision()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TradingPairMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tradingpair.FieldSymbol:
		return m.OldSymbol(ctx)
	case tradingpair.FieldBasePriceMinPrecision:
		return m.OldBasePriceMinPrecision(ctx)
	case tradingpair.FieldBasePriceMaxPrecision:
		return m.OldBasePriceMaxPrecision(ctx)
	case tradingpair.FieldBaseQuantityMinPrecision:
		return m.OldBaseQuantityMinPrecision(ctx)
	case tradingpair.FieldBaseQuantityMaxPrecision:
		return m.OldBaseQuantityMaxPrecision(ctx)
	case tradingpair.FieldCounterPriceMinPrecision:
		return m.OldCounterPriceMinPrecision(ctx)
	case tradingpair.FieldCounterPriceMaxPrecision:
		return m.OldCounterPriceMaxPrecision(ctx)
	case tradingpair.FieldCounterQuantityMinPrecision:
		return m.OldCounterQuantityMinPrecision(ctx)
	case tradingpair.FieldCounterQuantityMaxPrecision:
		return m.OldCounterQuantityMaxPrecision(ctx)
	}
	return nil, fmt.Errorf("unknown TradingPair field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TradingPairMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tradingpair.FieldSymbol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSymbol(v)
		return nil
	case tradingpair.FieldBasePriceMinPrecision:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBasePriceMinPrecision(v)
		return nil
	case tradingpair.FieldBasePriceMaxPrecision:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBasePriceMaxPrecision(v)
		return nil
	case tradingpair.FieldBaseQuantityMinPrecision:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBaseQuantityMinPrecision(v)
		return nil
	case tradingpair.FieldBaseQuantityMaxPrecision:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBaseQuantityMaxPrecision(v)
		return nil
	case tradingpair.FieldCounterPriceMinPrecision:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCounterPriceMinPrecision(v)
		return nil
	case tradingpair.FieldCounterPriceMaxPrecision:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCounterPriceMaxPrecision(v)
		return nil
	case tradingpair.FieldCounterQuantityMinPrecision:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCounterQuantityMinPrecision(v)
		return nil
	case tradingpair.FieldCounterQuantityMaxPrecision:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCounterQuantityMaxPrecision(v)
		return nil
	}
	return fmt.Errorf("unknown TradingPair field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TradingPairMutation) AddedFields() []string {
	var fields []string
	if m.addbase_price_min_precision != nil {
		fields = append(fields, tradingpair.FieldBasePriceMinPrecision)
	}
	if m.addbase_price_max_precision != nil {
		fields = append(fields, tradingpair.FieldBasePriceMaxPrecision)
	}
	if m.addbase_quantity_min_precision != nil {
		fields = append(fields, tradingpair.FieldBaseQuantityMinPrecision)
	}
	if m.addbase_quantity_max_precision != nil {
		fields = append(fields, tradingpair.FieldBaseQuantityMaxPrecision)
	}
	if m.addcounter_price_min_precision != nil {
		fields = append(fields, tradingpair.FieldCounterPriceMinPrecision)
	}
	if m.addcounter_price_max_precision != nil {
		fields = append(fields, tradingpair.FieldCounterPriceMaxPrecision)
	}
	if m.addcounter_quantity_min_precision != nil {
		fields = append(fields, tradingpair.FieldCounterQuantityMinPrecision)
	}
	if m.addcounter_quantity_max_precision != nil {
		fields = append(fields, tradingpair.FieldCounterQuantityMaxPrecision)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TradingPairMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tradingpair.FieldBasePriceMinPrecision:
		return m.AddedBasePriceMinPrecision()
	case tradingpair.FieldBasePriceMaxPrecision:
		return m.AddedBasePriceMaxPrecision()
	case tradingpair.FieldBaseQuantityMinPrecision:
		return m.AddedBaseQuantityMinPrecision()
	case tradingpair.FieldBaseQuantityMaxPrecision:
		return m.AddedBaseQuantityMaxPrecision()
	case tradingpair.FieldCounterPriceMinPrecision:
		return m.AddedCounterPriceMinPrecision()
	case tradingpair.FieldCounterPriceMaxPrecision:
		return m.AddedCounterPriceMaxPrecision()
	case tradingpair.FieldCounterQuantityMinPrecision:
		return m.AddedCounterQuantityMinPrecision()
	case tradingpair.FieldCounterQuantityMaxPrecision:
		return m.AddedCounterQuantityMaxPrecision()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TradingPairMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tradingpair.FieldBasePriceMinPrecision:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBasePriceMinPrecision(v)
		return nil
	case tradingpair.FieldBasePriceMaxPrecision:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBasePriceMaxPrecision(v)
		return nil
	case tradingpair.FieldBaseQuantityMinPrecision:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBaseQuantityMinPrecision(v)
		return nil
	case tradingpair.FieldBaseQuantityMaxPrecision:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBaseQuantityMaxPrecision(v)
		return nil
	case tradingpair.FieldCounterPriceMinPrecision:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCounterPriceMinPrecision(v)
		return nil
	case tradingpair.FieldCounterPriceMaxPrecision:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCounterPriceMaxPrecision(v)
		return nil
	case tradingpair.FieldCounterQuantityMinPrecision:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCounterQuantityMinPrecision(v)
		return nil
	case tradingpair.FieldCounterQuantityMaxPrecision:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCounterQuantityMaxPrecision(v)
		return nil
	}
	return fmt.Errorf("unknown TradingPair numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TradingPairMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tradingpair.FieldBasePriceMinPrecision) {
		fields = append(fields, tradingpair.FieldBasePriceMinPrecision)
	}
	if m.FieldCleared(tradingpair.FieldBasePriceMaxPrecision) {
		fields = append(fields, tradingpair.FieldBasePriceMaxPrecision)
	}
	if m.FieldCleared(tradingpair.FieldBaseQuantityMinPrecision) {
		fields = append(fields, tradingpair.FieldBaseQuantityMinPrecision)
	}
	if m.FieldCleared(tradingpair.FieldBaseQuantityMaxPrecision) {
		fields = append(fields, tradingpair.FieldBaseQuantityMaxPrecision)
	}
	if m.FieldCleared(tradingpair.FieldCounterPriceMinPrecision) {
		fields = append(fields, tradingpair.FieldCounterPriceMinPrecision)
	}
	if m.FieldCleared(tradingpair.FieldCounterPriceMaxPrecision) {
		fields = append(fields, tradingpair.FieldCounterPriceMaxPrecision)
	}
	if m.FieldCleared(tradingpair.FieldCounterQuantityMinPrecision) {
		fields = append(fields, tradingpair.FieldCounterQuantityMinPrecision)
	}
	if m.FieldCleared(tradingpair.FieldCounterQuantityMaxPrecision) {
		fields = append(fields, tradingpair.FieldCounterQuantityMaxPrecision)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TradingPairMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TradingPairMutation) ClearField(name string) error {
	switch name {
	case tradingpair.FieldBasePriceMinPrecision:
		m.ClearBasePriceMinPrecision()
		return nil
	case tradingpair.FieldBasePriceMaxPrecision:
		m.ClearBasePriceMaxPrecision()
		return nil
	case tradingpair.FieldBaseQuantityMinPrecision:
		m.ClearBaseQuantityMinPrecision()
		return nil
	case tradingpair.FieldBaseQuantityMaxPrecision:
		m.ClearBaseQuantityMaxPrecision()
		return nil
	case tradingpair.FieldCounterPriceMinPrecision:
		m.ClearCounterPriceMinPrecision()
		return nil
	case tradingpair.FieldCounterPriceMaxPrecision:
		m.ClearCounterPriceMaxPrecision()
		return nil
	case tradingpair.FieldCounterQuantityMinPrecision:
		m.ClearCounterQuantityMinPrecision()
		return nil
	case tradingpair.FieldCounterQuantityMaxPrecision:
		m.ClearCounterQuantityMaxPrecision()
		return nil
	}
	return fmt.Errorf("unknown TradingPair nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TradingPairMutation) ResetField(name string) error {
	switch name {
	case tradingpair.FieldSymbol:
		m.ResetSymbol()
		return nil
	case tradingpair.FieldBasePriceMinPrecision:
		m.ResetBasePriceMinPrecision()
		return nil
	case tradingpair.FieldBasePriceMaxPrecision:
		m.ResetBasePriceMaxPrecision()
		return nil
	case tradingpair.FieldBaseQuantityMinPrecision:
		m.ResetBaseQuantityMinPrecision()
		return nil
	case tradingpair.FieldBaseQuantityMaxPrecision:
		m.ResetBaseQuantityMaxPrecision()
		return nil
	case tradingpair.FieldCounterPriceMinPrecision:
		m.ResetCounterPriceMinPrecision()
		return nil
	case tradingpair.FieldCounterPriceMaxPrecision:
		m.ResetCounterPriceMaxPrecision()
		return nil
	case tradingpair.FieldCounterQuantityMinPrecision:
		m.ResetCounterQuantityMinPrecision()
		return nil
	case tradingpair.FieldCounterQuantityMaxPrecision:
		m.ResetCounterQuantityMaxPrecision()
		return nil
	}
	return fmt.Errorf("unknown TradingPair field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TradingPairMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.exchange != nil {
		edges = append(edges, tradingpair.EdgeExchange)
	}
	if m.base != nil {
		edges = append(edges, tradingpair.EdgeBase)
	}
	if m.counter != nil {
		edges = append(edges, tradingpair.EdgeCounter)
	}
	if m.market != nil {
		edges = append(edges, tradingpair.EdgeMarket)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TradingPairMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tradingpair.EdgeExchange:
		if id := m.exchange; id != nil {
			return []ent.Value{*id}
		}
	case tradingpair.EdgeBase:
		if id := m.base; id != nil {
			return []ent.Value{*id}
		}
	case tradingpair.EdgeCounter:
		if id := m.counter; id != nil {
			return []ent.Value{*id}
		}
	case tradingpair.EdgeMarket:
		ids := make([]ent.Value, 0, len(m.market))
		for id := range m.market {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TradingPairMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedmarket != nil {
		edges = append(edges, tradingpair.EdgeMarket)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TradingPairMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tradingpair.EdgeMarket:
		ids := make([]ent.Value, 0, len(m.removedmarket))
		for id := range m.removedmarket {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TradingPairMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedexchange {
		edges = append(edges, tradingpair.EdgeExchange)
	}
	if m.clearedbase {
		edges = append(edges, tradingpair.EdgeBase)
	}
	if m.clearedcounter {
		edges = append(edges, tradingpair.EdgeCounter)
	}
	if m.clearedmarket {
		edges = append(edges, tradingpair.EdgeMarket)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TradingPairMutation) EdgeCleared(name string) bool {
	switch name {
	case tradingpair.EdgeExchange:
		return m.clearedexchange
	case tradingpair.EdgeBase:
		return m.clearedbase
	case tradingpair.EdgeCounter:
		return m.clearedcounter
	case tradingpair.EdgeMarket:
		return m.clearedmarket
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TradingPairMutation) ClearEdge(name string) error {
	switch name {
	case tradingpair.EdgeExchange:
		m.ClearExchange()
		return nil
	case tradingpair.EdgeBase:
		m.ClearBase()
		return nil
	case tradingpair.EdgeCounter:
		m.ClearCounter()
		return nil
	}
	return fmt.Errorf("unknown TradingPair unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TradingPairMutation) ResetEdge(name string) error {
	switch name {
	case tradingpair.EdgeExchange:
		m.ResetExchange()
		return nil
	case tradingpair.EdgeBase:
		m.ResetBase()
		return nil
	case tradingpair.EdgeCounter:
		m.ResetCounter()
		return nil
	case tradingpair.EdgeMarket:
		m.ResetMarket()
		return nil
	}
	return fmt.Errorf("unknown TradingPair edge %s", name)
}
