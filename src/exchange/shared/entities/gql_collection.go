// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CoinQuery) CollectFields(ctx context.Context, satisfies ...string) (*CoinQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return c, nil
	}
	if err := c.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return c, nil
}

func (c *CoinQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "coinBase", "coin_base":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &TradingPairQuery{config: c.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			c.WithNamedCoinBase(alias, func(wq *TradingPairQuery) {
				*wq = *query
			})
		case "coinCounter", "coin_counter":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &TradingPairQuery{config: c.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			c.WithNamedCoinCounter(alias, func(wq *TradingPairQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type coinPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CoinPaginateOption
}

func newCoinPaginateArgs(rv map[string]interface{}) *coinPaginateArgs {
	args := &coinPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &CoinOrder{Field: &CoinOrderField{}}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithCoinOrder(order))
			}
		case *CoinOrder:
			if v != nil {
				args.opts = append(args.opts, WithCoinOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*CoinWhereInput); ok {
		args.opts = append(args.opts, WithCoinFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (e *ExchangeQuery) CollectFields(ctx context.Context, satisfies ...string) (*ExchangeQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return e, nil
	}
	if err := e.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return e, nil
}

func (e *ExchangeQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "ticker":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &TickerQuery{config: e.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			e.WithNamedTicker(alias, func(wq *TickerQuery) {
				*wq = *query
			})
		case "tradingPair", "trading_pair":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &TradingPairQuery{config: e.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			e.WithNamedTradingPair(alias, func(wq *TradingPairQuery) {
				*wq = *query
			})
		case "market":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &MarketQuery{config: e.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			e.WithNamedMarket(alias, func(wq *MarketQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type exchangePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ExchangePaginateOption
}

func newExchangePaginateArgs(rv map[string]interface{}) *exchangePaginateArgs {
	args := &exchangePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &ExchangeOrder{Field: &ExchangeOrderField{}}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithExchangeOrder(order))
			}
		case *ExchangeOrder:
			if v != nil {
				args.opts = append(args.opts, WithExchangeOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ExchangeWhereInput); ok {
		args.opts = append(args.opts, WithExchangeFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (m *MarketQuery) CollectFields(ctx context.Context, satisfies ...string) (*MarketQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return m, nil
	}
	if err := m.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return m, nil
}

func (m *MarketQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "exchange":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ExchangeQuery{config: m.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			m.withExchange = query
		case "tradingPair", "trading_pair":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &TradingPairQuery{config: m.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			m.WithNamedTradingPair(alias, func(wq *TradingPairQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type marketPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []MarketPaginateOption
}

func newMarketPaginateArgs(rv map[string]interface{}) *marketPaginateArgs {
	args := &marketPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &MarketOrder{Field: &MarketOrderField{}}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithMarketOrder(order))
			}
		case *MarketOrder:
			if v != nil {
				args.opts = append(args.opts, WithMarketOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*MarketWhereInput); ok {
		args.opts = append(args.opts, WithMarketFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (o *OutboxQuery) CollectFields(ctx context.Context, satisfies ...string) (*OutboxQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return o, nil
	}
	if err := o.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return o, nil
}

func (o *OutboxQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	return nil
}

type outboxPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []OutboxPaginateOption
}

func newOutboxPaginateArgs(rv map[string]interface{}) *outboxPaginateArgs {
	args := &outboxPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*OutboxWhereInput); ok {
		args.opts = append(args.opts, WithOutboxFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TickerQuery) CollectFields(ctx context.Context, satisfies ...string) (*TickerQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return t, nil
	}
	if err := t.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return t, nil
}

func (t *TickerQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "exchange":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ExchangeQuery{config: t.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			t.withExchange = query
		}
	}
	return nil
}

type tickerPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TickerPaginateOption
}

func newTickerPaginateArgs(rv map[string]interface{}) *tickerPaginateArgs {
	args := &tickerPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &TickerOrder{Field: &TickerOrderField{}}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithTickerOrder(order))
			}
		case *TickerOrder:
			if v != nil {
				args.opts = append(args.opts, WithTickerOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*TickerWhereInput); ok {
		args.opts = append(args.opts, WithTickerFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tp *TradingPairQuery) CollectFields(ctx context.Context, satisfies ...string) (*TradingPairQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return tp, nil
	}
	if err := tp.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return tp, nil
}

func (tp *TradingPairQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "exchange":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ExchangeQuery{config: tp.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			tp.withExchange = query
		case "base":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &CoinQuery{config: tp.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			tp.withBase = query
		case "counter":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &CoinQuery{config: tp.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			tp.withCounter = query
		case "market":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &MarketQuery{config: tp.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			tp.WithNamedMarket(alias, func(wq *MarketQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type tradingpairPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TradingPairPaginateOption
}

func newTradingPairPaginateArgs(rv map[string]interface{}) *tradingpairPaginateArgs {
	args := &tradingpairPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &TradingPairOrder{Field: &TradingPairOrderField{}}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithTradingPairOrder(order))
			}
		case *TradingPairOrder:
			if v != nil {
				args.opts = append(args.opts, WithTradingPairOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*TradingPairWhereInput); ok {
		args.opts = append(args.opts, WithTradingPairFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput interface{}, path ...string) map[string]interface{} {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	for _, name := range path {
		var field *graphql.CollectedField
		for _, f := range graphql.CollectFields(oc, fc.Field.Selections, nil) {
			if f.Alias == name {
				field = &f
				break
			}
		}
		if field == nil {
			return nil
		}
		cf, err := fc.Child(ctx, *field)
		if err != nil {
			args := field.ArgumentMap(oc.Variables)
			return unmarshalArgs(ctx, whereInput, args)
		}
		fc = cf
	}
	return fc.Args
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput interface{}, args map[string]interface{}) map[string]interface{} {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}
