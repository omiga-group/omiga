// Code generated by ent, DO NOT EDIT.

package repositories

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omiga-group/omiga/src/order/shared/models"
	"github.com/omiga-group/omiga/src/order/shared/repositories/internal"
	"github.com/omiga-group/omiga/src/order/shared/repositories/orderbook"
	"github.com/omiga-group/omiga/src/order/shared/repositories/predicate"
)

// OrderBookUpdate is the builder for updating OrderBook entities.
type OrderBookUpdate struct {
	config
	hooks     []Hook
	mutation  *OrderBookMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrderBookUpdate builder.
func (obu *OrderBookUpdate) Where(ps ...predicate.OrderBook) *OrderBookUpdate {
	obu.mutation.Where(ps...)
	return obu
}

// SetExchangeID sets the "exchange_id" field.
func (obu *OrderBookUpdate) SetExchangeID(s string) *OrderBookUpdate {
	obu.mutation.SetExchangeID(s)
	return obu
}

// SetLastUpdated sets the "last_updated" field.
func (obu *OrderBookUpdate) SetLastUpdated(t time.Time) *OrderBookUpdate {
	obu.mutation.SetLastUpdated(t)
	return obu
}

// SetOrderBook sets the "order_book" field.
func (obu *OrderBookUpdate) SetOrderBook(mb models.OrderBook) *OrderBookUpdate {
	obu.mutation.SetOrderBook(mb)
	return obu
}

// Mutation returns the OrderBookMutation object of the builder.
func (obu *OrderBookUpdate) Mutation() *OrderBookMutation {
	return obu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (obu *OrderBookUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(obu.hooks) == 0 {
		affected, err = obu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderBookMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			obu.mutation = mutation
			affected, err = obu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(obu.hooks) - 1; i >= 0; i-- {
			if obu.hooks[i] == nil {
				return 0, fmt.Errorf("repositories: uninitialized hook (forgotten import repositories/runtime?)")
			}
			mut = obu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, obu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (obu *OrderBookUpdate) SaveX(ctx context.Context) int {
	affected, err := obu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (obu *OrderBookUpdate) Exec(ctx context.Context) error {
	_, err := obu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (obu *OrderBookUpdate) ExecX(ctx context.Context) {
	if err := obu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (obu *OrderBookUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderBookUpdate {
	obu.modifiers = append(obu.modifiers, modifiers...)
	return obu
}

func (obu *OrderBookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderbook.Table,
			Columns: orderbook.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderbook.FieldID,
			},
		},
	}
	if ps := obu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := obu.mutation.ExchangeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderbook.FieldExchangeID,
		})
	}
	if value, ok := obu.mutation.LastUpdated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderbook.FieldLastUpdated,
		})
	}
	if value, ok := obu.mutation.OrderBook(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: orderbook.FieldOrderBook,
		})
	}
	_spec.Node.Schema = obu.schemaConfig.OrderBook
	ctx = internal.NewSchemaConfigContext(ctx, obu.schemaConfig)
	_spec.Modifiers = obu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, obu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderbook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OrderBookUpdateOne is the builder for updating a single OrderBook entity.
type OrderBookUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrderBookMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetExchangeID sets the "exchange_id" field.
func (obuo *OrderBookUpdateOne) SetExchangeID(s string) *OrderBookUpdateOne {
	obuo.mutation.SetExchangeID(s)
	return obuo
}

// SetLastUpdated sets the "last_updated" field.
func (obuo *OrderBookUpdateOne) SetLastUpdated(t time.Time) *OrderBookUpdateOne {
	obuo.mutation.SetLastUpdated(t)
	return obuo
}

// SetOrderBook sets the "order_book" field.
func (obuo *OrderBookUpdateOne) SetOrderBook(mb models.OrderBook) *OrderBookUpdateOne {
	obuo.mutation.SetOrderBook(mb)
	return obuo
}

// Mutation returns the OrderBookMutation object of the builder.
func (obuo *OrderBookUpdateOne) Mutation() *OrderBookMutation {
	return obuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (obuo *OrderBookUpdateOne) Select(field string, fields ...string) *OrderBookUpdateOne {
	obuo.fields = append([]string{field}, fields...)
	return obuo
}

// Save executes the query and returns the updated OrderBook entity.
func (obuo *OrderBookUpdateOne) Save(ctx context.Context) (*OrderBook, error) {
	var (
		err  error
		node *OrderBook
	)
	if len(obuo.hooks) == 0 {
		node, err = obuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderBookMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			obuo.mutation = mutation
			node, err = obuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(obuo.hooks) - 1; i >= 0; i-- {
			if obuo.hooks[i] == nil {
				return nil, fmt.Errorf("repositories: uninitialized hook (forgotten import repositories/runtime?)")
			}
			mut = obuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, obuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderBook)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderBookMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (obuo *OrderBookUpdateOne) SaveX(ctx context.Context) *OrderBook {
	node, err := obuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (obuo *OrderBookUpdateOne) Exec(ctx context.Context) error {
	_, err := obuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (obuo *OrderBookUpdateOne) ExecX(ctx context.Context) {
	if err := obuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (obuo *OrderBookUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderBookUpdateOne {
	obuo.modifiers = append(obuo.modifiers, modifiers...)
	return obuo
}

func (obuo *OrderBookUpdateOne) sqlSave(ctx context.Context) (_node *OrderBook, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderbook.Table,
			Columns: orderbook.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderbook.FieldID,
			},
		},
	}
	id, ok := obuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`repositories: missing "OrderBook.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := obuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderbook.FieldID)
		for _, f := range fields {
			if !orderbook.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("repositories: invalid field %q for query", f)}
			}
			if f != orderbook.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := obuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := obuo.mutation.ExchangeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderbook.FieldExchangeID,
		})
	}
	if value, ok := obuo.mutation.LastUpdated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderbook.FieldLastUpdated,
		})
	}
	if value, ok := obuo.mutation.OrderBook(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: orderbook.FieldOrderBook,
		})
	}
	_spec.Node.Schema = obuo.schemaConfig.OrderBook
	ctx = internal.NewSchemaConfigContext(ctx, obuo.schemaConfig)
	_spec.Modifiers = obuo.modifiers
	_node = &OrderBook{config: obuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, obuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderbook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
