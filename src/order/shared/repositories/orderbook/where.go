// Code generated by ent, DO NOT EDIT.

package orderbook

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/omiga-group/omiga/src/order/shared/repositories/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ExchangeID applies equality check predicate on the "exchange_id" field. It's identical to ExchangeIDEQ.
func ExchangeID(v string) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExchangeID), v))
	})
}

// LastUpdated applies equality check predicate on the "last_updated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastUpdated), v))
	})
}

// ExchangeIDEQ applies the EQ predicate on the "exchange_id" field.
func ExchangeIDEQ(v string) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExchangeID), v))
	})
}

// ExchangeIDNEQ applies the NEQ predicate on the "exchange_id" field.
func ExchangeIDNEQ(v string) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExchangeID), v))
	})
}

// ExchangeIDIn applies the In predicate on the "exchange_id" field.
func ExchangeIDIn(vs ...string) predicate.OrderBook {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExchangeID), v...))
	})
}

// ExchangeIDNotIn applies the NotIn predicate on the "exchange_id" field.
func ExchangeIDNotIn(vs ...string) predicate.OrderBook {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExchangeID), v...))
	})
}

// ExchangeIDGT applies the GT predicate on the "exchange_id" field.
func ExchangeIDGT(v string) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExchangeID), v))
	})
}

// ExchangeIDGTE applies the GTE predicate on the "exchange_id" field.
func ExchangeIDGTE(v string) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExchangeID), v))
	})
}

// ExchangeIDLT applies the LT predicate on the "exchange_id" field.
func ExchangeIDLT(v string) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExchangeID), v))
	})
}

// ExchangeIDLTE applies the LTE predicate on the "exchange_id" field.
func ExchangeIDLTE(v string) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExchangeID), v))
	})
}

// ExchangeIDContains applies the Contains predicate on the "exchange_id" field.
func ExchangeIDContains(v string) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExchangeID), v))
	})
}

// ExchangeIDHasPrefix applies the HasPrefix predicate on the "exchange_id" field.
func ExchangeIDHasPrefix(v string) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExchangeID), v))
	})
}

// ExchangeIDHasSuffix applies the HasSuffix predicate on the "exchange_id" field.
func ExchangeIDHasSuffix(v string) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExchangeID), v))
	})
}

// ExchangeIDEqualFold applies the EqualFold predicate on the "exchange_id" field.
func ExchangeIDEqualFold(v string) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExchangeID), v))
	})
}

// ExchangeIDContainsFold applies the ContainsFold predicate on the "exchange_id" field.
func ExchangeIDContainsFold(v string) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExchangeID), v))
	})
}

// LastUpdatedEQ applies the EQ predicate on the "last_updated" field.
func LastUpdatedEQ(v time.Time) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastUpdated), v))
	})
}

// LastUpdatedNEQ applies the NEQ predicate on the "last_updated" field.
func LastUpdatedNEQ(v time.Time) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastUpdated), v))
	})
}

// LastUpdatedIn applies the In predicate on the "last_updated" field.
func LastUpdatedIn(vs ...time.Time) predicate.OrderBook {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastUpdated), v...))
	})
}

// LastUpdatedNotIn applies the NotIn predicate on the "last_updated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.OrderBook {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastUpdated), v...))
	})
}

// LastUpdatedGT applies the GT predicate on the "last_updated" field.
func LastUpdatedGT(v time.Time) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastUpdated), v))
	})
}

// LastUpdatedGTE applies the GTE predicate on the "last_updated" field.
func LastUpdatedGTE(v time.Time) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastUpdated), v))
	})
}

// LastUpdatedLT applies the LT predicate on the "last_updated" field.
func LastUpdatedLT(v time.Time) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastUpdated), v))
	})
}

// LastUpdatedLTE applies the LTE predicate on the "last_updated" field.
func LastUpdatedLTE(v time.Time) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastUpdated), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderBook) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderBook) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderBook) predicate.OrderBook {
	return predicate.OrderBook(func(s *sql.Selector) {
		p(s.Not())
	})
}
