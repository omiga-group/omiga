// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omiga-group/omiga/src/venue/shared/entities/market"
	"github.com/omiga-group/omiga/src/venue/shared/entities/ticker"
	"github.com/omiga-group/omiga/src/venue/shared/entities/tradingpair"
	"github.com/omiga-group/omiga/src/venue/shared/entities/venue"
)

// VenueCreate is the builder for creating a Venue entity.
type VenueCreate struct {
	config
	mutation *VenueMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetVenueID sets the "venue_id" field.
func (vc *VenueCreate) SetVenueID(s string) *VenueCreate {
	vc.mutation.SetVenueID(s)
	return vc
}

// SetType sets the "type" field.
func (vc *VenueCreate) SetType(v venue.Type) *VenueCreate {
	vc.mutation.SetType(v)
	return vc
}

// SetName sets the "name" field.
func (vc *VenueCreate) SetName(s string) *VenueCreate {
	vc.mutation.SetName(s)
	return vc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vc *VenueCreate) SetNillableName(s *string) *VenueCreate {
	if s != nil {
		vc.SetName(*s)
	}
	return vc
}

// SetYearEstablished sets the "year_established" field.
func (vc *VenueCreate) SetYearEstablished(i int) *VenueCreate {
	vc.mutation.SetYearEstablished(i)
	return vc
}

// SetNillableYearEstablished sets the "year_established" field if the given value is not nil.
func (vc *VenueCreate) SetNillableYearEstablished(i *int) *VenueCreate {
	if i != nil {
		vc.SetYearEstablished(*i)
	}
	return vc
}

// SetCountry sets the "country" field.
func (vc *VenueCreate) SetCountry(s string) *VenueCreate {
	vc.mutation.SetCountry(s)
	return vc
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (vc *VenueCreate) SetNillableCountry(s *string) *VenueCreate {
	if s != nil {
		vc.SetCountry(*s)
	}
	return vc
}

// SetImage sets the "image" field.
func (vc *VenueCreate) SetImage(s string) *VenueCreate {
	vc.mutation.SetImage(s)
	return vc
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (vc *VenueCreate) SetNillableImage(s *string) *VenueCreate {
	if s != nil {
		vc.SetImage(*s)
	}
	return vc
}

// SetLinks sets the "links" field.
func (vc *VenueCreate) SetLinks(m map[string]string) *VenueCreate {
	vc.mutation.SetLinks(m)
	return vc
}

// SetHasTradingIncentive sets the "has_trading_incentive" field.
func (vc *VenueCreate) SetHasTradingIncentive(b bool) *VenueCreate {
	vc.mutation.SetHasTradingIncentive(b)
	return vc
}

// SetNillableHasTradingIncentive sets the "has_trading_incentive" field if the given value is not nil.
func (vc *VenueCreate) SetNillableHasTradingIncentive(b *bool) *VenueCreate {
	if b != nil {
		vc.SetHasTradingIncentive(*b)
	}
	return vc
}

// SetCentralized sets the "centralized" field.
func (vc *VenueCreate) SetCentralized(b bool) *VenueCreate {
	vc.mutation.SetCentralized(b)
	return vc
}

// SetNillableCentralized sets the "centralized" field if the given value is not nil.
func (vc *VenueCreate) SetNillableCentralized(b *bool) *VenueCreate {
	if b != nil {
		vc.SetCentralized(*b)
	}
	return vc
}

// SetPublicNotice sets the "public_notice" field.
func (vc *VenueCreate) SetPublicNotice(s string) *VenueCreate {
	vc.mutation.SetPublicNotice(s)
	return vc
}

// SetNillablePublicNotice sets the "public_notice" field if the given value is not nil.
func (vc *VenueCreate) SetNillablePublicNotice(s *string) *VenueCreate {
	if s != nil {
		vc.SetPublicNotice(*s)
	}
	return vc
}

// SetAlertNotice sets the "alert_notice" field.
func (vc *VenueCreate) SetAlertNotice(s string) *VenueCreate {
	vc.mutation.SetAlertNotice(s)
	return vc
}

// SetNillableAlertNotice sets the "alert_notice" field if the given value is not nil.
func (vc *VenueCreate) SetNillableAlertNotice(s *string) *VenueCreate {
	if s != nil {
		vc.SetAlertNotice(*s)
	}
	return vc
}

// SetTrustScore sets the "trust_score" field.
func (vc *VenueCreate) SetTrustScore(i int) *VenueCreate {
	vc.mutation.SetTrustScore(i)
	return vc
}

// SetNillableTrustScore sets the "trust_score" field if the given value is not nil.
func (vc *VenueCreate) SetNillableTrustScore(i *int) *VenueCreate {
	if i != nil {
		vc.SetTrustScore(*i)
	}
	return vc
}

// SetTrustScoreRank sets the "trust_score_rank" field.
func (vc *VenueCreate) SetTrustScoreRank(i int) *VenueCreate {
	vc.mutation.SetTrustScoreRank(i)
	return vc
}

// SetNillableTrustScoreRank sets the "trust_score_rank" field if the given value is not nil.
func (vc *VenueCreate) SetNillableTrustScoreRank(i *int) *VenueCreate {
	if i != nil {
		vc.SetTrustScoreRank(*i)
	}
	return vc
}

// SetTradeVolume24hBtc sets the "trade_volume_24h_btc" field.
func (vc *VenueCreate) SetTradeVolume24hBtc(f float64) *VenueCreate {
	vc.mutation.SetTradeVolume24hBtc(f)
	return vc
}

// SetNillableTradeVolume24hBtc sets the "trade_volume_24h_btc" field if the given value is not nil.
func (vc *VenueCreate) SetNillableTradeVolume24hBtc(f *float64) *VenueCreate {
	if f != nil {
		vc.SetTradeVolume24hBtc(*f)
	}
	return vc
}

// SetTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field.
func (vc *VenueCreate) SetTradeVolume24hBtcNormalized(f float64) *VenueCreate {
	vc.mutation.SetTradeVolume24hBtcNormalized(f)
	return vc
}

// SetNillableTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field if the given value is not nil.
func (vc *VenueCreate) SetNillableTradeVolume24hBtcNormalized(f *float64) *VenueCreate {
	if f != nil {
		vc.SetTradeVolume24hBtcNormalized(*f)
	}
	return vc
}

// SetMakerFee sets the "maker_fee" field.
func (vc *VenueCreate) SetMakerFee(f float64) *VenueCreate {
	vc.mutation.SetMakerFee(f)
	return vc
}

// SetNillableMakerFee sets the "maker_fee" field if the given value is not nil.
func (vc *VenueCreate) SetNillableMakerFee(f *float64) *VenueCreate {
	if f != nil {
		vc.SetMakerFee(*f)
	}
	return vc
}

// SetTakerFee sets the "taker_fee" field.
func (vc *VenueCreate) SetTakerFee(f float64) *VenueCreate {
	vc.mutation.SetTakerFee(f)
	return vc
}

// SetNillableTakerFee sets the "taker_fee" field if the given value is not nil.
func (vc *VenueCreate) SetNillableTakerFee(f *float64) *VenueCreate {
	if f != nil {
		vc.SetTakerFee(*f)
	}
	return vc
}

// SetSpreadFee sets the "spread_fee" field.
func (vc *VenueCreate) SetSpreadFee(b bool) *VenueCreate {
	vc.mutation.SetSpreadFee(b)
	return vc
}

// SetNillableSpreadFee sets the "spread_fee" field if the given value is not nil.
func (vc *VenueCreate) SetNillableSpreadFee(b *bool) *VenueCreate {
	if b != nil {
		vc.SetSpreadFee(*b)
	}
	return vc
}

// SetSupportAPI sets the "support_api" field.
func (vc *VenueCreate) SetSupportAPI(b bool) *VenueCreate {
	vc.mutation.SetSupportAPI(b)
	return vc
}

// SetNillableSupportAPI sets the "support_api" field if the given value is not nil.
func (vc *VenueCreate) SetNillableSupportAPI(b *bool) *VenueCreate {
	if b != nil {
		vc.SetSupportAPI(*b)
	}
	return vc
}

// AddTickerIDs adds the "ticker" edge to the Ticker entity by IDs.
func (vc *VenueCreate) AddTickerIDs(ids ...int) *VenueCreate {
	vc.mutation.AddTickerIDs(ids...)
	return vc
}

// AddTicker adds the "ticker" edges to the Ticker entity.
func (vc *VenueCreate) AddTicker(t ...*Ticker) *VenueCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vc.AddTickerIDs(ids...)
}

// AddTradingPairIDs adds the "trading_pair" edge to the TradingPair entity by IDs.
func (vc *VenueCreate) AddTradingPairIDs(ids ...int) *VenueCreate {
	vc.mutation.AddTradingPairIDs(ids...)
	return vc
}

// AddTradingPair adds the "trading_pair" edges to the TradingPair entity.
func (vc *VenueCreate) AddTradingPair(t ...*TradingPair) *VenueCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return vc.AddTradingPairIDs(ids...)
}

// AddMarketIDs adds the "market" edge to the Market entity by IDs.
func (vc *VenueCreate) AddMarketIDs(ids ...int) *VenueCreate {
	vc.mutation.AddMarketIDs(ids...)
	return vc
}

// AddMarket adds the "market" edges to the Market entity.
func (vc *VenueCreate) AddMarket(m ...*Market) *VenueCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vc.AddMarketIDs(ids...)
}

// Mutation returns the VenueMutation object of the builder.
func (vc *VenueCreate) Mutation() *VenueMutation {
	return vc.mutation
}

// Save creates the Venue in the database.
func (vc *VenueCreate) Save(ctx context.Context) (*Venue, error) {
	var (
		err  error
		node *Venue
	)
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VenueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			if node, err = vc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			if vc.hooks[i] == nil {
				return nil, fmt.Errorf("entities: uninitialized hook (forgotten import entities/runtime?)")
			}
			mut = vc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, vc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Venue)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from VenueMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VenueCreate) SaveX(ctx context.Context) *Venue {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VenueCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VenueCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VenueCreate) check() error {
	if _, ok := vc.mutation.VenueID(); !ok {
		return &ValidationError{Name: "venue_id", err: errors.New(`entities: missing required field "Venue.venue_id"`)}
	}
	if _, ok := vc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`entities: missing required field "Venue.type"`)}
	}
	if v, ok := vc.mutation.GetType(); ok {
		if err := venue.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`entities: validator failed for field "Venue.type": %w`, err)}
		}
	}
	return nil
}

func (vc *VenueCreate) sqlSave(ctx context.Context) (*Venue, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vc *VenueCreate) createSpec() (*Venue, *sqlgraph.CreateSpec) {
	var (
		_node = &Venue{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: venue.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: venue.FieldID,
			},
		}
	)
	_spec.Schema = vc.schemaConfig.Venue
	_spec.OnConflict = vc.conflict
	if value, ok := vc.mutation.VenueID(); ok {
		_spec.SetField(venue.FieldVenueID, field.TypeString, value)
		_node.VenueID = value
	}
	if value, ok := vc.mutation.GetType(); ok {
		_spec.SetField(venue.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := vc.mutation.Name(); ok {
		_spec.SetField(venue.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := vc.mutation.YearEstablished(); ok {
		_spec.SetField(venue.FieldYearEstablished, field.TypeInt, value)
		_node.YearEstablished = value
	}
	if value, ok := vc.mutation.Country(); ok {
		_spec.SetField(venue.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := vc.mutation.Image(); ok {
		_spec.SetField(venue.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := vc.mutation.Links(); ok {
		_spec.SetField(venue.FieldLinks, field.TypeJSON, value)
		_node.Links = value
	}
	if value, ok := vc.mutation.HasTradingIncentive(); ok {
		_spec.SetField(venue.FieldHasTradingIncentive, field.TypeBool, value)
		_node.HasTradingIncentive = value
	}
	if value, ok := vc.mutation.Centralized(); ok {
		_spec.SetField(venue.FieldCentralized, field.TypeBool, value)
		_node.Centralized = value
	}
	if value, ok := vc.mutation.PublicNotice(); ok {
		_spec.SetField(venue.FieldPublicNotice, field.TypeString, value)
		_node.PublicNotice = value
	}
	if value, ok := vc.mutation.AlertNotice(); ok {
		_spec.SetField(venue.FieldAlertNotice, field.TypeString, value)
		_node.AlertNotice = value
	}
	if value, ok := vc.mutation.TrustScore(); ok {
		_spec.SetField(venue.FieldTrustScore, field.TypeInt, value)
		_node.TrustScore = value
	}
	if value, ok := vc.mutation.TrustScoreRank(); ok {
		_spec.SetField(venue.FieldTrustScoreRank, field.TypeInt, value)
		_node.TrustScoreRank = value
	}
	if value, ok := vc.mutation.TradeVolume24hBtc(); ok {
		_spec.SetField(venue.FieldTradeVolume24hBtc, field.TypeFloat64, value)
		_node.TradeVolume24hBtc = value
	}
	if value, ok := vc.mutation.TradeVolume24hBtcNormalized(); ok {
		_spec.SetField(venue.FieldTradeVolume24hBtcNormalized, field.TypeFloat64, value)
		_node.TradeVolume24hBtcNormalized = value
	}
	if value, ok := vc.mutation.MakerFee(); ok {
		_spec.SetField(venue.FieldMakerFee, field.TypeFloat64, value)
		_node.MakerFee = value
	}
	if value, ok := vc.mutation.TakerFee(); ok {
		_spec.SetField(venue.FieldTakerFee, field.TypeFloat64, value)
		_node.TakerFee = value
	}
	if value, ok := vc.mutation.SpreadFee(); ok {
		_spec.SetField(venue.FieldSpreadFee, field.TypeBool, value)
		_node.SpreadFee = value
	}
	if value, ok := vc.mutation.SupportAPI(); ok {
		_spec.SetField(venue.FieldSupportAPI, field.TypeBool, value)
		_node.SupportAPI = value
	}
	if nodes := vc.mutation.TickerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.TickerTable,
			Columns: []string{venue.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticker.FieldID,
				},
			},
		}
		edge.Schema = vc.schemaConfig.Ticker
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.TradingPairIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.TradingPairTable,
			Columns: []string{venue.TradingPairColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradingpair.FieldID,
				},
			},
		}
		edge.Schema = vc.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.MarketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.MarketTable,
			Columns: []string{venue.MarketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: market.FieldID,
				},
			},
		}
		edge.Schema = vc.schemaConfig.Market
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Venue.Create().
//		SetVenueID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VenueUpsert) {
//			SetVenueID(v+v).
//		}).
//		Exec(ctx)
func (vc *VenueCreate) OnConflict(opts ...sql.ConflictOption) *VenueUpsertOne {
	vc.conflict = opts
	return &VenueUpsertOne{
		create: vc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Venue.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vc *VenueCreate) OnConflictColumns(columns ...string) *VenueUpsertOne {
	vc.conflict = append(vc.conflict, sql.ConflictColumns(columns...))
	return &VenueUpsertOne{
		create: vc,
	}
}

type (
	// VenueUpsertOne is the builder for "upsert"-ing
	//  one Venue node.
	VenueUpsertOne struct {
		create *VenueCreate
	}

	// VenueUpsert is the "OnConflict" setter.
	VenueUpsert struct {
		*sql.UpdateSet
	}
)

// SetVenueID sets the "venue_id" field.
func (u *VenueUpsert) SetVenueID(v string) *VenueUpsert {
	u.Set(venue.FieldVenueID, v)
	return u
}

// UpdateVenueID sets the "venue_id" field to the value that was provided on create.
func (u *VenueUpsert) UpdateVenueID() *VenueUpsert {
	u.SetExcluded(venue.FieldVenueID)
	return u
}

// SetType sets the "type" field.
func (u *VenueUpsert) SetType(v venue.Type) *VenueUpsert {
	u.Set(venue.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *VenueUpsert) UpdateType() *VenueUpsert {
	u.SetExcluded(venue.FieldType)
	return u
}

// SetName sets the "name" field.
func (u *VenueUpsert) SetName(v string) *VenueUpsert {
	u.Set(venue.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *VenueUpsert) UpdateName() *VenueUpsert {
	u.SetExcluded(venue.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *VenueUpsert) ClearName() *VenueUpsert {
	u.SetNull(venue.FieldName)
	return u
}

// SetYearEstablished sets the "year_established" field.
func (u *VenueUpsert) SetYearEstablished(v int) *VenueUpsert {
	u.Set(venue.FieldYearEstablished, v)
	return u
}

// UpdateYearEstablished sets the "year_established" field to the value that was provided on create.
func (u *VenueUpsert) UpdateYearEstablished() *VenueUpsert {
	u.SetExcluded(venue.FieldYearEstablished)
	return u
}

// AddYearEstablished adds v to the "year_established" field.
func (u *VenueUpsert) AddYearEstablished(v int) *VenueUpsert {
	u.Add(venue.FieldYearEstablished, v)
	return u
}

// ClearYearEstablished clears the value of the "year_established" field.
func (u *VenueUpsert) ClearYearEstablished() *VenueUpsert {
	u.SetNull(venue.FieldYearEstablished)
	return u
}

// SetCountry sets the "country" field.
func (u *VenueUpsert) SetCountry(v string) *VenueUpsert {
	u.Set(venue.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *VenueUpsert) UpdateCountry() *VenueUpsert {
	u.SetExcluded(venue.FieldCountry)
	return u
}

// ClearCountry clears the value of the "country" field.
func (u *VenueUpsert) ClearCountry() *VenueUpsert {
	u.SetNull(venue.FieldCountry)
	return u
}

// SetImage sets the "image" field.
func (u *VenueUpsert) SetImage(v string) *VenueUpsert {
	u.Set(venue.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *VenueUpsert) UpdateImage() *VenueUpsert {
	u.SetExcluded(venue.FieldImage)
	return u
}

// ClearImage clears the value of the "image" field.
func (u *VenueUpsert) ClearImage() *VenueUpsert {
	u.SetNull(venue.FieldImage)
	return u
}

// SetLinks sets the "links" field.
func (u *VenueUpsert) SetLinks(v map[string]string) *VenueUpsert {
	u.Set(venue.FieldLinks, v)
	return u
}

// UpdateLinks sets the "links" field to the value that was provided on create.
func (u *VenueUpsert) UpdateLinks() *VenueUpsert {
	u.SetExcluded(venue.FieldLinks)
	return u
}

// ClearLinks clears the value of the "links" field.
func (u *VenueUpsert) ClearLinks() *VenueUpsert {
	u.SetNull(venue.FieldLinks)
	return u
}

// SetHasTradingIncentive sets the "has_trading_incentive" field.
func (u *VenueUpsert) SetHasTradingIncentive(v bool) *VenueUpsert {
	u.Set(venue.FieldHasTradingIncentive, v)
	return u
}

// UpdateHasTradingIncentive sets the "has_trading_incentive" field to the value that was provided on create.
func (u *VenueUpsert) UpdateHasTradingIncentive() *VenueUpsert {
	u.SetExcluded(venue.FieldHasTradingIncentive)
	return u
}

// ClearHasTradingIncentive clears the value of the "has_trading_incentive" field.
func (u *VenueUpsert) ClearHasTradingIncentive() *VenueUpsert {
	u.SetNull(venue.FieldHasTradingIncentive)
	return u
}

// SetCentralized sets the "centralized" field.
func (u *VenueUpsert) SetCentralized(v bool) *VenueUpsert {
	u.Set(venue.FieldCentralized, v)
	return u
}

// UpdateCentralized sets the "centralized" field to the value that was provided on create.
func (u *VenueUpsert) UpdateCentralized() *VenueUpsert {
	u.SetExcluded(venue.FieldCentralized)
	return u
}

// ClearCentralized clears the value of the "centralized" field.
func (u *VenueUpsert) ClearCentralized() *VenueUpsert {
	u.SetNull(venue.FieldCentralized)
	return u
}

// SetPublicNotice sets the "public_notice" field.
func (u *VenueUpsert) SetPublicNotice(v string) *VenueUpsert {
	u.Set(venue.FieldPublicNotice, v)
	return u
}

// UpdatePublicNotice sets the "public_notice" field to the value that was provided on create.
func (u *VenueUpsert) UpdatePublicNotice() *VenueUpsert {
	u.SetExcluded(venue.FieldPublicNotice)
	return u
}

// ClearPublicNotice clears the value of the "public_notice" field.
func (u *VenueUpsert) ClearPublicNotice() *VenueUpsert {
	u.SetNull(venue.FieldPublicNotice)
	return u
}

// SetAlertNotice sets the "alert_notice" field.
func (u *VenueUpsert) SetAlertNotice(v string) *VenueUpsert {
	u.Set(venue.FieldAlertNotice, v)
	return u
}

// UpdateAlertNotice sets the "alert_notice" field to the value that was provided on create.
func (u *VenueUpsert) UpdateAlertNotice() *VenueUpsert {
	u.SetExcluded(venue.FieldAlertNotice)
	return u
}

// ClearAlertNotice clears the value of the "alert_notice" field.
func (u *VenueUpsert) ClearAlertNotice() *VenueUpsert {
	u.SetNull(venue.FieldAlertNotice)
	return u
}

// SetTrustScore sets the "trust_score" field.
func (u *VenueUpsert) SetTrustScore(v int) *VenueUpsert {
	u.Set(venue.FieldTrustScore, v)
	return u
}

// UpdateTrustScore sets the "trust_score" field to the value that was provided on create.
func (u *VenueUpsert) UpdateTrustScore() *VenueUpsert {
	u.SetExcluded(venue.FieldTrustScore)
	return u
}

// AddTrustScore adds v to the "trust_score" field.
func (u *VenueUpsert) AddTrustScore(v int) *VenueUpsert {
	u.Add(venue.FieldTrustScore, v)
	return u
}

// ClearTrustScore clears the value of the "trust_score" field.
func (u *VenueUpsert) ClearTrustScore() *VenueUpsert {
	u.SetNull(venue.FieldTrustScore)
	return u
}

// SetTrustScoreRank sets the "trust_score_rank" field.
func (u *VenueUpsert) SetTrustScoreRank(v int) *VenueUpsert {
	u.Set(venue.FieldTrustScoreRank, v)
	return u
}

// UpdateTrustScoreRank sets the "trust_score_rank" field to the value that was provided on create.
func (u *VenueUpsert) UpdateTrustScoreRank() *VenueUpsert {
	u.SetExcluded(venue.FieldTrustScoreRank)
	return u
}

// AddTrustScoreRank adds v to the "trust_score_rank" field.
func (u *VenueUpsert) AddTrustScoreRank(v int) *VenueUpsert {
	u.Add(venue.FieldTrustScoreRank, v)
	return u
}

// ClearTrustScoreRank clears the value of the "trust_score_rank" field.
func (u *VenueUpsert) ClearTrustScoreRank() *VenueUpsert {
	u.SetNull(venue.FieldTrustScoreRank)
	return u
}

// SetTradeVolume24hBtc sets the "trade_volume_24h_btc" field.
func (u *VenueUpsert) SetTradeVolume24hBtc(v float64) *VenueUpsert {
	u.Set(venue.FieldTradeVolume24hBtc, v)
	return u
}

// UpdateTradeVolume24hBtc sets the "trade_volume_24h_btc" field to the value that was provided on create.
func (u *VenueUpsert) UpdateTradeVolume24hBtc() *VenueUpsert {
	u.SetExcluded(venue.FieldTradeVolume24hBtc)
	return u
}

// AddTradeVolume24hBtc adds v to the "trade_volume_24h_btc" field.
func (u *VenueUpsert) AddTradeVolume24hBtc(v float64) *VenueUpsert {
	u.Add(venue.FieldTradeVolume24hBtc, v)
	return u
}

// ClearTradeVolume24hBtc clears the value of the "trade_volume_24h_btc" field.
func (u *VenueUpsert) ClearTradeVolume24hBtc() *VenueUpsert {
	u.SetNull(venue.FieldTradeVolume24hBtc)
	return u
}

// SetTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field.
func (u *VenueUpsert) SetTradeVolume24hBtcNormalized(v float64) *VenueUpsert {
	u.Set(venue.FieldTradeVolume24hBtcNormalized, v)
	return u
}

// UpdateTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field to the value that was provided on create.
func (u *VenueUpsert) UpdateTradeVolume24hBtcNormalized() *VenueUpsert {
	u.SetExcluded(venue.FieldTradeVolume24hBtcNormalized)
	return u
}

// AddTradeVolume24hBtcNormalized adds v to the "trade_volume_24h_btc_normalized" field.
func (u *VenueUpsert) AddTradeVolume24hBtcNormalized(v float64) *VenueUpsert {
	u.Add(venue.FieldTradeVolume24hBtcNormalized, v)
	return u
}

// ClearTradeVolume24hBtcNormalized clears the value of the "trade_volume_24h_btc_normalized" field.
func (u *VenueUpsert) ClearTradeVolume24hBtcNormalized() *VenueUpsert {
	u.SetNull(venue.FieldTradeVolume24hBtcNormalized)
	return u
}

// SetMakerFee sets the "maker_fee" field.
func (u *VenueUpsert) SetMakerFee(v float64) *VenueUpsert {
	u.Set(venue.FieldMakerFee, v)
	return u
}

// UpdateMakerFee sets the "maker_fee" field to the value that was provided on create.
func (u *VenueUpsert) UpdateMakerFee() *VenueUpsert {
	u.SetExcluded(venue.FieldMakerFee)
	return u
}

// AddMakerFee adds v to the "maker_fee" field.
func (u *VenueUpsert) AddMakerFee(v float64) *VenueUpsert {
	u.Add(venue.FieldMakerFee, v)
	return u
}

// ClearMakerFee clears the value of the "maker_fee" field.
func (u *VenueUpsert) ClearMakerFee() *VenueUpsert {
	u.SetNull(venue.FieldMakerFee)
	return u
}

// SetTakerFee sets the "taker_fee" field.
func (u *VenueUpsert) SetTakerFee(v float64) *VenueUpsert {
	u.Set(venue.FieldTakerFee, v)
	return u
}

// UpdateTakerFee sets the "taker_fee" field to the value that was provided on create.
func (u *VenueUpsert) UpdateTakerFee() *VenueUpsert {
	u.SetExcluded(venue.FieldTakerFee)
	return u
}

// AddTakerFee adds v to the "taker_fee" field.
func (u *VenueUpsert) AddTakerFee(v float64) *VenueUpsert {
	u.Add(venue.FieldTakerFee, v)
	return u
}

// ClearTakerFee clears the value of the "taker_fee" field.
func (u *VenueUpsert) ClearTakerFee() *VenueUpsert {
	u.SetNull(venue.FieldTakerFee)
	return u
}

// SetSpreadFee sets the "spread_fee" field.
func (u *VenueUpsert) SetSpreadFee(v bool) *VenueUpsert {
	u.Set(venue.FieldSpreadFee, v)
	return u
}

// UpdateSpreadFee sets the "spread_fee" field to the value that was provided on create.
func (u *VenueUpsert) UpdateSpreadFee() *VenueUpsert {
	u.SetExcluded(venue.FieldSpreadFee)
	return u
}

// ClearSpreadFee clears the value of the "spread_fee" field.
func (u *VenueUpsert) ClearSpreadFee() *VenueUpsert {
	u.SetNull(venue.FieldSpreadFee)
	return u
}

// SetSupportAPI sets the "support_api" field.
func (u *VenueUpsert) SetSupportAPI(v bool) *VenueUpsert {
	u.Set(venue.FieldSupportAPI, v)
	return u
}

// UpdateSupportAPI sets the "support_api" field to the value that was provided on create.
func (u *VenueUpsert) UpdateSupportAPI() *VenueUpsert {
	u.SetExcluded(venue.FieldSupportAPI)
	return u
}

// ClearSupportAPI clears the value of the "support_api" field.
func (u *VenueUpsert) ClearSupportAPI() *VenueUpsert {
	u.SetNull(venue.FieldSupportAPI)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Venue.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VenueUpsertOne) UpdateNewValues() *VenueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Venue.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VenueUpsertOne) Ignore() *VenueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VenueUpsertOne) DoNothing() *VenueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VenueCreate.OnConflict
// documentation for more info.
func (u *VenueUpsertOne) Update(set func(*VenueUpsert)) *VenueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VenueUpsert{UpdateSet: update})
	}))
	return u
}

// SetVenueID sets the "venue_id" field.
func (u *VenueUpsertOne) SetVenueID(v string) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetVenueID(v)
	})
}

// UpdateVenueID sets the "venue_id" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateVenueID() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateVenueID()
	})
}

// SetType sets the "type" field.
func (u *VenueUpsertOne) SetType(v venue.Type) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateType() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *VenueUpsertOne) SetName(v string) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateName() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *VenueUpsertOne) ClearName() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearName()
	})
}

// SetYearEstablished sets the "year_established" field.
func (u *VenueUpsertOne) SetYearEstablished(v int) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetYearEstablished(v)
	})
}

// AddYearEstablished adds v to the "year_established" field.
func (u *VenueUpsertOne) AddYearEstablished(v int) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.AddYearEstablished(v)
	})
}

// UpdateYearEstablished sets the "year_established" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateYearEstablished() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateYearEstablished()
	})
}

// ClearYearEstablished clears the value of the "year_established" field.
func (u *VenueUpsertOne) ClearYearEstablished() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearYearEstablished()
	})
}

// SetCountry sets the "country" field.
func (u *VenueUpsertOne) SetCountry(v string) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateCountry() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *VenueUpsertOne) ClearCountry() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearCountry()
	})
}

// SetImage sets the "image" field.
func (u *VenueUpsertOne) SetImage(v string) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateImage() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateImage()
	})
}

// ClearImage clears the value of the "image" field.
func (u *VenueUpsertOne) ClearImage() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearImage()
	})
}

// SetLinks sets the "links" field.
func (u *VenueUpsertOne) SetLinks(v map[string]string) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetLinks(v)
	})
}

// UpdateLinks sets the "links" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateLinks() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateLinks()
	})
}

// ClearLinks clears the value of the "links" field.
func (u *VenueUpsertOne) ClearLinks() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearLinks()
	})
}

// SetHasTradingIncentive sets the "has_trading_incentive" field.
func (u *VenueUpsertOne) SetHasTradingIncentive(v bool) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetHasTradingIncentive(v)
	})
}

// UpdateHasTradingIncentive sets the "has_trading_incentive" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateHasTradingIncentive() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateHasTradingIncentive()
	})
}

// ClearHasTradingIncentive clears the value of the "has_trading_incentive" field.
func (u *VenueUpsertOne) ClearHasTradingIncentive() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearHasTradingIncentive()
	})
}

// SetCentralized sets the "centralized" field.
func (u *VenueUpsertOne) SetCentralized(v bool) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetCentralized(v)
	})
}

// UpdateCentralized sets the "centralized" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateCentralized() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateCentralized()
	})
}

// ClearCentralized clears the value of the "centralized" field.
func (u *VenueUpsertOne) ClearCentralized() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearCentralized()
	})
}

// SetPublicNotice sets the "public_notice" field.
func (u *VenueUpsertOne) SetPublicNotice(v string) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetPublicNotice(v)
	})
}

// UpdatePublicNotice sets the "public_notice" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdatePublicNotice() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdatePublicNotice()
	})
}

// ClearPublicNotice clears the value of the "public_notice" field.
func (u *VenueUpsertOne) ClearPublicNotice() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearPublicNotice()
	})
}

// SetAlertNotice sets the "alert_notice" field.
func (u *VenueUpsertOne) SetAlertNotice(v string) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetAlertNotice(v)
	})
}

// UpdateAlertNotice sets the "alert_notice" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateAlertNotice() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateAlertNotice()
	})
}

// ClearAlertNotice clears the value of the "alert_notice" field.
func (u *VenueUpsertOne) ClearAlertNotice() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearAlertNotice()
	})
}

// SetTrustScore sets the "trust_score" field.
func (u *VenueUpsertOne) SetTrustScore(v int) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetTrustScore(v)
	})
}

// AddTrustScore adds v to the "trust_score" field.
func (u *VenueUpsertOne) AddTrustScore(v int) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.AddTrustScore(v)
	})
}

// UpdateTrustScore sets the "trust_score" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateTrustScore() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateTrustScore()
	})
}

// ClearTrustScore clears the value of the "trust_score" field.
func (u *VenueUpsertOne) ClearTrustScore() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearTrustScore()
	})
}

// SetTrustScoreRank sets the "trust_score_rank" field.
func (u *VenueUpsertOne) SetTrustScoreRank(v int) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetTrustScoreRank(v)
	})
}

// AddTrustScoreRank adds v to the "trust_score_rank" field.
func (u *VenueUpsertOne) AddTrustScoreRank(v int) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.AddTrustScoreRank(v)
	})
}

// UpdateTrustScoreRank sets the "trust_score_rank" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateTrustScoreRank() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateTrustScoreRank()
	})
}

// ClearTrustScoreRank clears the value of the "trust_score_rank" field.
func (u *VenueUpsertOne) ClearTrustScoreRank() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearTrustScoreRank()
	})
}

// SetTradeVolume24hBtc sets the "trade_volume_24h_btc" field.
func (u *VenueUpsertOne) SetTradeVolume24hBtc(v float64) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetTradeVolume24hBtc(v)
	})
}

// AddTradeVolume24hBtc adds v to the "trade_volume_24h_btc" field.
func (u *VenueUpsertOne) AddTradeVolume24hBtc(v float64) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.AddTradeVolume24hBtc(v)
	})
}

// UpdateTradeVolume24hBtc sets the "trade_volume_24h_btc" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateTradeVolume24hBtc() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateTradeVolume24hBtc()
	})
}

// ClearTradeVolume24hBtc clears the value of the "trade_volume_24h_btc" field.
func (u *VenueUpsertOne) ClearTradeVolume24hBtc() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearTradeVolume24hBtc()
	})
}

// SetTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field.
func (u *VenueUpsertOne) SetTradeVolume24hBtcNormalized(v float64) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetTradeVolume24hBtcNormalized(v)
	})
}

// AddTradeVolume24hBtcNormalized adds v to the "trade_volume_24h_btc_normalized" field.
func (u *VenueUpsertOne) AddTradeVolume24hBtcNormalized(v float64) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.AddTradeVolume24hBtcNormalized(v)
	})
}

// UpdateTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateTradeVolume24hBtcNormalized() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateTradeVolume24hBtcNormalized()
	})
}

// ClearTradeVolume24hBtcNormalized clears the value of the "trade_volume_24h_btc_normalized" field.
func (u *VenueUpsertOne) ClearTradeVolume24hBtcNormalized() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearTradeVolume24hBtcNormalized()
	})
}

// SetMakerFee sets the "maker_fee" field.
func (u *VenueUpsertOne) SetMakerFee(v float64) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetMakerFee(v)
	})
}

// AddMakerFee adds v to the "maker_fee" field.
func (u *VenueUpsertOne) AddMakerFee(v float64) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.AddMakerFee(v)
	})
}

// UpdateMakerFee sets the "maker_fee" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateMakerFee() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateMakerFee()
	})
}

// ClearMakerFee clears the value of the "maker_fee" field.
func (u *VenueUpsertOne) ClearMakerFee() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearMakerFee()
	})
}

// SetTakerFee sets the "taker_fee" field.
func (u *VenueUpsertOne) SetTakerFee(v float64) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetTakerFee(v)
	})
}

// AddTakerFee adds v to the "taker_fee" field.
func (u *VenueUpsertOne) AddTakerFee(v float64) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.AddTakerFee(v)
	})
}

// UpdateTakerFee sets the "taker_fee" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateTakerFee() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateTakerFee()
	})
}

// ClearTakerFee clears the value of the "taker_fee" field.
func (u *VenueUpsertOne) ClearTakerFee() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearTakerFee()
	})
}

// SetSpreadFee sets the "spread_fee" field.
func (u *VenueUpsertOne) SetSpreadFee(v bool) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetSpreadFee(v)
	})
}

// UpdateSpreadFee sets the "spread_fee" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateSpreadFee() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateSpreadFee()
	})
}

// ClearSpreadFee clears the value of the "spread_fee" field.
func (u *VenueUpsertOne) ClearSpreadFee() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearSpreadFee()
	})
}

// SetSupportAPI sets the "support_api" field.
func (u *VenueUpsertOne) SetSupportAPI(v bool) *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.SetSupportAPI(v)
	})
}

// UpdateSupportAPI sets the "support_api" field to the value that was provided on create.
func (u *VenueUpsertOne) UpdateSupportAPI() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateSupportAPI()
	})
}

// ClearSupportAPI clears the value of the "support_api" field.
func (u *VenueUpsertOne) ClearSupportAPI() *VenueUpsertOne {
	return u.Update(func(s *VenueUpsert) {
		s.ClearSupportAPI()
	})
}

// Exec executes the query.
func (u *VenueUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for VenueCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VenueUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VenueUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VenueUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VenueCreateBulk is the builder for creating many Venue entities in bulk.
type VenueCreateBulk struct {
	config
	builders []*VenueCreate
	conflict []sql.ConflictOption
}

// Save creates the Venue entities in the database.
func (vcb *VenueCreateBulk) Save(ctx context.Context) ([]*Venue, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Venue, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VenueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VenueCreateBulk) SaveX(ctx context.Context) []*Venue {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VenueCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VenueCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Venue.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VenueUpsert) {
//			SetVenueID(v+v).
//		}).
//		Exec(ctx)
func (vcb *VenueCreateBulk) OnConflict(opts ...sql.ConflictOption) *VenueUpsertBulk {
	vcb.conflict = opts
	return &VenueUpsertBulk{
		create: vcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Venue.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vcb *VenueCreateBulk) OnConflictColumns(columns ...string) *VenueUpsertBulk {
	vcb.conflict = append(vcb.conflict, sql.ConflictColumns(columns...))
	return &VenueUpsertBulk{
		create: vcb,
	}
}

// VenueUpsertBulk is the builder for "upsert"-ing
// a bulk of Venue nodes.
type VenueUpsertBulk struct {
	create *VenueCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Venue.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VenueUpsertBulk) UpdateNewValues() *VenueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Venue.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VenueUpsertBulk) Ignore() *VenueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VenueUpsertBulk) DoNothing() *VenueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VenueCreateBulk.OnConflict
// documentation for more info.
func (u *VenueUpsertBulk) Update(set func(*VenueUpsert)) *VenueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VenueUpsert{UpdateSet: update})
	}))
	return u
}

// SetVenueID sets the "venue_id" field.
func (u *VenueUpsertBulk) SetVenueID(v string) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetVenueID(v)
	})
}

// UpdateVenueID sets the "venue_id" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateVenueID() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateVenueID()
	})
}

// SetType sets the "type" field.
func (u *VenueUpsertBulk) SetType(v venue.Type) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateType() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *VenueUpsertBulk) SetName(v string) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateName() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *VenueUpsertBulk) ClearName() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearName()
	})
}

// SetYearEstablished sets the "year_established" field.
func (u *VenueUpsertBulk) SetYearEstablished(v int) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetYearEstablished(v)
	})
}

// AddYearEstablished adds v to the "year_established" field.
func (u *VenueUpsertBulk) AddYearEstablished(v int) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.AddYearEstablished(v)
	})
}

// UpdateYearEstablished sets the "year_established" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateYearEstablished() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateYearEstablished()
	})
}

// ClearYearEstablished clears the value of the "year_established" field.
func (u *VenueUpsertBulk) ClearYearEstablished() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearYearEstablished()
	})
}

// SetCountry sets the "country" field.
func (u *VenueUpsertBulk) SetCountry(v string) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateCountry() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *VenueUpsertBulk) ClearCountry() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearCountry()
	})
}

// SetImage sets the "image" field.
func (u *VenueUpsertBulk) SetImage(v string) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateImage() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateImage()
	})
}

// ClearImage clears the value of the "image" field.
func (u *VenueUpsertBulk) ClearImage() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearImage()
	})
}

// SetLinks sets the "links" field.
func (u *VenueUpsertBulk) SetLinks(v map[string]string) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetLinks(v)
	})
}

// UpdateLinks sets the "links" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateLinks() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateLinks()
	})
}

// ClearLinks clears the value of the "links" field.
func (u *VenueUpsertBulk) ClearLinks() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearLinks()
	})
}

// SetHasTradingIncentive sets the "has_trading_incentive" field.
func (u *VenueUpsertBulk) SetHasTradingIncentive(v bool) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetHasTradingIncentive(v)
	})
}

// UpdateHasTradingIncentive sets the "has_trading_incentive" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateHasTradingIncentive() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateHasTradingIncentive()
	})
}

// ClearHasTradingIncentive clears the value of the "has_trading_incentive" field.
func (u *VenueUpsertBulk) ClearHasTradingIncentive() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearHasTradingIncentive()
	})
}

// SetCentralized sets the "centralized" field.
func (u *VenueUpsertBulk) SetCentralized(v bool) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetCentralized(v)
	})
}

// UpdateCentralized sets the "centralized" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateCentralized() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateCentralized()
	})
}

// ClearCentralized clears the value of the "centralized" field.
func (u *VenueUpsertBulk) ClearCentralized() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearCentralized()
	})
}

// SetPublicNotice sets the "public_notice" field.
func (u *VenueUpsertBulk) SetPublicNotice(v string) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetPublicNotice(v)
	})
}

// UpdatePublicNotice sets the "public_notice" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdatePublicNotice() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdatePublicNotice()
	})
}

// ClearPublicNotice clears the value of the "public_notice" field.
func (u *VenueUpsertBulk) ClearPublicNotice() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearPublicNotice()
	})
}

// SetAlertNotice sets the "alert_notice" field.
func (u *VenueUpsertBulk) SetAlertNotice(v string) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetAlertNotice(v)
	})
}

// UpdateAlertNotice sets the "alert_notice" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateAlertNotice() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateAlertNotice()
	})
}

// ClearAlertNotice clears the value of the "alert_notice" field.
func (u *VenueUpsertBulk) ClearAlertNotice() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearAlertNotice()
	})
}

// SetTrustScore sets the "trust_score" field.
func (u *VenueUpsertBulk) SetTrustScore(v int) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetTrustScore(v)
	})
}

// AddTrustScore adds v to the "trust_score" field.
func (u *VenueUpsertBulk) AddTrustScore(v int) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.AddTrustScore(v)
	})
}

// UpdateTrustScore sets the "trust_score" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateTrustScore() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateTrustScore()
	})
}

// ClearTrustScore clears the value of the "trust_score" field.
func (u *VenueUpsertBulk) ClearTrustScore() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearTrustScore()
	})
}

// SetTrustScoreRank sets the "trust_score_rank" field.
func (u *VenueUpsertBulk) SetTrustScoreRank(v int) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetTrustScoreRank(v)
	})
}

// AddTrustScoreRank adds v to the "trust_score_rank" field.
func (u *VenueUpsertBulk) AddTrustScoreRank(v int) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.AddTrustScoreRank(v)
	})
}

// UpdateTrustScoreRank sets the "trust_score_rank" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateTrustScoreRank() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateTrustScoreRank()
	})
}

// ClearTrustScoreRank clears the value of the "trust_score_rank" field.
func (u *VenueUpsertBulk) ClearTrustScoreRank() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearTrustScoreRank()
	})
}

// SetTradeVolume24hBtc sets the "trade_volume_24h_btc" field.
func (u *VenueUpsertBulk) SetTradeVolume24hBtc(v float64) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetTradeVolume24hBtc(v)
	})
}

// AddTradeVolume24hBtc adds v to the "trade_volume_24h_btc" field.
func (u *VenueUpsertBulk) AddTradeVolume24hBtc(v float64) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.AddTradeVolume24hBtc(v)
	})
}

// UpdateTradeVolume24hBtc sets the "trade_volume_24h_btc" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateTradeVolume24hBtc() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateTradeVolume24hBtc()
	})
}

// ClearTradeVolume24hBtc clears the value of the "trade_volume_24h_btc" field.
func (u *VenueUpsertBulk) ClearTradeVolume24hBtc() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearTradeVolume24hBtc()
	})
}

// SetTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field.
func (u *VenueUpsertBulk) SetTradeVolume24hBtcNormalized(v float64) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetTradeVolume24hBtcNormalized(v)
	})
}

// AddTradeVolume24hBtcNormalized adds v to the "trade_volume_24h_btc_normalized" field.
func (u *VenueUpsertBulk) AddTradeVolume24hBtcNormalized(v float64) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.AddTradeVolume24hBtcNormalized(v)
	})
}

// UpdateTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateTradeVolume24hBtcNormalized() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateTradeVolume24hBtcNormalized()
	})
}

// ClearTradeVolume24hBtcNormalized clears the value of the "trade_volume_24h_btc_normalized" field.
func (u *VenueUpsertBulk) ClearTradeVolume24hBtcNormalized() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearTradeVolume24hBtcNormalized()
	})
}

// SetMakerFee sets the "maker_fee" field.
func (u *VenueUpsertBulk) SetMakerFee(v float64) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetMakerFee(v)
	})
}

// AddMakerFee adds v to the "maker_fee" field.
func (u *VenueUpsertBulk) AddMakerFee(v float64) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.AddMakerFee(v)
	})
}

// UpdateMakerFee sets the "maker_fee" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateMakerFee() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateMakerFee()
	})
}

// ClearMakerFee clears the value of the "maker_fee" field.
func (u *VenueUpsertBulk) ClearMakerFee() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearMakerFee()
	})
}

// SetTakerFee sets the "taker_fee" field.
func (u *VenueUpsertBulk) SetTakerFee(v float64) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetTakerFee(v)
	})
}

// AddTakerFee adds v to the "taker_fee" field.
func (u *VenueUpsertBulk) AddTakerFee(v float64) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.AddTakerFee(v)
	})
}

// UpdateTakerFee sets the "taker_fee" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateTakerFee() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateTakerFee()
	})
}

// ClearTakerFee clears the value of the "taker_fee" field.
func (u *VenueUpsertBulk) ClearTakerFee() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearTakerFee()
	})
}

// SetSpreadFee sets the "spread_fee" field.
func (u *VenueUpsertBulk) SetSpreadFee(v bool) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetSpreadFee(v)
	})
}

// UpdateSpreadFee sets the "spread_fee" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateSpreadFee() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateSpreadFee()
	})
}

// ClearSpreadFee clears the value of the "spread_fee" field.
func (u *VenueUpsertBulk) ClearSpreadFee() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearSpreadFee()
	})
}

// SetSupportAPI sets the "support_api" field.
func (u *VenueUpsertBulk) SetSupportAPI(v bool) *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.SetSupportAPI(v)
	})
}

// UpdateSupportAPI sets the "support_api" field to the value that was provided on create.
func (u *VenueUpsertBulk) UpdateSupportAPI() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.UpdateSupportAPI()
	})
}

// ClearSupportAPI clears the value of the "support_api" field.
func (u *VenueUpsertBulk) ClearSupportAPI() *VenueUpsertBulk {
	return u.Update(func(s *VenueUpsert) {
		s.ClearSupportAPI()
	})
}

// Exec executes the query.
func (u *VenueUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entities: OnConflict was set for builder %d. Set it on the VenueCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for VenueCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VenueUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
