// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (c *Currency) CurrencyBase(ctx context.Context) (result []*TradingPair, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedCurrencyBase(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.CurrencyBaseOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryCurrencyBase().All(ctx)
	}
	return result, err
}

func (c *Currency) CurrencyCounter(ctx context.Context) (result []*TradingPair, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedCurrencyCounter(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.CurrencyCounterOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryCurrencyCounter().All(ctx)
	}
	return result, err
}

func (m *Market) Venue(ctx context.Context) (*Venue, error) {
	result, err := m.Edges.VenueOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryVenue().Only(ctx)
	}
	return result, err
}

func (m *Market) TradingPair(ctx context.Context) (result []*TradingPair, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = m.NamedTradingPair(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = m.Edges.TradingPairOrErr()
	}
	if IsNotLoaded(err) {
		result, err = m.QueryTradingPair().All(ctx)
	}
	return result, err
}

func (t *Ticker) Venue(ctx context.Context) (*Venue, error) {
	result, err := t.Edges.VenueOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryVenue().Only(ctx)
	}
	return result, err
}

func (tp *TradingPair) Venue(ctx context.Context) (*Venue, error) {
	result, err := tp.Edges.VenueOrErr()
	if IsNotLoaded(err) {
		result, err = tp.QueryVenue().Only(ctx)
	}
	return result, err
}

func (tp *TradingPair) Base(ctx context.Context) (*Currency, error) {
	result, err := tp.Edges.BaseOrErr()
	if IsNotLoaded(err) {
		result, err = tp.QueryBase().Only(ctx)
	}
	return result, err
}

func (tp *TradingPair) Counter(ctx context.Context) (*Currency, error) {
	result, err := tp.Edges.CounterOrErr()
	if IsNotLoaded(err) {
		result, err = tp.QueryCounter().Only(ctx)
	}
	return result, err
}

func (tp *TradingPair) Market(ctx context.Context) (result []*Market, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = tp.NamedMarket(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = tp.Edges.MarketOrErr()
	}
	if IsNotLoaded(err) {
		result, err = tp.QueryMarket().All(ctx)
	}
	return result, err
}

func (v *Venue) Ticker(ctx context.Context) (result []*Ticker, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = v.NamedTicker(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = v.Edges.TickerOrErr()
	}
	if IsNotLoaded(err) {
		result, err = v.QueryTicker().All(ctx)
	}
	return result, err
}

func (v *Venue) TradingPair(ctx context.Context) (result []*TradingPair, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = v.NamedTradingPair(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = v.Edges.TradingPairOrErr()
	}
	if IsNotLoaded(err) {
		result, err = v.QueryTradingPair().All(ctx)
	}
	return result, err
}

func (v *Venue) Market(ctx context.Context) (result []*Market, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = v.NamedMarket(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = v.Edges.MarketOrErr()
	}
	if IsNotLoaded(err) {
		result, err = v.QueryMarket().All(ctx)
	}
	return result, err
}
