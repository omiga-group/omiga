// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package appsetup

import (
	"github.com/omiga-group/omiga/src/order/order-api/graphql"
	"github.com/omiga-group/omiga/src/order/order-api/http"
	"github.com/omiga-group/omiga/src/order/order-api/publishers"
	"github.com/omiga-group/omiga/src/order/order-api/services"
	"github.com/omiga-group/omiga/src/order/shared/entities"
	"github.com/omiga-group/omiga/src/order/shared/outbox"
	"github.com/omiga-group/omiga/src/order/shared/repositories"
	"github.com/omiga-group/omiga/src/shared/enterprise/configuration"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func NewHttpServer(logger *zap.SugaredLogger, appConfig configuration.AppConfig, entgoClient entities.EntgoClient, orderOutboxBackgroundService outbox.OutboxBackgroundService) (http.HttpServer, error) {
	orderRepository, err := repositories.NewOrderRepository()
	if err != nil {
		return nil, err
	}
	outboxPublisher, err := outbox.NewOutboxPublisher(logger, entgoClient)
	if err != nil {
		return nil, err
	}
	orderPublisher, err := publishers.NewOrderPublisher(logger, appConfig, outboxPublisher)
	if err != nil {
		return nil, err
	}
	orderService, err := services.NewOrderService(logger, entgoClient, orderRepository, orderPublisher)
	if err != nil {
		return nil, err
	}
	server, err := graphql.NewGraphQLServer(entgoClient, orderService, orderOutboxBackgroundService)
	if err != nil {
		return nil, err
	}
	httpServer, err := http.NewHttpServer(logger, appConfig, server)
	if err != nil {
		return nil, err
	}
	return httpServer, nil
}
