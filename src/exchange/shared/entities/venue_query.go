// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/internal"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/market"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/predicate"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/ticker"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/tradingpair"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/venue"
)

// VenueQuery is the builder for querying Venue entities.
type VenueQuery struct {
	config
	limit                *int
	offset               *int
	unique               *bool
	order                []OrderFunc
	fields               []string
	predicates           []predicate.Venue
	withTicker           *TickerQuery
	withTradingPair      *TradingPairQuery
	withMarket           *MarketQuery
	loadTotal            []func(context.Context, []*Venue) error
	modifiers            []func(*sql.Selector)
	withNamedTicker      map[string]*TickerQuery
	withNamedTradingPair map[string]*TradingPairQuery
	withNamedMarket      map[string]*MarketQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VenueQuery builder.
func (vq *VenueQuery) Where(ps ...predicate.Venue) *VenueQuery {
	vq.predicates = append(vq.predicates, ps...)
	return vq
}

// Limit adds a limit step to the query.
func (vq *VenueQuery) Limit(limit int) *VenueQuery {
	vq.limit = &limit
	return vq
}

// Offset adds an offset step to the query.
func (vq *VenueQuery) Offset(offset int) *VenueQuery {
	vq.offset = &offset
	return vq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vq *VenueQuery) Unique(unique bool) *VenueQuery {
	vq.unique = &unique
	return vq
}

// Order adds an order step to the query.
func (vq *VenueQuery) Order(o ...OrderFunc) *VenueQuery {
	vq.order = append(vq.order, o...)
	return vq
}

// QueryTicker chains the current query on the "ticker" edge.
func (vq *VenueQuery) QueryTicker() *TickerQuery {
	query := &TickerQuery{config: vq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(venue.Table, venue.FieldID, selector),
			sqlgraph.To(ticker.Table, ticker.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, venue.TickerTable, venue.TickerColumn),
		)
		schemaConfig := vq.schemaConfig
		step.To.Schema = schemaConfig.Ticker
		step.Edge.Schema = schemaConfig.Ticker
		fromU = sqlgraph.SetNeighbors(vq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTradingPair chains the current query on the "trading_pair" edge.
func (vq *VenueQuery) QueryTradingPair() *TradingPairQuery {
	query := &TradingPairQuery{config: vq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(venue.Table, venue.FieldID, selector),
			sqlgraph.To(tradingpair.Table, tradingpair.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, venue.TradingPairTable, venue.TradingPairColumn),
		)
		schemaConfig := vq.schemaConfig
		step.To.Schema = schemaConfig.TradingPair
		step.Edge.Schema = schemaConfig.TradingPair
		fromU = sqlgraph.SetNeighbors(vq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMarket chains the current query on the "market" edge.
func (vq *VenueQuery) QueryMarket() *MarketQuery {
	query := &MarketQuery{config: vq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(venue.Table, venue.FieldID, selector),
			sqlgraph.To(market.Table, market.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, venue.MarketTable, venue.MarketColumn),
		)
		schemaConfig := vq.schemaConfig
		step.To.Schema = schemaConfig.Market
		step.Edge.Schema = schemaConfig.Market
		fromU = sqlgraph.SetNeighbors(vq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Venue entity from the query.
// Returns a *NotFoundError when no Venue was found.
func (vq *VenueQuery) First(ctx context.Context) (*Venue, error) {
	nodes, err := vq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{venue.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vq *VenueQuery) FirstX(ctx context.Context) *Venue {
	node, err := vq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Venue ID from the query.
// Returns a *NotFoundError when no Venue ID was found.
func (vq *VenueQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = vq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{venue.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vq *VenueQuery) FirstIDX(ctx context.Context) int {
	id, err := vq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Venue entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Venue entity is found.
// Returns a *NotFoundError when no Venue entities are found.
func (vq *VenueQuery) Only(ctx context.Context) (*Venue, error) {
	nodes, err := vq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{venue.Label}
	default:
		return nil, &NotSingularError{venue.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vq *VenueQuery) OnlyX(ctx context.Context) *Venue {
	node, err := vq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Venue ID in the query.
// Returns a *NotSingularError when more than one Venue ID is found.
// Returns a *NotFoundError when no entities are found.
func (vq *VenueQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = vq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{venue.Label}
	default:
		err = &NotSingularError{venue.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vq *VenueQuery) OnlyIDX(ctx context.Context) int {
	id, err := vq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Venues.
func (vq *VenueQuery) All(ctx context.Context) ([]*Venue, error) {
	if err := vq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return vq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (vq *VenueQuery) AllX(ctx context.Context) []*Venue {
	nodes, err := vq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Venue IDs.
func (vq *VenueQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := vq.Select(venue.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vq *VenueQuery) IDsX(ctx context.Context) []int {
	ids, err := vq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vq *VenueQuery) Count(ctx context.Context) (int, error) {
	if err := vq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return vq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (vq *VenueQuery) CountX(ctx context.Context) int {
	count, err := vq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vq *VenueQuery) Exist(ctx context.Context) (bool, error) {
	if err := vq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return vq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (vq *VenueQuery) ExistX(ctx context.Context) bool {
	exist, err := vq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VenueQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vq *VenueQuery) Clone() *VenueQuery {
	if vq == nil {
		return nil
	}
	return &VenueQuery{
		config:          vq.config,
		limit:           vq.limit,
		offset:          vq.offset,
		order:           append([]OrderFunc{}, vq.order...),
		predicates:      append([]predicate.Venue{}, vq.predicates...),
		withTicker:      vq.withTicker.Clone(),
		withTradingPair: vq.withTradingPair.Clone(),
		withMarket:      vq.withMarket.Clone(),
		// clone intermediate query.
		sql:    vq.sql.Clone(),
		path:   vq.path,
		unique: vq.unique,
	}
}

// WithTicker tells the query-builder to eager-load the nodes that are connected to
// the "ticker" edge. The optional arguments are used to configure the query builder of the edge.
func (vq *VenueQuery) WithTicker(opts ...func(*TickerQuery)) *VenueQuery {
	query := &TickerQuery{config: vq.config}
	for _, opt := range opts {
		opt(query)
	}
	vq.withTicker = query
	return vq
}

// WithTradingPair tells the query-builder to eager-load the nodes that are connected to
// the "trading_pair" edge. The optional arguments are used to configure the query builder of the edge.
func (vq *VenueQuery) WithTradingPair(opts ...func(*TradingPairQuery)) *VenueQuery {
	query := &TradingPairQuery{config: vq.config}
	for _, opt := range opts {
		opt(query)
	}
	vq.withTradingPair = query
	return vq
}

// WithMarket tells the query-builder to eager-load the nodes that are connected to
// the "market" edge. The optional arguments are used to configure the query builder of the edge.
func (vq *VenueQuery) WithMarket(opts ...func(*MarketQuery)) *VenueQuery {
	query := &MarketQuery{config: vq.config}
	for _, opt := range opts {
		opt(query)
	}
	vq.withMarket = query
	return vq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		VenueID string `json:"venue_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Venue.Query().
//		GroupBy(venue.FieldVenueID).
//		Aggregate(entities.Count()).
//		Scan(ctx, &v)
func (vq *VenueQuery) GroupBy(field string, fields ...string) *VenueGroupBy {
	grbuild := &VenueGroupBy{config: vq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := vq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return vq.sqlQuery(ctx), nil
	}
	grbuild.label = venue.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		VenueID string `json:"venue_id,omitempty"`
//	}
//
//	client.Venue.Query().
//		Select(venue.FieldVenueID).
//		Scan(ctx, &v)
func (vq *VenueQuery) Select(fields ...string) *VenueSelect {
	vq.fields = append(vq.fields, fields...)
	selbuild := &VenueSelect{VenueQuery: vq}
	selbuild.label = venue.Label
	selbuild.flds, selbuild.scan = &vq.fields, selbuild.Scan
	return selbuild
}

func (vq *VenueQuery) prepareQuery(ctx context.Context) error {
	for _, f := range vq.fields {
		if !venue.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
		}
	}
	if vq.path != nil {
		prev, err := vq.path(ctx)
		if err != nil {
			return err
		}
		vq.sql = prev
	}
	return nil
}

func (vq *VenueQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Venue, error) {
	var (
		nodes       = []*Venue{}
		_spec       = vq.querySpec()
		loadedTypes = [3]bool{
			vq.withTicker != nil,
			vq.withTradingPair != nil,
			vq.withMarket != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Venue).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Venue{config: vq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = vq.schemaConfig.Venue
	ctx = internal.NewSchemaConfigContext(ctx, vq.schemaConfig)
	if len(vq.modifiers) > 0 {
		_spec.Modifiers = vq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vq.withTicker; query != nil {
		if err := vq.loadTicker(ctx, query, nodes,
			func(n *Venue) { n.Edges.Ticker = []*Ticker{} },
			func(n *Venue, e *Ticker) { n.Edges.Ticker = append(n.Edges.Ticker, e) }); err != nil {
			return nil, err
		}
	}
	if query := vq.withTradingPair; query != nil {
		if err := vq.loadTradingPair(ctx, query, nodes,
			func(n *Venue) { n.Edges.TradingPair = []*TradingPair{} },
			func(n *Venue, e *TradingPair) { n.Edges.TradingPair = append(n.Edges.TradingPair, e) }); err != nil {
			return nil, err
		}
	}
	if query := vq.withMarket; query != nil {
		if err := vq.loadMarket(ctx, query, nodes,
			func(n *Venue) { n.Edges.Market = []*Market{} },
			func(n *Venue, e *Market) { n.Edges.Market = append(n.Edges.Market, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range vq.withNamedTicker {
		if err := vq.loadTicker(ctx, query, nodes,
			func(n *Venue) { n.appendNamedTicker(name) },
			func(n *Venue, e *Ticker) { n.appendNamedTicker(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range vq.withNamedTradingPair {
		if err := vq.loadTradingPair(ctx, query, nodes,
			func(n *Venue) { n.appendNamedTradingPair(name) },
			func(n *Venue, e *TradingPair) { n.appendNamedTradingPair(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range vq.withNamedMarket {
		if err := vq.loadMarket(ctx, query, nodes,
			func(n *Venue) { n.appendNamedMarket(name) },
			func(n *Venue, e *Market) { n.appendNamedMarket(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range vq.loadTotal {
		if err := vq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vq *VenueQuery) loadTicker(ctx context.Context, query *TickerQuery, nodes []*Venue, init func(*Venue), assign func(*Venue, *Ticker)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Venue)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Ticker(func(s *sql.Selector) {
		s.Where(sql.InValues(venue.TickerColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.venue_ticker
		if fk == nil {
			return fmt.Errorf(`foreign-key "venue_ticker" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "venue_ticker" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (vq *VenueQuery) loadTradingPair(ctx context.Context, query *TradingPairQuery, nodes []*Venue, init func(*Venue), assign func(*Venue, *TradingPair)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Venue)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.TradingPair(func(s *sql.Selector) {
		s.Where(sql.InValues(venue.TradingPairColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.venue_trading_pair
		if fk == nil {
			return fmt.Errorf(`foreign-key "venue_trading_pair" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "venue_trading_pair" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (vq *VenueQuery) loadMarket(ctx context.Context, query *MarketQuery, nodes []*Venue, init func(*Venue), assign func(*Venue, *Market)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Venue)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Market(func(s *sql.Selector) {
		s.Where(sql.InValues(venue.MarketColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.venue_market
		if fk == nil {
			return fmt.Errorf(`foreign-key "venue_market" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "venue_market" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (vq *VenueQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vq.querySpec()
	_spec.Node.Schema = vq.schemaConfig.Venue
	ctx = internal.NewSchemaConfigContext(ctx, vq.schemaConfig)
	if len(vq.modifiers) > 0 {
		_spec.Modifiers = vq.modifiers
	}
	_spec.Node.Columns = vq.fields
	if len(vq.fields) > 0 {
		_spec.Unique = vq.unique != nil && *vq.unique
	}
	return sqlgraph.CountNodes(ctx, vq.driver, _spec)
}

func (vq *VenueQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := vq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("entities: check existence: %w", err)
	}
	return n > 0, nil
}

func (vq *VenueQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   venue.Table,
			Columns: venue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: venue.FieldID,
			},
		},
		From:   vq.sql,
		Unique: true,
	}
	if unique := vq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := vq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, venue.FieldID)
		for i := range fields {
			if fields[i] != venue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := vq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vq *VenueQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vq.driver.Dialect())
	t1 := builder.Table(venue.Table)
	columns := vq.fields
	if len(columns) == 0 {
		columns = venue.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vq.sql != nil {
		selector = vq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vq.unique != nil && *vq.unique {
		selector.Distinct()
	}
	t1.Schema(vq.schemaConfig.Venue)
	ctx = internal.NewSchemaConfigContext(ctx, vq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range vq.modifiers {
		m(selector)
	}
	for _, p := range vq.predicates {
		p(selector)
	}
	for _, p := range vq.order {
		p(selector)
	}
	if offset := vq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (vq *VenueQuery) ForUpdate(opts ...sql.LockOption) *VenueQuery {
	if vq.driver.Dialect() == dialect.Postgres {
		vq.Unique(false)
	}
	vq.modifiers = append(vq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return vq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (vq *VenueQuery) ForShare(opts ...sql.LockOption) *VenueQuery {
	if vq.driver.Dialect() == dialect.Postgres {
		vq.Unique(false)
	}
	vq.modifiers = append(vq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return vq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (vq *VenueQuery) Modify(modifiers ...func(s *sql.Selector)) *VenueSelect {
	vq.modifiers = append(vq.modifiers, modifiers...)
	return vq.Select()
}

// WithNamedTicker tells the query-builder to eager-load the nodes that are connected to the "ticker"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (vq *VenueQuery) WithNamedTicker(name string, opts ...func(*TickerQuery)) *VenueQuery {
	query := &TickerQuery{config: vq.config}
	for _, opt := range opts {
		opt(query)
	}
	if vq.withNamedTicker == nil {
		vq.withNamedTicker = make(map[string]*TickerQuery)
	}
	vq.withNamedTicker[name] = query
	return vq
}

// WithNamedTradingPair tells the query-builder to eager-load the nodes that are connected to the "trading_pair"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (vq *VenueQuery) WithNamedTradingPair(name string, opts ...func(*TradingPairQuery)) *VenueQuery {
	query := &TradingPairQuery{config: vq.config}
	for _, opt := range opts {
		opt(query)
	}
	if vq.withNamedTradingPair == nil {
		vq.withNamedTradingPair = make(map[string]*TradingPairQuery)
	}
	vq.withNamedTradingPair[name] = query
	return vq
}

// WithNamedMarket tells the query-builder to eager-load the nodes that are connected to the "market"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (vq *VenueQuery) WithNamedMarket(name string, opts ...func(*MarketQuery)) *VenueQuery {
	query := &MarketQuery{config: vq.config}
	for _, opt := range opts {
		opt(query)
	}
	if vq.withNamedMarket == nil {
		vq.withNamedMarket = make(map[string]*MarketQuery)
	}
	vq.withNamedMarket[name] = query
	return vq
}

// VenueGroupBy is the group-by builder for Venue entities.
type VenueGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vgb *VenueGroupBy) Aggregate(fns ...AggregateFunc) *VenueGroupBy {
	vgb.fns = append(vgb.fns, fns...)
	return vgb
}

// Scan applies the group-by query and scans the result into the given value.
func (vgb *VenueGroupBy) Scan(ctx context.Context, v any) error {
	query, err := vgb.path(ctx)
	if err != nil {
		return err
	}
	vgb.sql = query
	return vgb.sqlScan(ctx, v)
}

func (vgb *VenueGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range vgb.fields {
		if !venue.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := vgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (vgb *VenueGroupBy) sqlQuery() *sql.Selector {
	selector := vgb.sql.Select()
	aggregation := make([]string, 0, len(vgb.fns))
	for _, fn := range vgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(vgb.fields)+len(vgb.fns))
		for _, f := range vgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(vgb.fields...)...)
}

// VenueSelect is the builder for selecting fields of Venue entities.
type VenueSelect struct {
	*VenueQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (vs *VenueSelect) Scan(ctx context.Context, v any) error {
	if err := vs.prepareQuery(ctx); err != nil {
		return err
	}
	vs.sql = vs.VenueQuery.sqlQuery(ctx)
	return vs.sqlScan(ctx, v)
}

func (vs *VenueSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := vs.sql.Query()
	if err := vs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (vs *VenueSelect) Modify(modifiers ...func(s *sql.Selector)) *VenueSelect {
	vs.modifiers = append(vs.modifiers, modifiers...)
	return vs
}
