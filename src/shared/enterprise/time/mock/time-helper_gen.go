// Code generated by MockGen. DO NOT EDIT.
// Source: time-helper.go

// Package mock_time is a generated GoMock package.
package mock_time

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockTimeHelper is a mock of TimeHelper interface.
type MockTimeHelper struct {
	ctrl     *gomock.Controller
	recorder *MockTimeHelperMockRecorder
}

// MockTimeHelperMockRecorder is the mock recorder for MockTimeHelper.
type MockTimeHelperMockRecorder struct {
	mock *MockTimeHelper
}

// NewMockTimeHelper creates a new mock instance.
func NewMockTimeHelper(ctrl *gomock.Controller) *MockTimeHelper {
	mock := &MockTimeHelper{ctrl: ctrl}
	mock.recorder = &MockTimeHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeHelper) EXPECT() *MockTimeHelperMockRecorder {
	return m.recorder
}

// SleepOrWaitForContextGetCancelled mocks base method.
func (m *MockTimeHelper) SleepOrWaitForContextGetCancelled(ctx context.Context, delay time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SleepOrWaitForContextGetCancelled", ctx, delay)
}

// SleepOrWaitForContextGetCancelled indicates an expected call of SleepOrWaitForContextGetCancelled.
func (mr *MockTimeHelperMockRecorder) SleepOrWaitForContextGetCancelled(ctx, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SleepOrWaitForContextGetCancelled", reflect.TypeOf((*MockTimeHelper)(nil).SleepOrWaitForContextGetCancelled), ctx, delay)
}

// WaitUntilCancelled mocks base method.
func (m *MockTimeHelper) WaitUntilCancelled(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitUntilCancelled", ctx)
}

// WaitUntilCancelled indicates an expected call of WaitUntilCancelled.
func (mr *MockTimeHelperMockRecorder) WaitUntilCancelled(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilCancelled", reflect.TypeOf((*MockTimeHelper)(nil).WaitUntilCancelled), ctx)
}
