// Code generated by ent, DO NOT EDIT.

package entities

import (
	"github.com/omiga-group/omiga/src/venue/shared/entities/currency"
	"github.com/omiga-group/omiga/src/venue/shared/entities/market"
	"github.com/omiga-group/omiga/src/venue/shared/entities/outbox"
	"github.com/omiga-group/omiga/src/venue/shared/entities/predicate"
	"github.com/omiga-group/omiga/src/venue/shared/entities/ticker"
	"github.com/omiga-group/omiga/src/venue/shared/entities/tradingpair"
	"github.com/omiga-group/omiga/src/venue/shared/entities/venue"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 6)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   currency.Table,
			Columns: currency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: currency.FieldID,
			},
		},
		Type: "Currency",
		Fields: map[string]*sqlgraph.FieldSpec{
			currency.FieldSymbol: {Type: field.TypeString, Column: currency.FieldSymbol},
			currency.FieldName:   {Type: field.TypeString, Column: currency.FieldName},
			currency.FieldType:   {Type: field.TypeEnum, Column: currency.FieldType},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   market.Table,
			Columns: market.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: market.FieldID,
			},
		},
		Type: "Market",
		Fields: map[string]*sqlgraph.FieldSpec{
			market.FieldName: {Type: field.TypeString, Column: market.FieldName},
			market.FieldType: {Type: field.TypeEnum, Column: market.FieldType},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   outbox.Table,
			Columns: outbox.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: outbox.FieldID,
			},
		},
		Type: "Outbox",
		Fields: map[string]*sqlgraph.FieldSpec{
			outbox.FieldTimestamp:        {Type: field.TypeTime, Column: outbox.FieldTimestamp},
			outbox.FieldTopic:            {Type: field.TypeString, Column: outbox.FieldTopic},
			outbox.FieldKey:              {Type: field.TypeString, Column: outbox.FieldKey},
			outbox.FieldPayload:          {Type: field.TypeBytes, Column: outbox.FieldPayload},
			outbox.FieldHeaders:          {Type: field.TypeJSON, Column: outbox.FieldHeaders},
			outbox.FieldRetryCount:       {Type: field.TypeInt, Column: outbox.FieldRetryCount},
			outbox.FieldStatus:           {Type: field.TypeEnum, Column: outbox.FieldStatus},
			outbox.FieldLastRetry:        {Type: field.TypeTime, Column: outbox.FieldLastRetry},
			outbox.FieldProcessingErrors: {Type: field.TypeJSON, Column: outbox.FieldProcessingErrors},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   ticker.Table,
			Columns: ticker.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ticker.FieldID,
			},
		},
		Type: "Ticker",
		Fields: map[string]*sqlgraph.FieldSpec{
			ticker.FieldBase:                   {Type: field.TypeString, Column: ticker.FieldBase},
			ticker.FieldBaseCoinID:             {Type: field.TypeString, Column: ticker.FieldBaseCoinID},
			ticker.FieldCounter:                {Type: field.TypeString, Column: ticker.FieldCounter},
			ticker.FieldCounterCoinID:          {Type: field.TypeString, Column: ticker.FieldCounterCoinID},
			ticker.FieldMarket:                 {Type: field.TypeJSON, Column: ticker.FieldMarket},
			ticker.FieldLast:                   {Type: field.TypeFloat64, Column: ticker.FieldLast},
			ticker.FieldVolume:                 {Type: field.TypeFloat64, Column: ticker.FieldVolume},
			ticker.FieldConvertedLast:          {Type: field.TypeJSON, Column: ticker.FieldConvertedLast},
			ticker.FieldConvertedVolume:        {Type: field.TypeJSON, Column: ticker.FieldConvertedVolume},
			ticker.FieldTrustScore:             {Type: field.TypeString, Column: ticker.FieldTrustScore},
			ticker.FieldBidAskSpreadPercentage: {Type: field.TypeFloat64, Column: ticker.FieldBidAskSpreadPercentage},
			ticker.FieldTimestamp:              {Type: field.TypeTime, Column: ticker.FieldTimestamp},
			ticker.FieldLastTradedAt:           {Type: field.TypeTime, Column: ticker.FieldLastTradedAt},
			ticker.FieldLastFetchAt:            {Type: field.TypeTime, Column: ticker.FieldLastFetchAt},
			ticker.FieldIsAnomaly:              {Type: field.TypeBool, Column: ticker.FieldIsAnomaly},
			ticker.FieldIsStale:                {Type: field.TypeBool, Column: ticker.FieldIsStale},
			ticker.FieldTradeURL:               {Type: field.TypeString, Column: ticker.FieldTradeURL},
			ticker.FieldTokenInfoURL:           {Type: field.TypeString, Column: ticker.FieldTokenInfoURL},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tradingpair.Table,
			Columns: tradingpair.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tradingpair.FieldID,
			},
		},
		Type: "TradingPair",
		Fields: map[string]*sqlgraph.FieldSpec{
			tradingpair.FieldSymbol:                      {Type: field.TypeString, Column: tradingpair.FieldSymbol},
			tradingpair.FieldBasePriceMinPrecision:       {Type: field.TypeInt, Column: tradingpair.FieldBasePriceMinPrecision},
			tradingpair.FieldBasePriceMaxPrecision:       {Type: field.TypeInt, Column: tradingpair.FieldBasePriceMaxPrecision},
			tradingpair.FieldBaseQuantityMinPrecision:    {Type: field.TypeInt, Column: tradingpair.FieldBaseQuantityMinPrecision},
			tradingpair.FieldBaseQuantityMaxPrecision:    {Type: field.TypeInt, Column: tradingpair.FieldBaseQuantityMaxPrecision},
			tradingpair.FieldCounterPriceMinPrecision:    {Type: field.TypeInt, Column: tradingpair.FieldCounterPriceMinPrecision},
			tradingpair.FieldCounterPriceMaxPrecision:    {Type: field.TypeInt, Column: tradingpair.FieldCounterPriceMaxPrecision},
			tradingpair.FieldCounterQuantityMinPrecision: {Type: field.TypeInt, Column: tradingpair.FieldCounterQuantityMinPrecision},
			tradingpair.FieldCounterQuantityMaxPrecision: {Type: field.TypeInt, Column: tradingpair.FieldCounterQuantityMaxPrecision},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   venue.Table,
			Columns: venue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: venue.FieldID,
			},
		},
		Type: "Venue",
		Fields: map[string]*sqlgraph.FieldSpec{
			venue.FieldVenueID:                     {Type: field.TypeString, Column: venue.FieldVenueID},
			venue.FieldType:                        {Type: field.TypeEnum, Column: venue.FieldType},
			venue.FieldName:                        {Type: field.TypeString, Column: venue.FieldName},
			venue.FieldYearEstablished:             {Type: field.TypeInt, Column: venue.FieldYearEstablished},
			venue.FieldCountry:                     {Type: field.TypeString, Column: venue.FieldCountry},
			venue.FieldImage:                       {Type: field.TypeString, Column: venue.FieldImage},
			venue.FieldLinks:                       {Type: field.TypeJSON, Column: venue.FieldLinks},
			venue.FieldHasTradingIncentive:         {Type: field.TypeBool, Column: venue.FieldHasTradingIncentive},
			venue.FieldCentralized:                 {Type: field.TypeBool, Column: venue.FieldCentralized},
			venue.FieldPublicNotice:                {Type: field.TypeString, Column: venue.FieldPublicNotice},
			venue.FieldAlertNotice:                 {Type: field.TypeString, Column: venue.FieldAlertNotice},
			venue.FieldTrustScore:                  {Type: field.TypeInt, Column: venue.FieldTrustScore},
			venue.FieldTrustScoreRank:              {Type: field.TypeInt, Column: venue.FieldTrustScoreRank},
			venue.FieldTradeVolume24hBtc:           {Type: field.TypeFloat64, Column: venue.FieldTradeVolume24hBtc},
			venue.FieldTradeVolume24hBtcNormalized: {Type: field.TypeFloat64, Column: venue.FieldTradeVolume24hBtcNormalized},
			venue.FieldMakerFee:                    {Type: field.TypeFloat64, Column: venue.FieldMakerFee},
			venue.FieldTakerFee:                    {Type: field.TypeFloat64, Column: venue.FieldTakerFee},
			venue.FieldSpreadFee:                   {Type: field.TypeBool, Column: venue.FieldSpreadFee},
			venue.FieldSupportAPI:                  {Type: field.TypeBool, Column: venue.FieldSupportAPI},
		},
	}
	graph.MustAddE(
		"currency_base",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currency.CurrencyBaseTable,
			Columns: []string{currency.CurrencyBaseColumn},
			Bidi:    false,
		},
		"Currency",
		"TradingPair",
	)
	graph.MustAddE(
		"currency_counter",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   currency.CurrencyCounterTable,
			Columns: []string{currency.CurrencyCounterColumn},
			Bidi:    false,
		},
		"Currency",
		"TradingPair",
	)
	graph.MustAddE(
		"venue",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   market.VenueTable,
			Columns: []string{market.VenueColumn},
			Bidi:    false,
		},
		"Market",
		"Venue",
	)
	graph.MustAddE(
		"trading_pair",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   market.TradingPairTable,
			Columns: market.TradingPairPrimaryKey,
			Bidi:    false,
		},
		"Market",
		"TradingPair",
	)
	graph.MustAddE(
		"venue",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticker.VenueTable,
			Columns: []string{ticker.VenueColumn},
			Bidi:    false,
		},
		"Ticker",
		"Venue",
	)
	graph.MustAddE(
		"venue",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.VenueTable,
			Columns: []string{tradingpair.VenueColumn},
			Bidi:    false,
		},
		"TradingPair",
		"Venue",
	)
	graph.MustAddE(
		"base",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.BaseTable,
			Columns: []string{tradingpair.BaseColumn},
			Bidi:    false,
		},
		"TradingPair",
		"Currency",
	)
	graph.MustAddE(
		"counter",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.CounterTable,
			Columns: []string{tradingpair.CounterColumn},
			Bidi:    false,
		},
		"TradingPair",
		"Currency",
	)
	graph.MustAddE(
		"market",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tradingpair.MarketTable,
			Columns: tradingpair.MarketPrimaryKey,
			Bidi:    false,
		},
		"TradingPair",
		"Market",
	)
	graph.MustAddE(
		"ticker",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.TickerTable,
			Columns: []string{venue.TickerColumn},
			Bidi:    false,
		},
		"Venue",
		"Ticker",
	)
	graph.MustAddE(
		"trading_pair",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.TradingPairTable,
			Columns: []string{venue.TradingPairColumn},
			Bidi:    false,
		},
		"Venue",
		"TradingPair",
	)
	graph.MustAddE(
		"market",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   venue.MarketTable,
			Columns: []string{venue.MarketColumn},
			Bidi:    false,
		},
		"Venue",
		"Market",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (cq *CurrencyQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CurrencyQuery builder.
func (cq *CurrencyQuery) Filter() *CurrencyFilter {
	return &CurrencyFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CurrencyMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CurrencyMutation builder.
func (m *CurrencyMutation) Filter() *CurrencyFilter {
	return &CurrencyFilter{config: m.config, predicateAdder: m}
}

// CurrencyFilter provides a generic filtering capability at runtime for CurrencyQuery.
type CurrencyFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CurrencyFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *CurrencyFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(currency.FieldID))
}

// WhereSymbol applies the entql string predicate on the symbol field.
func (f *CurrencyFilter) WhereSymbol(p entql.StringP) {
	f.Where(p.Field(currency.FieldSymbol))
}

// WhereName applies the entql string predicate on the name field.
func (f *CurrencyFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(currency.FieldName))
}

// WhereType applies the entql string predicate on the type field.
func (f *CurrencyFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(currency.FieldType))
}

// WhereHasCurrencyBase applies a predicate to check if query has an edge currency_base.
func (f *CurrencyFilter) WhereHasCurrencyBase() {
	f.Where(entql.HasEdge("currency_base"))
}

// WhereHasCurrencyBaseWith applies a predicate to check if query has an edge currency_base with a given conditions (other predicates).
func (f *CurrencyFilter) WhereHasCurrencyBaseWith(preds ...predicate.TradingPair) {
	f.Where(entql.HasEdgeWith("currency_base", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCurrencyCounter applies a predicate to check if query has an edge currency_counter.
func (f *CurrencyFilter) WhereHasCurrencyCounter() {
	f.Where(entql.HasEdge("currency_counter"))
}

// WhereHasCurrencyCounterWith applies a predicate to check if query has an edge currency_counter with a given conditions (other predicates).
func (f *CurrencyFilter) WhereHasCurrencyCounterWith(preds ...predicate.TradingPair) {
	f.Where(entql.HasEdgeWith("currency_counter", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (mq *MarketQuery) addPredicate(pred func(s *sql.Selector)) {
	mq.predicates = append(mq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MarketQuery builder.
func (mq *MarketQuery) Filter() *MarketFilter {
	return &MarketFilter{config: mq.config, predicateAdder: mq}
}

// addPredicate implements the predicateAdder interface.
func (m *MarketMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MarketMutation builder.
func (m *MarketMutation) Filter() *MarketFilter {
	return &MarketFilter{config: m.config, predicateAdder: m}
}

// MarketFilter provides a generic filtering capability at runtime for MarketQuery.
type MarketFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MarketFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *MarketFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(market.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *MarketFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(market.FieldName))
}

// WhereType applies the entql string predicate on the type field.
func (f *MarketFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(market.FieldType))
}

// WhereHasVenue applies a predicate to check if query has an edge venue.
func (f *MarketFilter) WhereHasVenue() {
	f.Where(entql.HasEdge("venue"))
}

// WhereHasVenueWith applies a predicate to check if query has an edge venue with a given conditions (other predicates).
func (f *MarketFilter) WhereHasVenueWith(preds ...predicate.Venue) {
	f.Where(entql.HasEdgeWith("venue", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTradingPair applies a predicate to check if query has an edge trading_pair.
func (f *MarketFilter) WhereHasTradingPair() {
	f.Where(entql.HasEdge("trading_pair"))
}

// WhereHasTradingPairWith applies a predicate to check if query has an edge trading_pair with a given conditions (other predicates).
func (f *MarketFilter) WhereHasTradingPairWith(preds ...predicate.TradingPair) {
	f.Where(entql.HasEdgeWith("trading_pair", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oq *OutboxQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OutboxQuery builder.
func (oq *OutboxQuery) Filter() *OutboxFilter {
	return &OutboxFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OutboxMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OutboxMutation builder.
func (m *OutboxMutation) Filter() *OutboxFilter {
	return &OutboxFilter{config: m.config, predicateAdder: m}
}

// OutboxFilter provides a generic filtering capability at runtime for OutboxQuery.
type OutboxFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OutboxFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *OutboxFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(outbox.FieldID))
}

// WhereTimestamp applies the entql time.Time predicate on the timestamp field.
func (f *OutboxFilter) WhereTimestamp(p entql.TimeP) {
	f.Where(p.Field(outbox.FieldTimestamp))
}

// WhereTopic applies the entql string predicate on the topic field.
func (f *OutboxFilter) WhereTopic(p entql.StringP) {
	f.Where(p.Field(outbox.FieldTopic))
}

// WhereKey applies the entql string predicate on the key field.
func (f *OutboxFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(outbox.FieldKey))
}

// WherePayload applies the entql []byte predicate on the payload field.
func (f *OutboxFilter) WherePayload(p entql.BytesP) {
	f.Where(p.Field(outbox.FieldPayload))
}

// WhereHeaders applies the entql json.RawMessage predicate on the headers field.
func (f *OutboxFilter) WhereHeaders(p entql.BytesP) {
	f.Where(p.Field(outbox.FieldHeaders))
}

// WhereRetryCount applies the entql int predicate on the retry_count field.
func (f *OutboxFilter) WhereRetryCount(p entql.IntP) {
	f.Where(p.Field(outbox.FieldRetryCount))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *OutboxFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(outbox.FieldStatus))
}

// WhereLastRetry applies the entql time.Time predicate on the last_retry field.
func (f *OutboxFilter) WhereLastRetry(p entql.TimeP) {
	f.Where(p.Field(outbox.FieldLastRetry))
}

// WhereProcessingErrors applies the entql json.RawMessage predicate on the processing_errors field.
func (f *OutboxFilter) WhereProcessingErrors(p entql.BytesP) {
	f.Where(p.Field(outbox.FieldProcessingErrors))
}

// addPredicate implements the predicateAdder interface.
func (tq *TickerQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TickerQuery builder.
func (tq *TickerQuery) Filter() *TickerFilter {
	return &TickerFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TickerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TickerMutation builder.
func (m *TickerMutation) Filter() *TickerFilter {
	return &TickerFilter{config: m.config, predicateAdder: m}
}

// TickerFilter provides a generic filtering capability at runtime for TickerQuery.
type TickerFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TickerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TickerFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(ticker.FieldID))
}

// WhereBase applies the entql string predicate on the base field.
func (f *TickerFilter) WhereBase(p entql.StringP) {
	f.Where(p.Field(ticker.FieldBase))
}

// WhereBaseCoinID applies the entql string predicate on the base_coin_id field.
func (f *TickerFilter) WhereBaseCoinID(p entql.StringP) {
	f.Where(p.Field(ticker.FieldBaseCoinID))
}

// WhereCounter applies the entql string predicate on the counter field.
func (f *TickerFilter) WhereCounter(p entql.StringP) {
	f.Where(p.Field(ticker.FieldCounter))
}

// WhereCounterCoinID applies the entql string predicate on the counter_coin_id field.
func (f *TickerFilter) WhereCounterCoinID(p entql.StringP) {
	f.Where(p.Field(ticker.FieldCounterCoinID))
}

// WhereMarket applies the entql json.RawMessage predicate on the market field.
func (f *TickerFilter) WhereMarket(p entql.BytesP) {
	f.Where(p.Field(ticker.FieldMarket))
}

// WhereLast applies the entql float64 predicate on the last field.
func (f *TickerFilter) WhereLast(p entql.Float64P) {
	f.Where(p.Field(ticker.FieldLast))
}

// WhereVolume applies the entql float64 predicate on the volume field.
func (f *TickerFilter) WhereVolume(p entql.Float64P) {
	f.Where(p.Field(ticker.FieldVolume))
}

// WhereConvertedLast applies the entql json.RawMessage predicate on the converted_last field.
func (f *TickerFilter) WhereConvertedLast(p entql.BytesP) {
	f.Where(p.Field(ticker.FieldConvertedLast))
}

// WhereConvertedVolume applies the entql json.RawMessage predicate on the converted_volume field.
func (f *TickerFilter) WhereConvertedVolume(p entql.BytesP) {
	f.Where(p.Field(ticker.FieldConvertedVolume))
}

// WhereTrustScore applies the entql string predicate on the trust_score field.
func (f *TickerFilter) WhereTrustScore(p entql.StringP) {
	f.Where(p.Field(ticker.FieldTrustScore))
}

// WhereBidAskSpreadPercentage applies the entql float64 predicate on the bid_ask_spread_percentage field.
func (f *TickerFilter) WhereBidAskSpreadPercentage(p entql.Float64P) {
	f.Where(p.Field(ticker.FieldBidAskSpreadPercentage))
}

// WhereTimestamp applies the entql time.Time predicate on the timestamp field.
func (f *TickerFilter) WhereTimestamp(p entql.TimeP) {
	f.Where(p.Field(ticker.FieldTimestamp))
}

// WhereLastTradedAt applies the entql time.Time predicate on the last_traded_at field.
func (f *TickerFilter) WhereLastTradedAt(p entql.TimeP) {
	f.Where(p.Field(ticker.FieldLastTradedAt))
}

// WhereLastFetchAt applies the entql time.Time predicate on the last_fetch_at field.
func (f *TickerFilter) WhereLastFetchAt(p entql.TimeP) {
	f.Where(p.Field(ticker.FieldLastFetchAt))
}

// WhereIsAnomaly applies the entql bool predicate on the is_anomaly field.
func (f *TickerFilter) WhereIsAnomaly(p entql.BoolP) {
	f.Where(p.Field(ticker.FieldIsAnomaly))
}

// WhereIsStale applies the entql bool predicate on the is_stale field.
func (f *TickerFilter) WhereIsStale(p entql.BoolP) {
	f.Where(p.Field(ticker.FieldIsStale))
}

// WhereTradeURL applies the entql string predicate on the trade_url field.
func (f *TickerFilter) WhereTradeURL(p entql.StringP) {
	f.Where(p.Field(ticker.FieldTradeURL))
}

// WhereTokenInfoURL applies the entql string predicate on the token_info_url field.
func (f *TickerFilter) WhereTokenInfoURL(p entql.StringP) {
	f.Where(p.Field(ticker.FieldTokenInfoURL))
}

// WhereHasVenue applies a predicate to check if query has an edge venue.
func (f *TickerFilter) WhereHasVenue() {
	f.Where(entql.HasEdge("venue"))
}

// WhereHasVenueWith applies a predicate to check if query has an edge venue with a given conditions (other predicates).
func (f *TickerFilter) WhereHasVenueWith(preds ...predicate.Venue) {
	f.Where(entql.HasEdgeWith("venue", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tpq *TradingPairQuery) addPredicate(pred func(s *sql.Selector)) {
	tpq.predicates = append(tpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TradingPairQuery builder.
func (tpq *TradingPairQuery) Filter() *TradingPairFilter {
	return &TradingPairFilter{config: tpq.config, predicateAdder: tpq}
}

// addPredicate implements the predicateAdder interface.
func (m *TradingPairMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TradingPairMutation builder.
func (m *TradingPairMutation) Filter() *TradingPairFilter {
	return &TradingPairFilter{config: m.config, predicateAdder: m}
}

// TradingPairFilter provides a generic filtering capability at runtime for TradingPairQuery.
type TradingPairFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TradingPairFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TradingPairFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(tradingpair.FieldID))
}

// WhereSymbol applies the entql string predicate on the symbol field.
func (f *TradingPairFilter) WhereSymbol(p entql.StringP) {
	f.Where(p.Field(tradingpair.FieldSymbol))
}

// WhereBasePriceMinPrecision applies the entql int predicate on the base_price_min_precision field.
func (f *TradingPairFilter) WhereBasePriceMinPrecision(p entql.IntP) {
	f.Where(p.Field(tradingpair.FieldBasePriceMinPrecision))
}

// WhereBasePriceMaxPrecision applies the entql int predicate on the base_price_max_precision field.
func (f *TradingPairFilter) WhereBasePriceMaxPrecision(p entql.IntP) {
	f.Where(p.Field(tradingpair.FieldBasePriceMaxPrecision))
}

// WhereBaseQuantityMinPrecision applies the entql int predicate on the base_quantity_min_precision field.
func (f *TradingPairFilter) WhereBaseQuantityMinPrecision(p entql.IntP) {
	f.Where(p.Field(tradingpair.FieldBaseQuantityMinPrecision))
}

// WhereBaseQuantityMaxPrecision applies the entql int predicate on the base_quantity_max_precision field.
func (f *TradingPairFilter) WhereBaseQuantityMaxPrecision(p entql.IntP) {
	f.Where(p.Field(tradingpair.FieldBaseQuantityMaxPrecision))
}

// WhereCounterPriceMinPrecision applies the entql int predicate on the counter_price_min_precision field.
func (f *TradingPairFilter) WhereCounterPriceMinPrecision(p entql.IntP) {
	f.Where(p.Field(tradingpair.FieldCounterPriceMinPrecision))
}

// WhereCounterPriceMaxPrecision applies the entql int predicate on the counter_price_max_precision field.
func (f *TradingPairFilter) WhereCounterPriceMaxPrecision(p entql.IntP) {
	f.Where(p.Field(tradingpair.FieldCounterPriceMaxPrecision))
}

// WhereCounterQuantityMinPrecision applies the entql int predicate on the counter_quantity_min_precision field.
func (f *TradingPairFilter) WhereCounterQuantityMinPrecision(p entql.IntP) {
	f.Where(p.Field(tradingpair.FieldCounterQuantityMinPrecision))
}

// WhereCounterQuantityMaxPrecision applies the entql int predicate on the counter_quantity_max_precision field.
func (f *TradingPairFilter) WhereCounterQuantityMaxPrecision(p entql.IntP) {
	f.Where(p.Field(tradingpair.FieldCounterQuantityMaxPrecision))
}

// WhereHasVenue applies a predicate to check if query has an edge venue.
func (f *TradingPairFilter) WhereHasVenue() {
	f.Where(entql.HasEdge("venue"))
}

// WhereHasVenueWith applies a predicate to check if query has an edge venue with a given conditions (other predicates).
func (f *TradingPairFilter) WhereHasVenueWith(preds ...predicate.Venue) {
	f.Where(entql.HasEdgeWith("venue", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBase applies a predicate to check if query has an edge base.
func (f *TradingPairFilter) WhereHasBase() {
	f.Where(entql.HasEdge("base"))
}

// WhereHasBaseWith applies a predicate to check if query has an edge base with a given conditions (other predicates).
func (f *TradingPairFilter) WhereHasBaseWith(preds ...predicate.Currency) {
	f.Where(entql.HasEdgeWith("base", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCounter applies a predicate to check if query has an edge counter.
func (f *TradingPairFilter) WhereHasCounter() {
	f.Where(entql.HasEdge("counter"))
}

// WhereHasCounterWith applies a predicate to check if query has an edge counter with a given conditions (other predicates).
func (f *TradingPairFilter) WhereHasCounterWith(preds ...predicate.Currency) {
	f.Where(entql.HasEdgeWith("counter", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMarket applies a predicate to check if query has an edge market.
func (f *TradingPairFilter) WhereHasMarket() {
	f.Where(entql.HasEdge("market"))
}

// WhereHasMarketWith applies a predicate to check if query has an edge market with a given conditions (other predicates).
func (f *TradingPairFilter) WhereHasMarketWith(preds ...predicate.Market) {
	f.Where(entql.HasEdgeWith("market", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (vq *VenueQuery) addPredicate(pred func(s *sql.Selector)) {
	vq.predicates = append(vq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VenueQuery builder.
func (vq *VenueQuery) Filter() *VenueFilter {
	return &VenueFilter{config: vq.config, predicateAdder: vq}
}

// addPredicate implements the predicateAdder interface.
func (m *VenueMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VenueMutation builder.
func (m *VenueMutation) Filter() *VenueFilter {
	return &VenueFilter{config: m.config, predicateAdder: m}
}

// VenueFilter provides a generic filtering capability at runtime for VenueQuery.
type VenueFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *VenueFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *VenueFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(venue.FieldID))
}

// WhereVenueID applies the entql string predicate on the venue_id field.
func (f *VenueFilter) WhereVenueID(p entql.StringP) {
	f.Where(p.Field(venue.FieldVenueID))
}

// WhereType applies the entql string predicate on the type field.
func (f *VenueFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(venue.FieldType))
}

// WhereName applies the entql string predicate on the name field.
func (f *VenueFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(venue.FieldName))
}

// WhereYearEstablished applies the entql int predicate on the year_established field.
func (f *VenueFilter) WhereYearEstablished(p entql.IntP) {
	f.Where(p.Field(venue.FieldYearEstablished))
}

// WhereCountry applies the entql string predicate on the country field.
func (f *VenueFilter) WhereCountry(p entql.StringP) {
	f.Where(p.Field(venue.FieldCountry))
}

// WhereImage applies the entql string predicate on the image field.
func (f *VenueFilter) WhereImage(p entql.StringP) {
	f.Where(p.Field(venue.FieldImage))
}

// WhereLinks applies the entql json.RawMessage predicate on the links field.
func (f *VenueFilter) WhereLinks(p entql.BytesP) {
	f.Where(p.Field(venue.FieldLinks))
}

// WhereHasTradingIncentive applies the entql bool predicate on the has_trading_incentive field.
func (f *VenueFilter) WhereHasTradingIncentive(p entql.BoolP) {
	f.Where(p.Field(venue.FieldHasTradingIncentive))
}

// WhereCentralized applies the entql bool predicate on the centralized field.
func (f *VenueFilter) WhereCentralized(p entql.BoolP) {
	f.Where(p.Field(venue.FieldCentralized))
}

// WherePublicNotice applies the entql string predicate on the public_notice field.
func (f *VenueFilter) WherePublicNotice(p entql.StringP) {
	f.Where(p.Field(venue.FieldPublicNotice))
}

// WhereAlertNotice applies the entql string predicate on the alert_notice field.
func (f *VenueFilter) WhereAlertNotice(p entql.StringP) {
	f.Where(p.Field(venue.FieldAlertNotice))
}

// WhereTrustScore applies the entql int predicate on the trust_score field.
func (f *VenueFilter) WhereTrustScore(p entql.IntP) {
	f.Where(p.Field(venue.FieldTrustScore))
}

// WhereTrustScoreRank applies the entql int predicate on the trust_score_rank field.
func (f *VenueFilter) WhereTrustScoreRank(p entql.IntP) {
	f.Where(p.Field(venue.FieldTrustScoreRank))
}

// WhereTradeVolume24hBtc applies the entql float64 predicate on the trade_volume_24h_btc field.
func (f *VenueFilter) WhereTradeVolume24hBtc(p entql.Float64P) {
	f.Where(p.Field(venue.FieldTradeVolume24hBtc))
}

// WhereTradeVolume24hBtcNormalized applies the entql float64 predicate on the trade_volume_24h_btc_normalized field.
func (f *VenueFilter) WhereTradeVolume24hBtcNormalized(p entql.Float64P) {
	f.Where(p.Field(venue.FieldTradeVolume24hBtcNormalized))
}

// WhereMakerFee applies the entql float64 predicate on the maker_fee field.
func (f *VenueFilter) WhereMakerFee(p entql.Float64P) {
	f.Where(p.Field(venue.FieldMakerFee))
}

// WhereTakerFee applies the entql float64 predicate on the taker_fee field.
func (f *VenueFilter) WhereTakerFee(p entql.Float64P) {
	f.Where(p.Field(venue.FieldTakerFee))
}

// WhereSpreadFee applies the entql bool predicate on the spread_fee field.
func (f *VenueFilter) WhereSpreadFee(p entql.BoolP) {
	f.Where(p.Field(venue.FieldSpreadFee))
}

// WhereSupportAPI applies the entql bool predicate on the support_api field.
func (f *VenueFilter) WhereSupportAPI(p entql.BoolP) {
	f.Where(p.Field(venue.FieldSupportAPI))
}

// WhereHasTicker applies a predicate to check if query has an edge ticker.
func (f *VenueFilter) WhereHasTicker() {
	f.Where(entql.HasEdge("ticker"))
}

// WhereHasTickerWith applies a predicate to check if query has an edge ticker with a given conditions (other predicates).
func (f *VenueFilter) WhereHasTickerWith(preds ...predicate.Ticker) {
	f.Where(entql.HasEdgeWith("ticker", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTradingPair applies a predicate to check if query has an edge trading_pair.
func (f *VenueFilter) WhereHasTradingPair() {
	f.Where(entql.HasEdge("trading_pair"))
}

// WhereHasTradingPairWith applies a predicate to check if query has an edge trading_pair with a given conditions (other predicates).
func (f *VenueFilter) WhereHasTradingPairWith(preds ...predicate.TradingPair) {
	f.Where(entql.HasEdgeWith("trading_pair", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMarket applies a predicate to check if query has an edge market.
func (f *VenueFilter) WhereHasMarket() {
	f.Where(entql.HasEdge("market"))
}

// WhereHasMarketWith applies a predicate to check if query has an edge market with a given conditions (other predicates).
func (f *VenueFilter) WhereHasMarketWith(preds ...predicate.Market) {
	f.Where(entql.HasEdgeWith("market", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
