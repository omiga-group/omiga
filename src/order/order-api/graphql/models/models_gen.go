// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"

	"github.com/omiga-group/omiga/src/order/shared/repositories"
)

type CancelOrderInput struct {
	ClientMutationID *string `json:"clientMutationId"`
	ID               int     `json:"id"`
}

type CurrencyInput struct {
	Name         string `json:"name"`
	Code         string `json:"code"`
	MaxPrecision int    `json:"maxPrecision"`
	Digital      bool   `json:"digital"`
}

type ExchangeInput struct {
	ID string `json:"id"`
}

type MoneyInput struct {
	Amount   int            `json:"amount"`
	Scale    int            `json:"scale"`
	Currency *CurrencyInput `json:"currency"`
}

type OrderDetailsInput struct {
	BaseCurrency    *CurrencyInput `json:"baseCurrency"`
	CounterCurrency *CurrencyInput `json:"counterCurrency"`
	Type            OrderType      `json:"type"`
	Side            OrderSide      `json:"side"`
	Quantity        *MoneyInput    `json:"quantity"`
	Price           *MoneyInput    `json:"price"`
}

type OrderPayload struct {
	ClientMutationID *string             `json:"clientMutationId"`
	Order            *repositories.Order `json:"order"`
}

type SubmitOrderInput struct {
	ClientMutationID   *string            `json:"clientMutationId"`
	OrderDetails       *OrderDetailsInput `json:"orderDetails"`
	PreferredExchanges []*ExchangeInput   `json:"preferredExchanges"`
}

type OrderSide string

const (
	OrderSideBid OrderSide = "BID"
	OrderSideAsk OrderSide = "ASK"
)

var AllOrderSide = []OrderSide{
	OrderSideBid,
	OrderSideAsk,
}

func (e OrderSide) IsValid() bool {
	switch e {
	case OrderSideBid, OrderSideAsk:
		return true
	}
	return false
}

func (e OrderSide) String() string {
	return string(e)
}

func (e *OrderSide) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderSide(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderSide", str)
	}
	return nil
}

func (e OrderSide) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderType string

const (
	OrderTypeInstant      OrderType = "INSTANT"
	OrderTypeMarket       OrderType = "MARKET"
	OrderTypeLimit        OrderType = "LIMIT"
	OrderTypeStop         OrderType = "STOP"
	OrderTypeTrailingStop OrderType = "TRAILING_STOP"
)

var AllOrderType = []OrderType{
	OrderTypeInstant,
	OrderTypeMarket,
	OrderTypeLimit,
	OrderTypeStop,
	OrderTypeTrailingStop,
}

func (e OrderType) IsValid() bool {
	switch e {
	case OrderTypeInstant, OrderTypeMarket, OrderTypeLimit, OrderTypeStop, OrderTypeTrailingStop:
		return true
	}
	return false
}

func (e OrderType) String() string {
	return string(e)
}

func (e *OrderType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderType", str)
	}
	return nil
}

func (e OrderType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OutboxStatus string

const (
	OutboxStatusPending   OutboxStatus = "PENDING"
	OutboxStatusSucceeded OutboxStatus = "SUCCEEDED"
	OutboxStatusFailed    OutboxStatus = "FAILED"
)

var AllOutboxStatus = []OutboxStatus{
	OutboxStatusPending,
	OutboxStatusSucceeded,
	OutboxStatusFailed,
}

func (e OutboxStatus) IsValid() bool {
	switch e {
	case OutboxStatusPending, OutboxStatusSucceeded, OutboxStatusFailed:
		return true
	}
	return false
}

func (e OutboxStatus) String() string {
	return string(e)
}

func (e *OutboxStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OutboxStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OutboxStatus", str)
	}
	return nil
}

func (e OutboxStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
