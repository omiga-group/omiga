// Code generated by ent, DO NOT EDIT.

package repositories

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/exchange"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/internal"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/predicate"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/tradingpairs"
)

// TradingPairsUpdate is the builder for updating TradingPairs entities.
type TradingPairsUpdate struct {
	config
	hooks     []Hook
	mutation  *TradingPairsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TradingPairsUpdate builder.
func (tpu *TradingPairsUpdate) Where(ps ...predicate.TradingPairs) *TradingPairsUpdate {
	tpu.mutation.Where(ps...)
	return tpu
}

// SetSymbol sets the "symbol" field.
func (tpu *TradingPairsUpdate) SetSymbol(s string) *TradingPairsUpdate {
	tpu.mutation.SetSymbol(s)
	return tpu
}

// SetBase sets the "base" field.
func (tpu *TradingPairsUpdate) SetBase(s string) *TradingPairsUpdate {
	tpu.mutation.SetBase(s)
	return tpu
}

// SetBasePrecision sets the "base_precision" field.
func (tpu *TradingPairsUpdate) SetBasePrecision(i int) *TradingPairsUpdate {
	tpu.mutation.ResetBasePrecision()
	tpu.mutation.SetBasePrecision(i)
	return tpu
}

// AddBasePrecision adds i to the "base_precision" field.
func (tpu *TradingPairsUpdate) AddBasePrecision(i int) *TradingPairsUpdate {
	tpu.mutation.AddBasePrecision(i)
	return tpu
}

// SetCounter sets the "counter" field.
func (tpu *TradingPairsUpdate) SetCounter(s string) *TradingPairsUpdate {
	tpu.mutation.SetCounter(s)
	return tpu
}

// SetCounterPrecision sets the "counter_precision" field.
func (tpu *TradingPairsUpdate) SetCounterPrecision(i int) *TradingPairsUpdate {
	tpu.mutation.ResetCounterPrecision()
	tpu.mutation.SetCounterPrecision(i)
	return tpu
}

// AddCounterPrecision adds i to the "counter_precision" field.
func (tpu *TradingPairsUpdate) AddCounterPrecision(i int) *TradingPairsUpdate {
	tpu.mutation.AddCounterPrecision(i)
	return tpu
}

// SetExchangeID sets the "exchange" edge to the Exchange entity by ID.
func (tpu *TradingPairsUpdate) SetExchangeID(id int) *TradingPairsUpdate {
	tpu.mutation.SetExchangeID(id)
	return tpu
}

// SetExchange sets the "exchange" edge to the Exchange entity.
func (tpu *TradingPairsUpdate) SetExchange(e *Exchange) *TradingPairsUpdate {
	return tpu.SetExchangeID(e.ID)
}

// Mutation returns the TradingPairsMutation object of the builder.
func (tpu *TradingPairsUpdate) Mutation() *TradingPairsMutation {
	return tpu.mutation
}

// ClearExchange clears the "exchange" edge to the Exchange entity.
func (tpu *TradingPairsUpdate) ClearExchange() *TradingPairsUpdate {
	tpu.mutation.ClearExchange()
	return tpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tpu *TradingPairsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tpu.hooks) == 0 {
		if err = tpu.check(); err != nil {
			return 0, err
		}
		affected, err = tpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TradingPairsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tpu.check(); err != nil {
				return 0, err
			}
			tpu.mutation = mutation
			affected, err = tpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tpu.hooks) - 1; i >= 0; i-- {
			if tpu.hooks[i] == nil {
				return 0, fmt.Errorf("repositories: uninitialized hook (forgotten import repositories/runtime?)")
			}
			mut = tpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpu *TradingPairsUpdate) SaveX(ctx context.Context) int {
	affected, err := tpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpu *TradingPairsUpdate) Exec(ctx context.Context) error {
	_, err := tpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpu *TradingPairsUpdate) ExecX(ctx context.Context) {
	if err := tpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpu *TradingPairsUpdate) check() error {
	if _, ok := tpu.mutation.ExchangeID(); tpu.mutation.ExchangeCleared() && !ok {
		return errors.New(`repositories: clearing a required unique edge "TradingPairs.exchange"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tpu *TradingPairsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TradingPairsUpdate {
	tpu.modifiers = append(tpu.modifiers, modifiers...)
	return tpu
}

func (tpu *TradingPairsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tradingpairs.Table,
			Columns: tradingpairs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tradingpairs.FieldID,
			},
		},
	}
	if ps := tpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpu.mutation.Symbol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tradingpairs.FieldSymbol,
		})
	}
	if value, ok := tpu.mutation.Base(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tradingpairs.FieldBase,
		})
	}
	if value, ok := tpu.mutation.BasePrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpairs.FieldBasePrecision,
		})
	}
	if value, ok := tpu.mutation.AddedBasePrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpairs.FieldBasePrecision,
		})
	}
	if value, ok := tpu.mutation.Counter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tradingpairs.FieldCounter,
		})
	}
	if value, ok := tpu.mutation.CounterPrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpairs.FieldCounterPrecision,
		})
	}
	if value, ok := tpu.mutation.AddedCounterPrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpairs.FieldCounterPrecision,
		})
	}
	if tpu.mutation.ExchangeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpairs.ExchangeTable,
			Columns: []string{tradingpairs.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exchange.FieldID,
				},
			},
		}
		edge.Schema = tpu.schemaConfig.TradingPairs
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.ExchangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpairs.ExchangeTable,
			Columns: []string{tradingpairs.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exchange.FieldID,
				},
			},
		}
		edge.Schema = tpu.schemaConfig.TradingPairs
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tpu.schemaConfig.TradingPairs
	ctx = internal.NewSchemaConfigContext(ctx, tpu.schemaConfig)
	_spec.Modifiers = tpu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, tpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tradingpairs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TradingPairsUpdateOne is the builder for updating a single TradingPairs entity.
type TradingPairsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TradingPairsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetSymbol sets the "symbol" field.
func (tpuo *TradingPairsUpdateOne) SetSymbol(s string) *TradingPairsUpdateOne {
	tpuo.mutation.SetSymbol(s)
	return tpuo
}

// SetBase sets the "base" field.
func (tpuo *TradingPairsUpdateOne) SetBase(s string) *TradingPairsUpdateOne {
	tpuo.mutation.SetBase(s)
	return tpuo
}

// SetBasePrecision sets the "base_precision" field.
func (tpuo *TradingPairsUpdateOne) SetBasePrecision(i int) *TradingPairsUpdateOne {
	tpuo.mutation.ResetBasePrecision()
	tpuo.mutation.SetBasePrecision(i)
	return tpuo
}

// AddBasePrecision adds i to the "base_precision" field.
func (tpuo *TradingPairsUpdateOne) AddBasePrecision(i int) *TradingPairsUpdateOne {
	tpuo.mutation.AddBasePrecision(i)
	return tpuo
}

// SetCounter sets the "counter" field.
func (tpuo *TradingPairsUpdateOne) SetCounter(s string) *TradingPairsUpdateOne {
	tpuo.mutation.SetCounter(s)
	return tpuo
}

// SetCounterPrecision sets the "counter_precision" field.
func (tpuo *TradingPairsUpdateOne) SetCounterPrecision(i int) *TradingPairsUpdateOne {
	tpuo.mutation.ResetCounterPrecision()
	tpuo.mutation.SetCounterPrecision(i)
	return tpuo
}

// AddCounterPrecision adds i to the "counter_precision" field.
func (tpuo *TradingPairsUpdateOne) AddCounterPrecision(i int) *TradingPairsUpdateOne {
	tpuo.mutation.AddCounterPrecision(i)
	return tpuo
}

// SetExchangeID sets the "exchange" edge to the Exchange entity by ID.
func (tpuo *TradingPairsUpdateOne) SetExchangeID(id int) *TradingPairsUpdateOne {
	tpuo.mutation.SetExchangeID(id)
	return tpuo
}

// SetExchange sets the "exchange" edge to the Exchange entity.
func (tpuo *TradingPairsUpdateOne) SetExchange(e *Exchange) *TradingPairsUpdateOne {
	return tpuo.SetExchangeID(e.ID)
}

// Mutation returns the TradingPairsMutation object of the builder.
func (tpuo *TradingPairsUpdateOne) Mutation() *TradingPairsMutation {
	return tpuo.mutation
}

// ClearExchange clears the "exchange" edge to the Exchange entity.
func (tpuo *TradingPairsUpdateOne) ClearExchange() *TradingPairsUpdateOne {
	tpuo.mutation.ClearExchange()
	return tpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tpuo *TradingPairsUpdateOne) Select(field string, fields ...string) *TradingPairsUpdateOne {
	tpuo.fields = append([]string{field}, fields...)
	return tpuo
}

// Save executes the query and returns the updated TradingPairs entity.
func (tpuo *TradingPairsUpdateOne) Save(ctx context.Context) (*TradingPairs, error) {
	var (
		err  error
		node *TradingPairs
	)
	if len(tpuo.hooks) == 0 {
		if err = tpuo.check(); err != nil {
			return nil, err
		}
		node, err = tpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TradingPairsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tpuo.check(); err != nil {
				return nil, err
			}
			tpuo.mutation = mutation
			node, err = tpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tpuo.hooks) - 1; i >= 0; i-- {
			if tpuo.hooks[i] == nil {
				return nil, fmt.Errorf("repositories: uninitialized hook (forgotten import repositories/runtime?)")
			}
			mut = tpuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tpuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TradingPairs)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TradingPairsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpuo *TradingPairsUpdateOne) SaveX(ctx context.Context) *TradingPairs {
	node, err := tpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tpuo *TradingPairsUpdateOne) Exec(ctx context.Context) error {
	_, err := tpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpuo *TradingPairsUpdateOne) ExecX(ctx context.Context) {
	if err := tpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpuo *TradingPairsUpdateOne) check() error {
	if _, ok := tpuo.mutation.ExchangeID(); tpuo.mutation.ExchangeCleared() && !ok {
		return errors.New(`repositories: clearing a required unique edge "TradingPairs.exchange"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tpuo *TradingPairsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TradingPairsUpdateOne {
	tpuo.modifiers = append(tpuo.modifiers, modifiers...)
	return tpuo
}

func (tpuo *TradingPairsUpdateOne) sqlSave(ctx context.Context) (_node *TradingPairs, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tradingpairs.Table,
			Columns: tradingpairs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tradingpairs.FieldID,
			},
		},
	}
	id, ok := tpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`repositories: missing "TradingPairs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tradingpairs.FieldID)
		for _, f := range fields {
			if !tradingpairs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("repositories: invalid field %q for query", f)}
			}
			if f != tradingpairs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpuo.mutation.Symbol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tradingpairs.FieldSymbol,
		})
	}
	if value, ok := tpuo.mutation.Base(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tradingpairs.FieldBase,
		})
	}
	if value, ok := tpuo.mutation.BasePrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpairs.FieldBasePrecision,
		})
	}
	if value, ok := tpuo.mutation.AddedBasePrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpairs.FieldBasePrecision,
		})
	}
	if value, ok := tpuo.mutation.Counter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tradingpairs.FieldCounter,
		})
	}
	if value, ok := tpuo.mutation.CounterPrecision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpairs.FieldCounterPrecision,
		})
	}
	if value, ok := tpuo.mutation.AddedCounterPrecision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpairs.FieldCounterPrecision,
		})
	}
	if tpuo.mutation.ExchangeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpairs.ExchangeTable,
			Columns: []string{tradingpairs.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exchange.FieldID,
				},
			},
		}
		edge.Schema = tpuo.schemaConfig.TradingPairs
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.ExchangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpairs.ExchangeTable,
			Columns: []string{tradingpairs.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exchange.FieldID,
				},
			},
		}
		edge.Schema = tpuo.schemaConfig.TradingPairs
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tpuo.schemaConfig.TradingPairs
	ctx = internal.NewSchemaConfigContext(ctx, tpuo.schemaConfig)
	_spec.Modifiers = tpuo.modifiers
	_node = &TradingPairs{config: tpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tradingpairs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
