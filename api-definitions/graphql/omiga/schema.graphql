schema {
  query: Query
  mutation: Mutation
}
scalar Cursor
scalar Time
scalar UUID
type Coin implements Node {
  id: ID!
  symbol: String!
  name: String
}
"A connection to a list of items."
type CoinConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CoinEdge]
  "Total number of coins"
  totalCount: Int
}
"An edge in a connection."
type CoinEdge {
  "The item at the end of the edge"
  node: Coin
  "A cursor for use in pagination"
  cursor: Cursor!
}
type ConvertedDetails {
  btc: Float!
  eth: Float!
  usd: Float!
}
type Exchange implements Node {
  id: ID!
  exchangeId: String!
  name: String
  yearEstablished: Int
  country: String
  image: String
  links: Links!
  hasTradingIncentive: Boolean
  centralized: Boolean
  publicNotice: String
  alertNotice: String
  trustScore: Int
  trustScoreRank: Int
  tradeVolume24hBtc: Float
  tradeVolume24hBtcNormalized: Float
  tickers: [Ticker!]!
  tradingPairs: [TradingPair!]!
  markets: [Market!]!
  makerFee: Float
  takerFee: Float
  spreadFee: Boolean
  supportAPI: Boolean
}
"A connection to a list of items."
type ExchangeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ExchangeEdge]
  "Total number of exchanges"
  totalCount: Int
}
"An edge in a connection."
type ExchangeEdge {
  "The item at the end of the edge"
  node: Exchange
  "A cursor for use in pagination"
  cursor: Cursor!
}
type Links {
  website: String
  facebook: String
  reddit: String
  twitter: String
  slack: String
  telegram: String
}
type Market implements Node {
  id: ID!
  name: String!
  type: MarketType!
}
type Mutation {
  submitOrder(input: SubmitOrderInput!): OrderPayload
  cancelOrder(input: CancelOrderInput!): OrderPayload
}
type Order implements Node {
  id: ID!
}
"A connection to a list of items."
type OrderConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [OrderEdge]
  "Total number of orders"
  totalCount: Int
}
"An edge in a connection."
type OrderEdge {
  "The item at the end of the edge"
  node: Order
  "A cursor for use in pagination"
  cursor: Cursor!
}
type OrderPayload {
  clientMutationId: String
  order: Order
}
"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: Cursor
  "When paginating forwards, the cursor to continue."
  endCursor: Cursor
}
type Query {
  coin(
    "Ordering directions"
    where: CoinWhereInput
  ): Coin
  coins(
    "Returns the items in the list that come after the specified cursor."
    after: Cursor,
    "Returns the first n items from the list."
    first: Int,
    "Returns the items in the list that come before the specified cursor."
    before: Cursor,
    "Returns the last n items from the list."
    last: Int,
    "Ordering directions"
    orderBy: [CoinOrder!],
    "Ordering directions"
    where: CoinWhereInput
  ): CoinConnection
  exchange(
    "Ordering directions"
    where: ExchangeWhereInput
  ): Exchange
  exchanges(
    "Returns the items in the list that come after the specified cursor."
    after: Cursor,
    "Returns the first n items from the list."
    first: Int,
    "Returns the items in the list that come before the specified cursor."
    before: Cursor,
    "Returns the last n items from the list."
    last: Int,
    "Ordering directions"
    orderBy: [ExchangeOrder!],
    "Ordering directions"
    where: ExchangeWhereInput
  ): ExchangeConnection
  order(where: OrderWhereInput): Order
  orders(
    "Returns the items in the list that come after the specified cursor."
    after: Cursor,
    "Returns the first n items from the list."
    first: Int,
    "Returns the items in the list that come before the specified cursor."
    before: Cursor,
    "Returns the last n items from the list."
    last: Int,where: OrderWhereInput  ): OrderConnection
}
type Ticker implements Node {
  id: ID!
  base: String!
  baseCoinId: String
  counter: String!
  counterCoinId: String
  market: TickerMarket
  last: Float
  volume: Float
  convertedLast: ConvertedDetails
  convertedVolume: ConvertedDetails
  trustScore: String
  bidAskSpreadPercentage: Float
  timestamp: Time
  lastTradedAt: Time
  lastFetchAt: Time
  isAnomaly: Boolean
  isStale: Boolean
  tradeUrl: String
  tokenInfoUrl: String
}
type TickerMarket {
  hasTradingIncentive: Boolean!
  identifier: String!
  name: String
}
type TradingPair implements Node {
  id: ID!
  symbol: String!
  base: Coin!
  basePriceMinPrecision: Int
  basePriceMaxPrecision: Int
  baseQuantityMinPrecision: Int
  baseQuantityMaxPrecision: Int
  counter: Coin!
  counterPriceMinPrecision: Int
  counterPriceMaxPrecision: Int
  counterQuantityMinPrecision: Int
  counterQuantityMaxPrecision: Int
  markets: [Market!]!
}
"An object with an ID"
interface Node {
  "The id of the object."
  id: ID
}
enum CoinOrderField {
  symbol
  name
}
enum ExchangeOrderField {
  exchangeId
  name
  yearEstablished
  country
  image
  hasTradingIncentive
  centralized
  publicNotice
  alertNotice
  trustScore
  trustScoreRank
  tradeVolume24hBtc
  tradeVolume24hBtcNormalized
}
enum MarketType {
  SPORT_TRADING
  MARGIN_TRADING
  DERIVATIVES
  EARN
  PERPETUAL
  FUTURES
  WARRANT
  OTC
  YIELD
  P2P
  STRATEGY_TRADING
  SWAP_FARMING
  FAN_TOKEN
  ETF
  NFT
  Swap
}
enum OrderDirection {
  ASC
  DESC
}
enum OrderSide {
  BID
  ASK
}
enum OrderType {
  INSTANT
  MARKET
  LIMIT
  STOP
  TRAILING_STOP
}
enum OutboxStatus {
  PENDING
  SUCCEEDED
  FAILED
}
input CancelOrderInput {
  clientMutationId: String
  id: ID!
}
input CoinOrder {
  direction: OrderDirection!
  field: CoinOrderField
}
"""
CoinWhereInput is used for filtering Coin objects.
Input was generated by ent.
"""
input CoinWhereInput {
  not: CoinWhereInput
  and: [CoinWhereInput!]
  or: [CoinWhereInput!]
  "id field predicates"
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  "symbol field predicates"
  symbol: String
  symbolNEQ: String
  symbolIn: [String!]
  symbolNotIn: [String!]
  symbolGT: String
  symbolGTE: String
  symbolLT: String
  symbolLTE: String
  symbolContains: String
  symbolHasPrefix: String
  symbolHasSuffix: String
  symbolEqualFold: String
  symbolContainsFold: String
  "name field predicates"
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  "coin_base edge predicates"
  hasCoinBase: Boolean
  hasCoinBaseWith: [TradingPairWhereInput!]
  "coin_counter edge predicates"
  hasCoinCounter: Boolean
  hasCoinCounterWith: [TradingPairWhereInput!]
}
input CurrencyInput {
  code: String!
  name: String!
  maxPrecision: Int!
  digital: Boolean!
}
input ExchangeInput {
  id: String!
}
input ExchangeOrder {
  direction: OrderDirection!
  field: ExchangeOrderField
}
"""
ExchangeWhereInput is used for filtering Exchange objects.
Input was generated by ent.
"""
input ExchangeWhereInput {
  not: ExchangeWhereInput
  and: [ExchangeWhereInput!]
  or: [ExchangeWhereInput!]
  "id field predicates"
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  "exchange_id field predicates"
  exchangeID: String
  exchangeIDNEQ: String
  exchangeIDIn: [String!]
  exchangeIDNotIn: [String!]
  exchangeIDGT: String
  exchangeIDGTE: String
  exchangeIDLT: String
  exchangeIDLTE: String
  exchangeIDContains: String
  exchangeIDHasPrefix: String
  exchangeIDHasSuffix: String
  exchangeIDEqualFold: String
  exchangeIDContainsFold: String
  "name field predicates"
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  "year_established field predicates"
  yearEstablished: Int
  yearEstablishedNEQ: Int
  yearEstablishedIn: [Int!]
  yearEstablishedNotIn: [Int!]
  yearEstablishedGT: Int
  yearEstablishedGTE: Int
  yearEstablishedLT: Int
  yearEstablishedLTE: Int
  yearEstablishedIsNil: Boolean
  yearEstablishedNotNil: Boolean
  "country field predicates"
  country: String
  countryNEQ: String
  countryIn: [String!]
  countryNotIn: [String!]
  countryGT: String
  countryGTE: String
  countryLT: String
  countryLTE: String
  countryContains: String
  countryHasPrefix: String
  countryHasSuffix: String
  countryIsNil: Boolean
  countryNotNil: Boolean
  countryEqualFold: String
  countryContainsFold: String
  "image field predicates"
  image: String
  imageNEQ: String
  imageIn: [String!]
  imageNotIn: [String!]
  imageGT: String
  imageGTE: String
  imageLT: String
  imageLTE: String
  imageContains: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageIsNil: Boolean
  imageNotNil: Boolean
  imageEqualFold: String
  imageContainsFold: String
  "has_trading_incentive field predicates"
  hasTradingIncentive: Boolean
  hasTradingIncentiveNEQ: Boolean
  hasTradingIncentiveIsNil: Boolean
  hasTradingIncentiveNotNil: Boolean
  "centralized field predicates"
  centralized: Boolean
  centralizedNEQ: Boolean
  centralizedIsNil: Boolean
  centralizedNotNil: Boolean
  "public_notice field predicates"
  publicNotice: String
  publicNoticeNEQ: String
  publicNoticeIn: [String!]
  publicNoticeNotIn: [String!]
  publicNoticeGT: String
  publicNoticeGTE: String
  publicNoticeLT: String
  publicNoticeLTE: String
  publicNoticeContains: String
  publicNoticeHasPrefix: String
  publicNoticeHasSuffix: String
  publicNoticeIsNil: Boolean
  publicNoticeNotNil: Boolean
  publicNoticeEqualFold: String
  publicNoticeContainsFold: String
  "alert_notice field predicates"
  alertNotice: String
  alertNoticeNEQ: String
  alertNoticeIn: [String!]
  alertNoticeNotIn: [String!]
  alertNoticeGT: String
  alertNoticeGTE: String
  alertNoticeLT: String
  alertNoticeLTE: String
  alertNoticeContains: String
  alertNoticeHasPrefix: String
  alertNoticeHasSuffix: String
  alertNoticeIsNil: Boolean
  alertNoticeNotNil: Boolean
  alertNoticeEqualFold: String
  alertNoticeContainsFold: String
  "trust_score field predicates"
  trustScore: Int
  trustScoreNEQ: Int
  trustScoreIn: [Int!]
  trustScoreNotIn: [Int!]
  trustScoreGT: Int
  trustScoreGTE: Int
  trustScoreLT: Int
  trustScoreLTE: Int
  trustScoreIsNil: Boolean
  trustScoreNotNil: Boolean
  "trust_score_rank field predicates"
  trustScoreRank: Int
  trustScoreRankNEQ: Int
  trustScoreRankIn: [Int!]
  trustScoreRankNotIn: [Int!]
  trustScoreRankGT: Int
  trustScoreRankGTE: Int
  trustScoreRankLT: Int
  trustScoreRankLTE: Int
  trustScoreRankIsNil: Boolean
  trustScoreRankNotNil: Boolean
  "trade_volume_24h_btc field predicates"
  tradeVolume24hBtc: Float
  tradeVolume24hBtcNEQ: Float
  tradeVolume24hBtcIn: [Float!]
  tradeVolume24hBtcNotIn: [Float!]
  tradeVolume24hBtcGT: Float
  tradeVolume24hBtcGTE: Float
  tradeVolume24hBtcLT: Float
  tradeVolume24hBtcLTE: Float
  tradeVolume24hBtcIsNil: Boolean
  tradeVolume24hBtcNotNil: Boolean
  "trade_volume_24h_btc_normalized field predicates"
  tradeVolume24hBtcNormalized: Float
  tradeVolume24hBtcNormalizedNEQ: Float
  tradeVolume24hBtcNormalizedIn: [Float!]
  tradeVolume24hBtcNormalizedNotIn: [Float!]
  tradeVolume24hBtcNormalizedGT: Float
  tradeVolume24hBtcNormalizedGTE: Float
  tradeVolume24hBtcNormalizedLT: Float
  tradeVolume24hBtcNormalizedLTE: Float
  tradeVolume24hBtcNormalizedIsNil: Boolean
  tradeVolume24hBtcNormalizedNotNil: Boolean
  "maker_fee field predicates"
  makerFee: Float
  makerFeeNEQ: Float
  makerFeeIn: [Float!]
  makerFeeNotIn: [Float!]
  makerFeeGT: Float
  makerFeeGTE: Float
  makerFeeLT: Float
  makerFeeLTE: Float
  makerFeeIsNil: Boolean
  makerFeeNotNil: Boolean
  "taker_fee field predicates"
  takerFee: Float
  takerFeeNEQ: Float
  takerFeeIn: [Float!]
  takerFeeNotIn: [Float!]
  takerFeeGT: Float
  takerFeeGTE: Float
  takerFeeLT: Float
  takerFeeLTE: Float
  takerFeeIsNil: Boolean
  takerFeeNotNil: Boolean
  "spread_fee field predicates"
  spreadFee: Boolean
  spreadFeeNEQ: Boolean
  spreadFeeIsNil: Boolean
  spreadFeeNotNil: Boolean
  "support_api field predicates"
  supportAPI: Boolean
  supportAPINEQ: Boolean
  supportAPIIsNil: Boolean
  supportAPINotNil: Boolean
  "ticker edge predicates"
  hasTicker: Boolean
  hasTickerWith: [TickerWhereInput!]
  "trading_pair edge predicates"
  hasTradingPair: Boolean
  hasTradingPairWith: [TradingPairWhereInput!]
  "market edge predicates"
  hasMarket: Boolean
  hasMarketWith: [MarketWhereInput!]
}
"""
MarketWhereInput is used for filtering Market objects.
Input was generated by ent.
"""
input MarketWhereInput {
  not: MarketWhereInput
  and: [MarketWhereInput!]
  or: [MarketWhereInput!]
  "id field predicates"
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  "name field predicates"
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  "type field predicates"
  type: MarketType
  typeNEQ: MarketType
  typeIn: [MarketType!]
  typeNotIn: [MarketType!]
  "exchange edge predicates"
  hasExchange: Boolean
  hasExchangeWith: [ExchangeWhereInput!]
  "trading_pair edge predicates"
  hasTradingPair: Boolean
  hasTradingPairWith: [TradingPairWhereInput!]
}
input OrderDetailsInput {
  baseCurrency: CurrencyInput!
  counterCurrency: CurrencyInput!
  type: OrderType!
  side: OrderSide!
  quantity: QuantityInput!
  price: QuantityInput!
}
"""
OrderWhereInput is used for filtering Order objects.
Input was generated by ent.
"""
input OrderWhereInput {
  not: OrderWhereInput
  and: [OrderWhereInput!]
  or: [OrderWhereInput!]
  "id field predicates"
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
}
"""
OutboxWhereInput is used for filtering Outbox objects.
Input was generated by ent.
"""
input OutboxWhereInput {
  not: OutboxWhereInput
  and: [OutboxWhereInput!]
  or: [OutboxWhereInput!]
  "id field predicates"
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  "timestamp field predicates"
  timestamp: Time
  timestampNEQ: Time
  timestampIn: [Time!]
  timestampNotIn: [Time!]
  timestampGT: Time
  timestampGTE: Time
  timestampLT: Time
  timestampLTE: Time
  "topic field predicates"
  topic: String
  topicNEQ: String
  topicIn: [String!]
  topicNotIn: [String!]
  topicGT: String
  topicGTE: String
  topicLT: String
  topicLTE: String
  topicContains: String
  topicHasPrefix: String
  topicHasSuffix: String
  topicEqualFold: String
  topicContainsFold: String
  "key field predicates"
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyEqualFold: String
  keyContainsFold: String
  "retry_count field predicates"
  retryCount: Int
  retryCountNEQ: Int
  retryCountIn: [Int!]
  retryCountNotIn: [Int!]
  retryCountGT: Int
  retryCountGTE: Int
  retryCountLT: Int
  retryCountLTE: Int
  "status field predicates"
  status: OutboxStatus
  statusNEQ: OutboxStatus
  statusIn: [OutboxStatus!]
  statusNotIn: [OutboxStatus!]
  "last_retry field predicates"
  lastRetry: Time
  lastRetryNEQ: Time
  lastRetryIn: [Time!]
  lastRetryNotIn: [Time!]
  lastRetryGT: Time
  lastRetryGTE: Time
  lastRetryLT: Time
  lastRetryLTE: Time
  lastRetryIsNil: Boolean
  lastRetryNotNil: Boolean
}
input QuantityInput {
  amount: Int!
  scale: Int!
}
input SubmitOrderInput {
  clientMutationId: String
  orderDetails: OrderDetailsInput!
  preferredExchanges: [ExchangeInput!]
}
"""
TickerWhereInput is used for filtering Ticker objects.
Input was generated by ent.
"""
input TickerWhereInput {
  not: TickerWhereInput
  and: [TickerWhereInput!]
  or: [TickerWhereInput!]
  "id field predicates"
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  "base field predicates"
  base: String
  baseNEQ: String
  baseIn: [String!]
  baseNotIn: [String!]
  baseGT: String
  baseGTE: String
  baseLT: String
  baseLTE: String
  baseContains: String
  baseHasPrefix: String
  baseHasSuffix: String
  baseEqualFold: String
  baseContainsFold: String
  "base_coin_id field predicates"
  baseCoinID: String
  baseCoinIDNEQ: String
  baseCoinIDIn: [String!]
  baseCoinIDNotIn: [String!]
  baseCoinIDGT: String
  baseCoinIDGTE: String
  baseCoinIDLT: String
  baseCoinIDLTE: String
  baseCoinIDContains: String
  baseCoinIDHasPrefix: String
  baseCoinIDHasSuffix: String
  baseCoinIDIsNil: Boolean
  baseCoinIDNotNil: Boolean
  baseCoinIDEqualFold: String
  baseCoinIDContainsFold: String
  "counter field predicates"
  counter: String
  counterNEQ: String
  counterIn: [String!]
  counterNotIn: [String!]
  counterGT: String
  counterGTE: String
  counterLT: String
  counterLTE: String
  counterContains: String
  counterHasPrefix: String
  counterHasSuffix: String
  counterEqualFold: String
  counterContainsFold: String
  "counter_coin_id field predicates"
  counterCoinID: String
  counterCoinIDNEQ: String
  counterCoinIDIn: [String!]
  counterCoinIDNotIn: [String!]
  counterCoinIDGT: String
  counterCoinIDGTE: String
  counterCoinIDLT: String
  counterCoinIDLTE: String
  counterCoinIDContains: String
  counterCoinIDHasPrefix: String
  counterCoinIDHasSuffix: String
  counterCoinIDIsNil: Boolean
  counterCoinIDNotNil: Boolean
  counterCoinIDEqualFold: String
  counterCoinIDContainsFold: String
  "last field predicates"
  last: Float
  lastNEQ: Float
  lastIn: [Float!]
  lastNotIn: [Float!]
  lastGT: Float
  lastGTE: Float
  lastLT: Float
  lastLTE: Float
  lastIsNil: Boolean
  lastNotNil: Boolean
  "volume field predicates"
  volume: Float
  volumeNEQ: Float
  volumeIn: [Float!]
  volumeNotIn: [Float!]
  volumeGT: Float
  volumeGTE: Float
  volumeLT: Float
  volumeLTE: Float
  volumeIsNil: Boolean
  volumeNotNil: Boolean
  "trust_score field predicates"
  trustScore: String
  trustScoreNEQ: String
  trustScoreIn: [String!]
  trustScoreNotIn: [String!]
  trustScoreGT: String
  trustScoreGTE: String
  trustScoreLT: String
  trustScoreLTE: String
  trustScoreContains: String
  trustScoreHasPrefix: String
  trustScoreHasSuffix: String
  trustScoreIsNil: Boolean
  trustScoreNotNil: Boolean
  trustScoreEqualFold: String
  trustScoreContainsFold: String
  "bid_ask_spread_percentage field predicates"
  bidAskSpreadPercentage: Float
  bidAskSpreadPercentageNEQ: Float
  bidAskSpreadPercentageIn: [Float!]
  bidAskSpreadPercentageNotIn: [Float!]
  bidAskSpreadPercentageGT: Float
  bidAskSpreadPercentageGTE: Float
  bidAskSpreadPercentageLT: Float
  bidAskSpreadPercentageLTE: Float
  bidAskSpreadPercentageIsNil: Boolean
  bidAskSpreadPercentageNotNil: Boolean
  "timestamp field predicates"
  timestamp: Time
  timestampNEQ: Time
  timestampIn: [Time!]
  timestampNotIn: [Time!]
  timestampGT: Time
  timestampGTE: Time
  timestampLT: Time
  timestampLTE: Time
  timestampIsNil: Boolean
  timestampNotNil: Boolean
  "last_traded_at field predicates"
  lastTradedAt: Time
  lastTradedAtNEQ: Time
  lastTradedAtIn: [Time!]
  lastTradedAtNotIn: [Time!]
  lastTradedAtGT: Time
  lastTradedAtGTE: Time
  lastTradedAtLT: Time
  lastTradedAtLTE: Time
  lastTradedAtIsNil: Boolean
  lastTradedAtNotNil: Boolean
  "last_fetch_at field predicates"
  lastFetchAt: Time
  lastFetchAtNEQ: Time
  lastFetchAtIn: [Time!]
  lastFetchAtNotIn: [Time!]
  lastFetchAtGT: Time
  lastFetchAtGTE: Time
  lastFetchAtLT: Time
  lastFetchAtLTE: Time
  lastFetchAtIsNil: Boolean
  lastFetchAtNotNil: Boolean
  "is_anomaly field predicates"
  isAnomaly: Boolean
  isAnomalyNEQ: Boolean
  isAnomalyIsNil: Boolean
  isAnomalyNotNil: Boolean
  "is_stale field predicates"
  isStale: Boolean
  isStaleNEQ: Boolean
  isStaleIsNil: Boolean
  isStaleNotNil: Boolean
  "trade_url field predicates"
  tradeURL: String
  tradeURLNEQ: String
  tradeURLIn: [String!]
  tradeURLNotIn: [String!]
  tradeURLGT: String
  tradeURLGTE: String
  tradeURLLT: String
  tradeURLLTE: String
  tradeURLContains: String
  tradeURLHasPrefix: String
  tradeURLHasSuffix: String
  tradeURLIsNil: Boolean
  tradeURLNotNil: Boolean
  tradeURLEqualFold: String
  tradeURLContainsFold: String
  "token_info_url field predicates"
  tokenInfoURL: String
  tokenInfoURLNEQ: String
  tokenInfoURLIn: [String!]
  tokenInfoURLNotIn: [String!]
  tokenInfoURLGT: String
  tokenInfoURLGTE: String
  tokenInfoURLLT: String
  tokenInfoURLLTE: String
  tokenInfoURLContains: String
  tokenInfoURLHasPrefix: String
  tokenInfoURLHasSuffix: String
  tokenInfoURLIsNil: Boolean
  tokenInfoURLNotNil: Boolean
  tokenInfoURLEqualFold: String
  tokenInfoURLContainsFold: String
  "exchange edge predicates"
  hasExchange: Boolean
  hasExchangeWith: [ExchangeWhereInput!]
}
"""
TradingPairWhereInput is used for filtering TradingPair objects.
Input was generated by ent.
"""
input TradingPairWhereInput {
  not: TradingPairWhereInput
  and: [TradingPairWhereInput!]
  or: [TradingPairWhereInput!]
  "id field predicates"
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  "symbol field predicates"
  symbol: String
  symbolNEQ: String
  symbolIn: [String!]
  symbolNotIn: [String!]
  symbolGT: String
  symbolGTE: String
  symbolLT: String
  symbolLTE: String
  symbolContains: String
  symbolHasPrefix: String
  symbolHasSuffix: String
  symbolEqualFold: String
  symbolContainsFold: String
  "base_price_min_precision field predicates"
  basePriceMinPrecision: Int
  basePriceMinPrecisionNEQ: Int
  basePriceMinPrecisionIn: [Int!]
  basePriceMinPrecisionNotIn: [Int!]
  basePriceMinPrecisionGT: Int
  basePriceMinPrecisionGTE: Int
  basePriceMinPrecisionLT: Int
  basePriceMinPrecisionLTE: Int
  basePriceMinPrecisionIsNil: Boolean
  basePriceMinPrecisionNotNil: Boolean
  "base_price_max_precision field predicates"
  basePriceMaxPrecision: Int
  basePriceMaxPrecisionNEQ: Int
  basePriceMaxPrecisionIn: [Int!]
  basePriceMaxPrecisionNotIn: [Int!]
  basePriceMaxPrecisionGT: Int
  basePriceMaxPrecisionGTE: Int
  basePriceMaxPrecisionLT: Int
  basePriceMaxPrecisionLTE: Int
  basePriceMaxPrecisionIsNil: Boolean
  basePriceMaxPrecisionNotNil: Boolean
  "base_quantity_min_precision field predicates"
  baseQuantityMinPrecision: Int
  baseQuantityMinPrecisionNEQ: Int
  baseQuantityMinPrecisionIn: [Int!]
  baseQuantityMinPrecisionNotIn: [Int!]
  baseQuantityMinPrecisionGT: Int
  baseQuantityMinPrecisionGTE: Int
  baseQuantityMinPrecisionLT: Int
  baseQuantityMinPrecisionLTE: Int
  baseQuantityMinPrecisionIsNil: Boolean
  baseQuantityMinPrecisionNotNil: Boolean
  "base_quantity_max_precision field predicates"
  baseQuantityMaxPrecision: Int
  baseQuantityMaxPrecisionNEQ: Int
  baseQuantityMaxPrecisionIn: [Int!]
  baseQuantityMaxPrecisionNotIn: [Int!]
  baseQuantityMaxPrecisionGT: Int
  baseQuantityMaxPrecisionGTE: Int
  baseQuantityMaxPrecisionLT: Int
  baseQuantityMaxPrecisionLTE: Int
  baseQuantityMaxPrecisionIsNil: Boolean
  baseQuantityMaxPrecisionNotNil: Boolean
  "counter_price_min_precision field predicates"
  counterPriceMinPrecision: Int
  counterPriceMinPrecisionNEQ: Int
  counterPriceMinPrecisionIn: [Int!]
  counterPriceMinPrecisionNotIn: [Int!]
  counterPriceMinPrecisionGT: Int
  counterPriceMinPrecisionGTE: Int
  counterPriceMinPrecisionLT: Int
  counterPriceMinPrecisionLTE: Int
  counterPriceMinPrecisionIsNil: Boolean
  counterPriceMinPrecisionNotNil: Boolean
  "counter_price_max_precision field predicates"
  counterPriceMaxPrecision: Int
  counterPriceMaxPrecisionNEQ: Int
  counterPriceMaxPrecisionIn: [Int!]
  counterPriceMaxPrecisionNotIn: [Int!]
  counterPriceMaxPrecisionGT: Int
  counterPriceMaxPrecisionGTE: Int
  counterPriceMaxPrecisionLT: Int
  counterPriceMaxPrecisionLTE: Int
  counterPriceMaxPrecisionIsNil: Boolean
  counterPriceMaxPrecisionNotNil: Boolean
  "counter_quantity_min_precision field predicates"
  counterQuantityMinPrecision: Int
  counterQuantityMinPrecisionNEQ: Int
  counterQuantityMinPrecisionIn: [Int!]
  counterQuantityMinPrecisionNotIn: [Int!]
  counterQuantityMinPrecisionGT: Int
  counterQuantityMinPrecisionGTE: Int
  counterQuantityMinPrecisionLT: Int
  counterQuantityMinPrecisionLTE: Int
  counterQuantityMinPrecisionIsNil: Boolean
  counterQuantityMinPrecisionNotNil: Boolean
  "counter_quantity_max_precision field predicates"
  counterQuantityMaxPrecision: Int
  counterQuantityMaxPrecisionNEQ: Int
  counterQuantityMaxPrecisionIn: [Int!]
  counterQuantityMaxPrecisionNotIn: [Int!]
  counterQuantityMaxPrecisionGT: Int
  counterQuantityMaxPrecisionGTE: Int
  counterQuantityMaxPrecisionLT: Int
  counterQuantityMaxPrecisionLTE: Int
  counterQuantityMaxPrecisionIsNil: Boolean
  counterQuantityMaxPrecisionNotNil: Boolean
  "exchange edge predicates"
  hasExchange: Boolean
  hasExchangeWith: [ExchangeWhereInput!]
  "base edge predicates"
  hasBase: Boolean
  hasBaseWith: [CoinWhereInput!]
  "counter edge predicates"
  hasCounter: Boolean
  hasCounterWith: [CoinWhereInput!]
  "market edge predicates"
  hasMarket: Boolean
  hasMarketWith: [MarketWhereInput!]
}
"Exposes a URL that specifies the behavior of this scalar."
directive @specifiedBy(
    "The URL that specifies the behavior of this scalar."
    url: String!
  ) on SCALAR
