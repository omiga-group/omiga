// Code generated by ent, DO NOT EDIT.

package entities

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/exchange"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/tradingpair"
)

// TradingPair is the model entity for the TradingPair schema.
type TradingPair struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// Base holds the value of the "base" field.
	Base string `json:"base,omitempty"`
	// BasePrecision holds the value of the "base_precision" field.
	BasePrecision int `json:"base_precision,omitempty"`
	// Counter holds the value of the "counter" field.
	Counter string `json:"counter,omitempty"`
	// CounterPrecision holds the value of the "counter_precision" field.
	CounterPrecision int `json:"counter_precision,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TradingPairQuery when eager-loading is set.
	Edges                  TradingPairEdges `json:"edges"`
	exchange_trading_pairs *int
}

// TradingPairEdges holds the relations/edges for other nodes in the graph.
type TradingPairEdges struct {
	// Exchange holds the value of the exchange edge.
	Exchange *Exchange `json:"exchange,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// ExchangeOrErr returns the Exchange value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TradingPairEdges) ExchangeOrErr() (*Exchange, error) {
	if e.loadedTypes[0] {
		if e.Exchange == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exchange.Label}
		}
		return e.Exchange, nil
	}
	return nil, &NotLoadedError{edge: "exchange"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TradingPair) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tradingpair.FieldID, tradingpair.FieldBasePrecision, tradingpair.FieldCounterPrecision:
			values[i] = new(sql.NullInt64)
		case tradingpair.FieldSymbol, tradingpair.FieldBase, tradingpair.FieldCounter:
			values[i] = new(sql.NullString)
		case tradingpair.ForeignKeys[0]: // exchange_trading_pairs
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TradingPair", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TradingPair fields.
func (tp *TradingPair) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tradingpair.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tp.ID = int(value.Int64)
		case tradingpair.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				tp.Symbol = value.String
			}
		case tradingpair.FieldBase:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field base", values[i])
			} else if value.Valid {
				tp.Base = value.String
			}
		case tradingpair.FieldBasePrecision:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field base_precision", values[i])
			} else if value.Valid {
				tp.BasePrecision = int(value.Int64)
			}
		case tradingpair.FieldCounter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field counter", values[i])
			} else if value.Valid {
				tp.Counter = value.String
			}
		case tradingpair.FieldCounterPrecision:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field counter_precision", values[i])
			} else if value.Valid {
				tp.CounterPrecision = int(value.Int64)
			}
		case tradingpair.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exchange_trading_pairs", value)
			} else if value.Valid {
				tp.exchange_trading_pairs = new(int)
				*tp.exchange_trading_pairs = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryExchange queries the "exchange" edge of the TradingPair entity.
func (tp *TradingPair) QueryExchange() *ExchangeQuery {
	return (&TradingPairClient{config: tp.config}).QueryExchange(tp)
}

// Update returns a builder for updating this TradingPair.
// Note that you need to call TradingPair.Unwrap() before calling this method if this TradingPair
// was returned from a transaction, and the transaction was committed or rolled back.
func (tp *TradingPair) Update() *TradingPairUpdateOne {
	return (&TradingPairClient{config: tp.config}).UpdateOne(tp)
}

// Unwrap unwraps the TradingPair entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tp *TradingPair) Unwrap() *TradingPair {
	_tx, ok := tp.config.driver.(*txDriver)
	if !ok {
		panic("entities: TradingPair is not a transactional entity")
	}
	tp.config.driver = _tx.drv
	return tp
}

// String implements the fmt.Stringer.
func (tp *TradingPair) String() string {
	var builder strings.Builder
	builder.WriteString("TradingPair(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tp.ID))
	builder.WriteString("symbol=")
	builder.WriteString(tp.Symbol)
	builder.WriteString(", ")
	builder.WriteString("base=")
	builder.WriteString(tp.Base)
	builder.WriteString(", ")
	builder.WriteString("base_precision=")
	builder.WriteString(fmt.Sprintf("%v", tp.BasePrecision))
	builder.WriteString(", ")
	builder.WriteString("counter=")
	builder.WriteString(tp.Counter)
	builder.WriteString(", ")
	builder.WriteString("counter_precision=")
	builder.WriteString(fmt.Sprintf("%v", tp.CounterPrecision))
	builder.WriteByte(')')
	return builder.String()
}

// TradingPairs is a parsable slice of TradingPair.
type TradingPairs []*TradingPair

func (tp TradingPairs) config(cfg config) {
	for _i := range tp {
		tp[_i].config = cfg
	}
}
