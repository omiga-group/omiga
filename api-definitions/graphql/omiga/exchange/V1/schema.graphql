scalar Time
scalar Cursor

schema {
  query: Query
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID
}

extend type Query {
  exchange(
    """
    Ordering directions
    """
    where: ExchangeWhereInput
  ): Exchange

  exchanges(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last n items from the list.
    """
    last: Int

    """
    Ordering directions
    """
    orderBy: [ExchangeOrder!]

    """
    Ordering directions
    """
    where: ExchangeWhereInput
  ): ExchangeConnection
}

enum OrderDirection {
  ASC
  DESC
}

enum ExchangeOrderField {
  exchangeId
  name
  yearEstablished
  country
  image
  hasTradingIncentive
  centralized
  publicNotice
  alertNotice
  trustScore
  trustScoreRank
  tradeVolume24hBtc
  tradeVolume24hBtcNormalized
}

input ExchangeOrder {
  direction: OrderDirection!
  field: ExchangeOrderField
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}

type Exchange implements Node {
  id: ID!
  exchangeId: String!
  name: String
  yearEstablished: Int
  country: String
  image: String
  links: Links!
  hasTradingIncentive: Boolean
  centralized: Boolean
  publicNotice: String
  alertNotice: String
  trustScore: Int
  trustScoreRank: Int
  tradeVolume24hBtc: Float
  tradeVolume24hBtcNormalized: Float
  tickers: [Ticker!]!
  makerFee: Float
  takerFee: Float
  spreadFee: Boolean
  supportAPI: Boolean
}

type Links {
  website: String
  facebook: String
  reddit: String
  twitter: String
  slack: String
  telegram: String
}

type Ticker implements Node {
  id: ID!
  base: String!
  target: String!
  market: Market
  last: Float
  volume: Float
  convertedLast: ConvertedDetails
  convertedVolume: ConvertedDetails
  trustScore: String
  bidAskSpreadPercentage: Float
  timestamp: Time
  lastTradedAt: Time
  lastFetchAt: Time
  isAnomaly: Boolean
  isStale: Boolean
  tradeUrl: String
  tokenInfoUrl: String
  coinId: String
  targetCoinId: String
}

type Market {
  hasTradingIncentive: Boolean!
  identifier: String!
  name: String
}

type ConvertedDetails {
  btc: Float!
  eth: Float!
  usd: Float!
}

"""
A connection to a list of items.
"""
type ExchangeConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ExchangeEdge]

  """
  Total number of exchanges
  """
  totalCount: Int
}

"""
An edge in a connection.
"""
type ExchangeEdge {
  """
  The item at the end of the edge
  """
  node: Exchange

  """
  A cursor for use in pagination
  """
  cursor: Cursor!
}

enum OutboxStatus {
  PENDING
  SUCCEEDED
  FAILED
}
