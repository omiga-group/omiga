// Code generated by ent, DO NOT EDIT.

package repositories

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omiga-group/omiga/src/exchange/shared/models"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/exchange"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/internal"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/predicate"
	"github.com/omiga-group/omiga/src/exchange/shared/repositories/ticker"
)

// TickerUpdate is the builder for updating Ticker entities.
type TickerUpdate struct {
	config
	hooks     []Hook
	mutation  *TickerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TickerUpdate builder.
func (tu *TickerUpdate) Where(ps ...predicate.Ticker) *TickerUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetBase sets the "base" field.
func (tu *TickerUpdate) SetBase(s string) *TickerUpdate {
	tu.mutation.SetBase(s)
	return tu
}

// SetTarget sets the "target" field.
func (tu *TickerUpdate) SetTarget(s string) *TickerUpdate {
	tu.mutation.SetTarget(s)
	return tu
}

// SetMarket sets the "market" field.
func (tu *TickerUpdate) SetMarket(m models.Market) *TickerUpdate {
	tu.mutation.SetMarket(m)
	return tu
}

// SetLast sets the "last" field.
func (tu *TickerUpdate) SetLast(f float64) *TickerUpdate {
	tu.mutation.ResetLast()
	tu.mutation.SetLast(f)
	return tu
}

// AddLast adds f to the "last" field.
func (tu *TickerUpdate) AddLast(f float64) *TickerUpdate {
	tu.mutation.AddLast(f)
	return tu
}

// SetVolume sets the "volume" field.
func (tu *TickerUpdate) SetVolume(f float64) *TickerUpdate {
	tu.mutation.ResetVolume()
	tu.mutation.SetVolume(f)
	return tu
}

// AddVolume adds f to the "volume" field.
func (tu *TickerUpdate) AddVolume(f float64) *TickerUpdate {
	tu.mutation.AddVolume(f)
	return tu
}

// SetConvertedLast sets the "converted_last" field.
func (tu *TickerUpdate) SetConvertedLast(md models.ConvertedDetails) *TickerUpdate {
	tu.mutation.SetConvertedLast(md)
	return tu
}

// SetConvertedVolume sets the "converted_volume" field.
func (tu *TickerUpdate) SetConvertedVolume(md models.ConvertedDetails) *TickerUpdate {
	tu.mutation.SetConvertedVolume(md)
	return tu
}

// SetTrustScore sets the "trust_score" field.
func (tu *TickerUpdate) SetTrustScore(s string) *TickerUpdate {
	tu.mutation.SetTrustScore(s)
	return tu
}

// SetBidAskSpreadPercentage sets the "bid_ask_spread_percentage" field.
func (tu *TickerUpdate) SetBidAskSpreadPercentage(f float64) *TickerUpdate {
	tu.mutation.ResetBidAskSpreadPercentage()
	tu.mutation.SetBidAskSpreadPercentage(f)
	return tu
}

// AddBidAskSpreadPercentage adds f to the "bid_ask_spread_percentage" field.
func (tu *TickerUpdate) AddBidAskSpreadPercentage(f float64) *TickerUpdate {
	tu.mutation.AddBidAskSpreadPercentage(f)
	return tu
}

// SetTimestamp sets the "timestamp" field.
func (tu *TickerUpdate) SetTimestamp(t time.Time) *TickerUpdate {
	tu.mutation.SetTimestamp(t)
	return tu
}

// SetLastTradedAt sets the "last_traded_at" field.
func (tu *TickerUpdate) SetLastTradedAt(t time.Time) *TickerUpdate {
	tu.mutation.SetLastTradedAt(t)
	return tu
}

// SetLastFetchAt sets the "last_fetch_at" field.
func (tu *TickerUpdate) SetLastFetchAt(t time.Time) *TickerUpdate {
	tu.mutation.SetLastFetchAt(t)
	return tu
}

// SetIsAnomaly sets the "is_anomaly" field.
func (tu *TickerUpdate) SetIsAnomaly(b bool) *TickerUpdate {
	tu.mutation.SetIsAnomaly(b)
	return tu
}

// SetIsStale sets the "is_stale" field.
func (tu *TickerUpdate) SetIsStale(b bool) *TickerUpdate {
	tu.mutation.SetIsStale(b)
	return tu
}

// SetTradeURL sets the "trade_url" field.
func (tu *TickerUpdate) SetTradeURL(s string) *TickerUpdate {
	tu.mutation.SetTradeURL(s)
	return tu
}

// SetNillableTradeURL sets the "trade_url" field if the given value is not nil.
func (tu *TickerUpdate) SetNillableTradeURL(s *string) *TickerUpdate {
	if s != nil {
		tu.SetTradeURL(*s)
	}
	return tu
}

// ClearTradeURL clears the value of the "trade_url" field.
func (tu *TickerUpdate) ClearTradeURL() *TickerUpdate {
	tu.mutation.ClearTradeURL()
	return tu
}

// SetTokenInfoURL sets the "token_info_url" field.
func (tu *TickerUpdate) SetTokenInfoURL(s string) *TickerUpdate {
	tu.mutation.SetTokenInfoURL(s)
	return tu
}

// SetNillableTokenInfoURL sets the "token_info_url" field if the given value is not nil.
func (tu *TickerUpdate) SetNillableTokenInfoURL(s *string) *TickerUpdate {
	if s != nil {
		tu.SetTokenInfoURL(*s)
	}
	return tu
}

// ClearTokenInfoURL clears the value of the "token_info_url" field.
func (tu *TickerUpdate) ClearTokenInfoURL() *TickerUpdate {
	tu.mutation.ClearTokenInfoURL()
	return tu
}

// SetCoinID sets the "coin_id" field.
func (tu *TickerUpdate) SetCoinID(s string) *TickerUpdate {
	tu.mutation.SetCoinID(s)
	return tu
}

// SetTargetCoinID sets the "target_coin_id" field.
func (tu *TickerUpdate) SetTargetCoinID(s string) *TickerUpdate {
	tu.mutation.SetTargetCoinID(s)
	return tu
}

// SetExchangeID sets the "exchange" edge to the Exchange entity by ID.
func (tu *TickerUpdate) SetExchangeID(id int) *TickerUpdate {
	tu.mutation.SetExchangeID(id)
	return tu
}

// SetExchange sets the "exchange" edge to the Exchange entity.
func (tu *TickerUpdate) SetExchange(e *Exchange) *TickerUpdate {
	return tu.SetExchangeID(e.ID)
}

// Mutation returns the TickerMutation object of the builder.
func (tu *TickerUpdate) Mutation() *TickerMutation {
	return tu.mutation
}

// ClearExchange clears the "exchange" edge to the Exchange entity.
func (tu *TickerUpdate) ClearExchange() *TickerUpdate {
	tu.mutation.ClearExchange()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TickerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TickerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("repositories: uninitialized hook (forgotten import repositories/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TickerUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TickerUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TickerUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TickerUpdate) check() error {
	if _, ok := tu.mutation.ExchangeID(); tu.mutation.ExchangeCleared() && !ok {
		return errors.New(`repositories: clearing a required unique edge "Ticker.exchange"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TickerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TickerUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TickerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ticker.Table,
			Columns: ticker.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ticker.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Base(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticker.FieldBase,
		})
	}
	if value, ok := tu.mutation.Target(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticker.FieldTarget,
		})
	}
	if value, ok := tu.mutation.Market(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: ticker.FieldMarket,
		})
	}
	if value, ok := tu.mutation.Last(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ticker.FieldLast,
		})
	}
	if value, ok := tu.mutation.AddedLast(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ticker.FieldLast,
		})
	}
	if value, ok := tu.mutation.Volume(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ticker.FieldVolume,
		})
	}
	if value, ok := tu.mutation.AddedVolume(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ticker.FieldVolume,
		})
	}
	if value, ok := tu.mutation.ConvertedLast(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: ticker.FieldConvertedLast,
		})
	}
	if value, ok := tu.mutation.ConvertedVolume(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: ticker.FieldConvertedVolume,
		})
	}
	if value, ok := tu.mutation.TrustScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticker.FieldTrustScore,
		})
	}
	if value, ok := tu.mutation.BidAskSpreadPercentage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ticker.FieldBidAskSpreadPercentage,
		})
	}
	if value, ok := tu.mutation.AddedBidAskSpreadPercentage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ticker.FieldBidAskSpreadPercentage,
		})
	}
	if value, ok := tu.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ticker.FieldTimestamp,
		})
	}
	if value, ok := tu.mutation.LastTradedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ticker.FieldLastTradedAt,
		})
	}
	if value, ok := tu.mutation.LastFetchAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ticker.FieldLastFetchAt,
		})
	}
	if value, ok := tu.mutation.IsAnomaly(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: ticker.FieldIsAnomaly,
		})
	}
	if value, ok := tu.mutation.IsStale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: ticker.FieldIsStale,
		})
	}
	if value, ok := tu.mutation.TradeURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticker.FieldTradeURL,
		})
	}
	if tu.mutation.TradeURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ticker.FieldTradeURL,
		})
	}
	if value, ok := tu.mutation.TokenInfoURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticker.FieldTokenInfoURL,
		})
	}
	if tu.mutation.TokenInfoURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ticker.FieldTokenInfoURL,
		})
	}
	if value, ok := tu.mutation.CoinID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticker.FieldCoinID,
		})
	}
	if value, ok := tu.mutation.TargetCoinID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticker.FieldTargetCoinID,
		})
	}
	if tu.mutation.ExchangeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticker.ExchangeTable,
			Columns: []string{ticker.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exchange.FieldID,
				},
			},
		}
		edge.Schema = tu.schemaConfig.Ticker
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ExchangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticker.ExchangeTable,
			Columns: []string{ticker.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exchange.FieldID,
				},
			},
		}
		edge.Schema = tu.schemaConfig.Ticker
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tu.schemaConfig.Ticker
	ctx = internal.NewSchemaConfigContext(ctx, tu.schemaConfig)
	_spec.Modifiers = tu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticker.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TickerUpdateOne is the builder for updating a single Ticker entity.
type TickerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TickerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetBase sets the "base" field.
func (tuo *TickerUpdateOne) SetBase(s string) *TickerUpdateOne {
	tuo.mutation.SetBase(s)
	return tuo
}

// SetTarget sets the "target" field.
func (tuo *TickerUpdateOne) SetTarget(s string) *TickerUpdateOne {
	tuo.mutation.SetTarget(s)
	return tuo
}

// SetMarket sets the "market" field.
func (tuo *TickerUpdateOne) SetMarket(m models.Market) *TickerUpdateOne {
	tuo.mutation.SetMarket(m)
	return tuo
}

// SetLast sets the "last" field.
func (tuo *TickerUpdateOne) SetLast(f float64) *TickerUpdateOne {
	tuo.mutation.ResetLast()
	tuo.mutation.SetLast(f)
	return tuo
}

// AddLast adds f to the "last" field.
func (tuo *TickerUpdateOne) AddLast(f float64) *TickerUpdateOne {
	tuo.mutation.AddLast(f)
	return tuo
}

// SetVolume sets the "volume" field.
func (tuo *TickerUpdateOne) SetVolume(f float64) *TickerUpdateOne {
	tuo.mutation.ResetVolume()
	tuo.mutation.SetVolume(f)
	return tuo
}

// AddVolume adds f to the "volume" field.
func (tuo *TickerUpdateOne) AddVolume(f float64) *TickerUpdateOne {
	tuo.mutation.AddVolume(f)
	return tuo
}

// SetConvertedLast sets the "converted_last" field.
func (tuo *TickerUpdateOne) SetConvertedLast(md models.ConvertedDetails) *TickerUpdateOne {
	tuo.mutation.SetConvertedLast(md)
	return tuo
}

// SetConvertedVolume sets the "converted_volume" field.
func (tuo *TickerUpdateOne) SetConvertedVolume(md models.ConvertedDetails) *TickerUpdateOne {
	tuo.mutation.SetConvertedVolume(md)
	return tuo
}

// SetTrustScore sets the "trust_score" field.
func (tuo *TickerUpdateOne) SetTrustScore(s string) *TickerUpdateOne {
	tuo.mutation.SetTrustScore(s)
	return tuo
}

// SetBidAskSpreadPercentage sets the "bid_ask_spread_percentage" field.
func (tuo *TickerUpdateOne) SetBidAskSpreadPercentage(f float64) *TickerUpdateOne {
	tuo.mutation.ResetBidAskSpreadPercentage()
	tuo.mutation.SetBidAskSpreadPercentage(f)
	return tuo
}

// AddBidAskSpreadPercentage adds f to the "bid_ask_spread_percentage" field.
func (tuo *TickerUpdateOne) AddBidAskSpreadPercentage(f float64) *TickerUpdateOne {
	tuo.mutation.AddBidAskSpreadPercentage(f)
	return tuo
}

// SetTimestamp sets the "timestamp" field.
func (tuo *TickerUpdateOne) SetTimestamp(t time.Time) *TickerUpdateOne {
	tuo.mutation.SetTimestamp(t)
	return tuo
}

// SetLastTradedAt sets the "last_traded_at" field.
func (tuo *TickerUpdateOne) SetLastTradedAt(t time.Time) *TickerUpdateOne {
	tuo.mutation.SetLastTradedAt(t)
	return tuo
}

// SetLastFetchAt sets the "last_fetch_at" field.
func (tuo *TickerUpdateOne) SetLastFetchAt(t time.Time) *TickerUpdateOne {
	tuo.mutation.SetLastFetchAt(t)
	return tuo
}

// SetIsAnomaly sets the "is_anomaly" field.
func (tuo *TickerUpdateOne) SetIsAnomaly(b bool) *TickerUpdateOne {
	tuo.mutation.SetIsAnomaly(b)
	return tuo
}

// SetIsStale sets the "is_stale" field.
func (tuo *TickerUpdateOne) SetIsStale(b bool) *TickerUpdateOne {
	tuo.mutation.SetIsStale(b)
	return tuo
}

// SetTradeURL sets the "trade_url" field.
func (tuo *TickerUpdateOne) SetTradeURL(s string) *TickerUpdateOne {
	tuo.mutation.SetTradeURL(s)
	return tuo
}

// SetNillableTradeURL sets the "trade_url" field if the given value is not nil.
func (tuo *TickerUpdateOne) SetNillableTradeURL(s *string) *TickerUpdateOne {
	if s != nil {
		tuo.SetTradeURL(*s)
	}
	return tuo
}

// ClearTradeURL clears the value of the "trade_url" field.
func (tuo *TickerUpdateOne) ClearTradeURL() *TickerUpdateOne {
	tuo.mutation.ClearTradeURL()
	return tuo
}

// SetTokenInfoURL sets the "token_info_url" field.
func (tuo *TickerUpdateOne) SetTokenInfoURL(s string) *TickerUpdateOne {
	tuo.mutation.SetTokenInfoURL(s)
	return tuo
}

// SetNillableTokenInfoURL sets the "token_info_url" field if the given value is not nil.
func (tuo *TickerUpdateOne) SetNillableTokenInfoURL(s *string) *TickerUpdateOne {
	if s != nil {
		tuo.SetTokenInfoURL(*s)
	}
	return tuo
}

// ClearTokenInfoURL clears the value of the "token_info_url" field.
func (tuo *TickerUpdateOne) ClearTokenInfoURL() *TickerUpdateOne {
	tuo.mutation.ClearTokenInfoURL()
	return tuo
}

// SetCoinID sets the "coin_id" field.
func (tuo *TickerUpdateOne) SetCoinID(s string) *TickerUpdateOne {
	tuo.mutation.SetCoinID(s)
	return tuo
}

// SetTargetCoinID sets the "target_coin_id" field.
func (tuo *TickerUpdateOne) SetTargetCoinID(s string) *TickerUpdateOne {
	tuo.mutation.SetTargetCoinID(s)
	return tuo
}

// SetExchangeID sets the "exchange" edge to the Exchange entity by ID.
func (tuo *TickerUpdateOne) SetExchangeID(id int) *TickerUpdateOne {
	tuo.mutation.SetExchangeID(id)
	return tuo
}

// SetExchange sets the "exchange" edge to the Exchange entity.
func (tuo *TickerUpdateOne) SetExchange(e *Exchange) *TickerUpdateOne {
	return tuo.SetExchangeID(e.ID)
}

// Mutation returns the TickerMutation object of the builder.
func (tuo *TickerUpdateOne) Mutation() *TickerMutation {
	return tuo.mutation
}

// ClearExchange clears the "exchange" edge to the Exchange entity.
func (tuo *TickerUpdateOne) ClearExchange() *TickerUpdateOne {
	tuo.mutation.ClearExchange()
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TickerUpdateOne) Select(field string, fields ...string) *TickerUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Ticker entity.
func (tuo *TickerUpdateOne) Save(ctx context.Context) (*Ticker, error) {
	var (
		err  error
		node *Ticker
	)
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TickerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("repositories: uninitialized hook (forgotten import repositories/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Ticker)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TickerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TickerUpdateOne) SaveX(ctx context.Context) *Ticker {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TickerUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TickerUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TickerUpdateOne) check() error {
	if _, ok := tuo.mutation.ExchangeID(); tuo.mutation.ExchangeCleared() && !ok {
		return errors.New(`repositories: clearing a required unique edge "Ticker.exchange"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TickerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TickerUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TickerUpdateOne) sqlSave(ctx context.Context) (_node *Ticker, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ticker.Table,
			Columns: ticker.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ticker.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`repositories: missing "Ticker.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ticker.FieldID)
		for _, f := range fields {
			if !ticker.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("repositories: invalid field %q for query", f)}
			}
			if f != ticker.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Base(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticker.FieldBase,
		})
	}
	if value, ok := tuo.mutation.Target(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticker.FieldTarget,
		})
	}
	if value, ok := tuo.mutation.Market(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: ticker.FieldMarket,
		})
	}
	if value, ok := tuo.mutation.Last(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ticker.FieldLast,
		})
	}
	if value, ok := tuo.mutation.AddedLast(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ticker.FieldLast,
		})
	}
	if value, ok := tuo.mutation.Volume(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ticker.FieldVolume,
		})
	}
	if value, ok := tuo.mutation.AddedVolume(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ticker.FieldVolume,
		})
	}
	if value, ok := tuo.mutation.ConvertedLast(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: ticker.FieldConvertedLast,
		})
	}
	if value, ok := tuo.mutation.ConvertedVolume(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: ticker.FieldConvertedVolume,
		})
	}
	if value, ok := tuo.mutation.TrustScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticker.FieldTrustScore,
		})
	}
	if value, ok := tuo.mutation.BidAskSpreadPercentage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ticker.FieldBidAskSpreadPercentage,
		})
	}
	if value, ok := tuo.mutation.AddedBidAskSpreadPercentage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ticker.FieldBidAskSpreadPercentage,
		})
	}
	if value, ok := tuo.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ticker.FieldTimestamp,
		})
	}
	if value, ok := tuo.mutation.LastTradedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ticker.FieldLastTradedAt,
		})
	}
	if value, ok := tuo.mutation.LastFetchAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ticker.FieldLastFetchAt,
		})
	}
	if value, ok := tuo.mutation.IsAnomaly(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: ticker.FieldIsAnomaly,
		})
	}
	if value, ok := tuo.mutation.IsStale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: ticker.FieldIsStale,
		})
	}
	if value, ok := tuo.mutation.TradeURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticker.FieldTradeURL,
		})
	}
	if tuo.mutation.TradeURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ticker.FieldTradeURL,
		})
	}
	if value, ok := tuo.mutation.TokenInfoURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticker.FieldTokenInfoURL,
		})
	}
	if tuo.mutation.TokenInfoURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ticker.FieldTokenInfoURL,
		})
	}
	if value, ok := tuo.mutation.CoinID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticker.FieldCoinID,
		})
	}
	if value, ok := tuo.mutation.TargetCoinID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticker.FieldTargetCoinID,
		})
	}
	if tuo.mutation.ExchangeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticker.ExchangeTable,
			Columns: []string{ticker.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exchange.FieldID,
				},
			},
		}
		edge.Schema = tuo.schemaConfig.Ticker
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ExchangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticker.ExchangeTable,
			Columns: []string{ticker.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exchange.FieldID,
				},
			},
		}
		edge.Schema = tuo.schemaConfig.Ticker
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tuo.schemaConfig.Ticker
	ctx = internal.NewSchemaConfigContext(ctx, tuo.schemaConfig)
	_spec.Modifiers = tuo.modifiers
	_node = &Ticker{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticker.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
