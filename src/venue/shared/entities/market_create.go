// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omiga-group/omiga/src/venue/shared/entities/market"
	"github.com/omiga-group/omiga/src/venue/shared/entities/tradingpair"
	"github.com/omiga-group/omiga/src/venue/shared/entities/venue"
)

// MarketCreate is the builder for creating a Market entity.
type MarketCreate struct {
	config
	mutation *MarketMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (mc *MarketCreate) SetName(s string) *MarketCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetType sets the "type" field.
func (mc *MarketCreate) SetType(m market.Type) *MarketCreate {
	mc.mutation.SetType(m)
	return mc
}

// SetVenueID sets the "venue" edge to the Venue entity by ID.
func (mc *MarketCreate) SetVenueID(id int) *MarketCreate {
	mc.mutation.SetVenueID(id)
	return mc
}

// SetVenue sets the "venue" edge to the Venue entity.
func (mc *MarketCreate) SetVenue(v *Venue) *MarketCreate {
	return mc.SetVenueID(v.ID)
}

// AddTradingPairIDs adds the "trading_pair" edge to the TradingPair entity by IDs.
func (mc *MarketCreate) AddTradingPairIDs(ids ...int) *MarketCreate {
	mc.mutation.AddTradingPairIDs(ids...)
	return mc
}

// AddTradingPair adds the "trading_pair" edges to the TradingPair entity.
func (mc *MarketCreate) AddTradingPair(t ...*TradingPair) *MarketCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mc.AddTradingPairIDs(ids...)
}

// Mutation returns the MarketMutation object of the builder.
func (mc *MarketCreate) Mutation() *MarketMutation {
	return mc.mutation
}

// Save creates the Market in the database.
func (mc *MarketCreate) Save(ctx context.Context) (*Market, error) {
	var (
		err  error
		node *Market
	)
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MarketMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("entities: uninitialized hook (forgotten import entities/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Market)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MarketMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MarketCreate) SaveX(ctx context.Context) *Market {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MarketCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MarketCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MarketCreate) check() error {
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`entities: missing required field "Market.name"`)}
	}
	if _, ok := mc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`entities: missing required field "Market.type"`)}
	}
	if v, ok := mc.mutation.GetType(); ok {
		if err := market.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`entities: validator failed for field "Market.type": %w`, err)}
		}
	}
	if _, ok := mc.mutation.VenueID(); !ok {
		return &ValidationError{Name: "venue", err: errors.New(`entities: missing required edge "Market.venue"`)}
	}
	return nil
}

func (mc *MarketCreate) sqlSave(ctx context.Context) (*Market, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mc *MarketCreate) createSpec() (*Market, *sqlgraph.CreateSpec) {
	var (
		_node = &Market{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: market.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: market.FieldID,
			},
		}
	)
	_spec.Schema = mc.schemaConfig.Market
	_spec.OnConflict = mc.conflict
	if value, ok := mc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: market.FieldName,
		})
		_node.Name = value
	}
	if value, ok := mc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: market.FieldType,
		})
		_node.Type = value
	}
	if nodes := mc.mutation.VenueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   market.VenueTable,
			Columns: []string{market.VenueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: venue.FieldID,
				},
			},
		}
		edge.Schema = mc.schemaConfig.Market
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.venue_market = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.TradingPairIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   market.TradingPairTable,
			Columns: market.TradingPairPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradingpair.FieldID,
				},
			},
		}
		edge.Schema = mc.schemaConfig.MarketTradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Market.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MarketUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (mc *MarketCreate) OnConflict(opts ...sql.ConflictOption) *MarketUpsertOne {
	mc.conflict = opts
	return &MarketUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Market.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MarketCreate) OnConflictColumns(columns ...string) *MarketUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MarketUpsertOne{
		create: mc,
	}
}

type (
	// MarketUpsertOne is the builder for "upsert"-ing
	//  one Market node.
	MarketUpsertOne struct {
		create *MarketCreate
	}

	// MarketUpsert is the "OnConflict" setter.
	MarketUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *MarketUpsert) SetName(v string) *MarketUpsert {
	u.Set(market.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MarketUpsert) UpdateName() *MarketUpsert {
	u.SetExcluded(market.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *MarketUpsert) SetType(v market.Type) *MarketUpsert {
	u.Set(market.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MarketUpsert) UpdateType() *MarketUpsert {
	u.SetExcluded(market.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Market.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MarketUpsertOne) UpdateNewValues() *MarketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Market.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MarketUpsertOne) Ignore() *MarketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MarketUpsertOne) DoNothing() *MarketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MarketCreate.OnConflict
// documentation for more info.
func (u *MarketUpsertOne) Update(set func(*MarketUpsert)) *MarketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MarketUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *MarketUpsertOne) SetName(v string) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateName() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *MarketUpsertOne) SetType(v market.Type) *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MarketUpsertOne) UpdateType() *MarketUpsertOne {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *MarketUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for MarketCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MarketUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MarketUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MarketUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MarketCreateBulk is the builder for creating many Market entities in bulk.
type MarketCreateBulk struct {
	config
	builders []*MarketCreate
	conflict []sql.ConflictOption
}

// Save creates the Market entities in the database.
func (mcb *MarketCreateBulk) Save(ctx context.Context) ([]*Market, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Market, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MarketMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MarketCreateBulk) SaveX(ctx context.Context) []*Market {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MarketCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MarketCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Market.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MarketUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (mcb *MarketCreateBulk) OnConflict(opts ...sql.ConflictOption) *MarketUpsertBulk {
	mcb.conflict = opts
	return &MarketUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Market.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MarketCreateBulk) OnConflictColumns(columns ...string) *MarketUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MarketUpsertBulk{
		create: mcb,
	}
}

// MarketUpsertBulk is the builder for "upsert"-ing
// a bulk of Market nodes.
type MarketUpsertBulk struct {
	create *MarketCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Market.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MarketUpsertBulk) UpdateNewValues() *MarketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Market.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MarketUpsertBulk) Ignore() *MarketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MarketUpsertBulk) DoNothing() *MarketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MarketCreateBulk.OnConflict
// documentation for more info.
func (u *MarketUpsertBulk) Update(set func(*MarketUpsert)) *MarketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MarketUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *MarketUpsertBulk) SetName(v string) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateName() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *MarketUpsertBulk) SetType(v market.Type) *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MarketUpsertBulk) UpdateType() *MarketUpsertBulk {
	return u.Update(func(s *MarketUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *MarketUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entities: OnConflict was set for builder %d. Set it on the MarketCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for MarketCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MarketUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
