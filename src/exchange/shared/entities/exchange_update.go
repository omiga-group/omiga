// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/exchange"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/internal"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/predicate"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/ticker"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/tradingpair"
)

// ExchangeUpdate is the builder for updating Exchange entities.
type ExchangeUpdate struct {
	config
	hooks     []Hook
	mutation  *ExchangeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ExchangeUpdate builder.
func (eu *ExchangeUpdate) Where(ps ...predicate.Exchange) *ExchangeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetExchangeID sets the "exchange_id" field.
func (eu *ExchangeUpdate) SetExchangeID(s string) *ExchangeUpdate {
	eu.mutation.SetExchangeID(s)
	return eu
}

// SetName sets the "name" field.
func (eu *ExchangeUpdate) SetName(s string) *ExchangeUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableName(s *string) *ExchangeUpdate {
	if s != nil {
		eu.SetName(*s)
	}
	return eu
}

// ClearName clears the value of the "name" field.
func (eu *ExchangeUpdate) ClearName() *ExchangeUpdate {
	eu.mutation.ClearName()
	return eu
}

// SetYearEstablished sets the "year_established" field.
func (eu *ExchangeUpdate) SetYearEstablished(i int) *ExchangeUpdate {
	eu.mutation.ResetYearEstablished()
	eu.mutation.SetYearEstablished(i)
	return eu
}

// SetNillableYearEstablished sets the "year_established" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableYearEstablished(i *int) *ExchangeUpdate {
	if i != nil {
		eu.SetYearEstablished(*i)
	}
	return eu
}

// AddYearEstablished adds i to the "year_established" field.
func (eu *ExchangeUpdate) AddYearEstablished(i int) *ExchangeUpdate {
	eu.mutation.AddYearEstablished(i)
	return eu
}

// ClearYearEstablished clears the value of the "year_established" field.
func (eu *ExchangeUpdate) ClearYearEstablished() *ExchangeUpdate {
	eu.mutation.ClearYearEstablished()
	return eu
}

// SetCountry sets the "country" field.
func (eu *ExchangeUpdate) SetCountry(s string) *ExchangeUpdate {
	eu.mutation.SetCountry(s)
	return eu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableCountry(s *string) *ExchangeUpdate {
	if s != nil {
		eu.SetCountry(*s)
	}
	return eu
}

// ClearCountry clears the value of the "country" field.
func (eu *ExchangeUpdate) ClearCountry() *ExchangeUpdate {
	eu.mutation.ClearCountry()
	return eu
}

// SetImage sets the "image" field.
func (eu *ExchangeUpdate) SetImage(s string) *ExchangeUpdate {
	eu.mutation.SetImage(s)
	return eu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableImage(s *string) *ExchangeUpdate {
	if s != nil {
		eu.SetImage(*s)
	}
	return eu
}

// ClearImage clears the value of the "image" field.
func (eu *ExchangeUpdate) ClearImage() *ExchangeUpdate {
	eu.mutation.ClearImage()
	return eu
}

// SetLinks sets the "links" field.
func (eu *ExchangeUpdate) SetLinks(m map[string]string) *ExchangeUpdate {
	eu.mutation.SetLinks(m)
	return eu
}

// ClearLinks clears the value of the "links" field.
func (eu *ExchangeUpdate) ClearLinks() *ExchangeUpdate {
	eu.mutation.ClearLinks()
	return eu
}

// SetHasTradingIncentive sets the "has_trading_incentive" field.
func (eu *ExchangeUpdate) SetHasTradingIncentive(b bool) *ExchangeUpdate {
	eu.mutation.SetHasTradingIncentive(b)
	return eu
}

// SetNillableHasTradingIncentive sets the "has_trading_incentive" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableHasTradingIncentive(b *bool) *ExchangeUpdate {
	if b != nil {
		eu.SetHasTradingIncentive(*b)
	}
	return eu
}

// ClearHasTradingIncentive clears the value of the "has_trading_incentive" field.
func (eu *ExchangeUpdate) ClearHasTradingIncentive() *ExchangeUpdate {
	eu.mutation.ClearHasTradingIncentive()
	return eu
}

// SetCentralized sets the "centralized" field.
func (eu *ExchangeUpdate) SetCentralized(b bool) *ExchangeUpdate {
	eu.mutation.SetCentralized(b)
	return eu
}

// SetNillableCentralized sets the "centralized" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableCentralized(b *bool) *ExchangeUpdate {
	if b != nil {
		eu.SetCentralized(*b)
	}
	return eu
}

// ClearCentralized clears the value of the "centralized" field.
func (eu *ExchangeUpdate) ClearCentralized() *ExchangeUpdate {
	eu.mutation.ClearCentralized()
	return eu
}

// SetPublicNotice sets the "public_notice" field.
func (eu *ExchangeUpdate) SetPublicNotice(s string) *ExchangeUpdate {
	eu.mutation.SetPublicNotice(s)
	return eu
}

// SetNillablePublicNotice sets the "public_notice" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillablePublicNotice(s *string) *ExchangeUpdate {
	if s != nil {
		eu.SetPublicNotice(*s)
	}
	return eu
}

// ClearPublicNotice clears the value of the "public_notice" field.
func (eu *ExchangeUpdate) ClearPublicNotice() *ExchangeUpdate {
	eu.mutation.ClearPublicNotice()
	return eu
}

// SetAlertNotice sets the "alert_notice" field.
func (eu *ExchangeUpdate) SetAlertNotice(s string) *ExchangeUpdate {
	eu.mutation.SetAlertNotice(s)
	return eu
}

// SetNillableAlertNotice sets the "alert_notice" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableAlertNotice(s *string) *ExchangeUpdate {
	if s != nil {
		eu.SetAlertNotice(*s)
	}
	return eu
}

// ClearAlertNotice clears the value of the "alert_notice" field.
func (eu *ExchangeUpdate) ClearAlertNotice() *ExchangeUpdate {
	eu.mutation.ClearAlertNotice()
	return eu
}

// SetTrustScore sets the "trust_score" field.
func (eu *ExchangeUpdate) SetTrustScore(i int) *ExchangeUpdate {
	eu.mutation.ResetTrustScore()
	eu.mutation.SetTrustScore(i)
	return eu
}

// SetNillableTrustScore sets the "trust_score" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableTrustScore(i *int) *ExchangeUpdate {
	if i != nil {
		eu.SetTrustScore(*i)
	}
	return eu
}

// AddTrustScore adds i to the "trust_score" field.
func (eu *ExchangeUpdate) AddTrustScore(i int) *ExchangeUpdate {
	eu.mutation.AddTrustScore(i)
	return eu
}

// ClearTrustScore clears the value of the "trust_score" field.
func (eu *ExchangeUpdate) ClearTrustScore() *ExchangeUpdate {
	eu.mutation.ClearTrustScore()
	return eu
}

// SetTrustScoreRank sets the "trust_score_rank" field.
func (eu *ExchangeUpdate) SetTrustScoreRank(i int) *ExchangeUpdate {
	eu.mutation.ResetTrustScoreRank()
	eu.mutation.SetTrustScoreRank(i)
	return eu
}

// SetNillableTrustScoreRank sets the "trust_score_rank" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableTrustScoreRank(i *int) *ExchangeUpdate {
	if i != nil {
		eu.SetTrustScoreRank(*i)
	}
	return eu
}

// AddTrustScoreRank adds i to the "trust_score_rank" field.
func (eu *ExchangeUpdate) AddTrustScoreRank(i int) *ExchangeUpdate {
	eu.mutation.AddTrustScoreRank(i)
	return eu
}

// ClearTrustScoreRank clears the value of the "trust_score_rank" field.
func (eu *ExchangeUpdate) ClearTrustScoreRank() *ExchangeUpdate {
	eu.mutation.ClearTrustScoreRank()
	return eu
}

// SetTradeVolume24hBtc sets the "trade_volume_24h_btc" field.
func (eu *ExchangeUpdate) SetTradeVolume24hBtc(f float64) *ExchangeUpdate {
	eu.mutation.ResetTradeVolume24hBtc()
	eu.mutation.SetTradeVolume24hBtc(f)
	return eu
}

// SetNillableTradeVolume24hBtc sets the "trade_volume_24h_btc" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableTradeVolume24hBtc(f *float64) *ExchangeUpdate {
	if f != nil {
		eu.SetTradeVolume24hBtc(*f)
	}
	return eu
}

// AddTradeVolume24hBtc adds f to the "trade_volume_24h_btc" field.
func (eu *ExchangeUpdate) AddTradeVolume24hBtc(f float64) *ExchangeUpdate {
	eu.mutation.AddTradeVolume24hBtc(f)
	return eu
}

// ClearTradeVolume24hBtc clears the value of the "trade_volume_24h_btc" field.
func (eu *ExchangeUpdate) ClearTradeVolume24hBtc() *ExchangeUpdate {
	eu.mutation.ClearTradeVolume24hBtc()
	return eu
}

// SetTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field.
func (eu *ExchangeUpdate) SetTradeVolume24hBtcNormalized(f float64) *ExchangeUpdate {
	eu.mutation.ResetTradeVolume24hBtcNormalized()
	eu.mutation.SetTradeVolume24hBtcNormalized(f)
	return eu
}

// SetNillableTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableTradeVolume24hBtcNormalized(f *float64) *ExchangeUpdate {
	if f != nil {
		eu.SetTradeVolume24hBtcNormalized(*f)
	}
	return eu
}

// AddTradeVolume24hBtcNormalized adds f to the "trade_volume_24h_btc_normalized" field.
func (eu *ExchangeUpdate) AddTradeVolume24hBtcNormalized(f float64) *ExchangeUpdate {
	eu.mutation.AddTradeVolume24hBtcNormalized(f)
	return eu
}

// ClearTradeVolume24hBtcNormalized clears the value of the "trade_volume_24h_btc_normalized" field.
func (eu *ExchangeUpdate) ClearTradeVolume24hBtcNormalized() *ExchangeUpdate {
	eu.mutation.ClearTradeVolume24hBtcNormalized()
	return eu
}

// SetMakerFee sets the "maker_fee" field.
func (eu *ExchangeUpdate) SetMakerFee(f float64) *ExchangeUpdate {
	eu.mutation.ResetMakerFee()
	eu.mutation.SetMakerFee(f)
	return eu
}

// SetNillableMakerFee sets the "maker_fee" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableMakerFee(f *float64) *ExchangeUpdate {
	if f != nil {
		eu.SetMakerFee(*f)
	}
	return eu
}

// AddMakerFee adds f to the "maker_fee" field.
func (eu *ExchangeUpdate) AddMakerFee(f float64) *ExchangeUpdate {
	eu.mutation.AddMakerFee(f)
	return eu
}

// ClearMakerFee clears the value of the "maker_fee" field.
func (eu *ExchangeUpdate) ClearMakerFee() *ExchangeUpdate {
	eu.mutation.ClearMakerFee()
	return eu
}

// SetTakerFee sets the "taker_fee" field.
func (eu *ExchangeUpdate) SetTakerFee(f float64) *ExchangeUpdate {
	eu.mutation.ResetTakerFee()
	eu.mutation.SetTakerFee(f)
	return eu
}

// SetNillableTakerFee sets the "taker_fee" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableTakerFee(f *float64) *ExchangeUpdate {
	if f != nil {
		eu.SetTakerFee(*f)
	}
	return eu
}

// AddTakerFee adds f to the "taker_fee" field.
func (eu *ExchangeUpdate) AddTakerFee(f float64) *ExchangeUpdate {
	eu.mutation.AddTakerFee(f)
	return eu
}

// ClearTakerFee clears the value of the "taker_fee" field.
func (eu *ExchangeUpdate) ClearTakerFee() *ExchangeUpdate {
	eu.mutation.ClearTakerFee()
	return eu
}

// SetSpreadFee sets the "spread_fee" field.
func (eu *ExchangeUpdate) SetSpreadFee(b bool) *ExchangeUpdate {
	eu.mutation.SetSpreadFee(b)
	return eu
}

// SetNillableSpreadFee sets the "spread_fee" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableSpreadFee(b *bool) *ExchangeUpdate {
	if b != nil {
		eu.SetSpreadFee(*b)
	}
	return eu
}

// ClearSpreadFee clears the value of the "spread_fee" field.
func (eu *ExchangeUpdate) ClearSpreadFee() *ExchangeUpdate {
	eu.mutation.ClearSpreadFee()
	return eu
}

// SetSupportAPI sets the "support_api" field.
func (eu *ExchangeUpdate) SetSupportAPI(b bool) *ExchangeUpdate {
	eu.mutation.SetSupportAPI(b)
	return eu
}

// SetNillableSupportAPI sets the "support_api" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableSupportAPI(b *bool) *ExchangeUpdate {
	if b != nil {
		eu.SetSupportAPI(*b)
	}
	return eu
}

// ClearSupportAPI clears the value of the "support_api" field.
func (eu *ExchangeUpdate) ClearSupportAPI() *ExchangeUpdate {
	eu.mutation.ClearSupportAPI()
	return eu
}

// AddTickerIDs adds the "ticker" edge to the Ticker entity by IDs.
func (eu *ExchangeUpdate) AddTickerIDs(ids ...int) *ExchangeUpdate {
	eu.mutation.AddTickerIDs(ids...)
	return eu
}

// AddTicker adds the "ticker" edges to the Ticker entity.
func (eu *ExchangeUpdate) AddTicker(t ...*Ticker) *ExchangeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddTickerIDs(ids...)
}

// AddTradingPairIDs adds the "trading_pairs" edge to the TradingPair entity by IDs.
func (eu *ExchangeUpdate) AddTradingPairIDs(ids ...int) *ExchangeUpdate {
	eu.mutation.AddTradingPairIDs(ids...)
	return eu
}

// AddTradingPairs adds the "trading_pairs" edges to the TradingPair entity.
func (eu *ExchangeUpdate) AddTradingPairs(t ...*TradingPair) *ExchangeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddTradingPairIDs(ids...)
}

// Mutation returns the ExchangeMutation object of the builder.
func (eu *ExchangeUpdate) Mutation() *ExchangeMutation {
	return eu.mutation
}

// ClearTicker clears all "ticker" edges to the Ticker entity.
func (eu *ExchangeUpdate) ClearTicker() *ExchangeUpdate {
	eu.mutation.ClearTicker()
	return eu
}

// RemoveTickerIDs removes the "ticker" edge to Ticker entities by IDs.
func (eu *ExchangeUpdate) RemoveTickerIDs(ids ...int) *ExchangeUpdate {
	eu.mutation.RemoveTickerIDs(ids...)
	return eu
}

// RemoveTicker removes "ticker" edges to Ticker entities.
func (eu *ExchangeUpdate) RemoveTicker(t ...*Ticker) *ExchangeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveTickerIDs(ids...)
}

// ClearTradingPairs clears all "trading_pairs" edges to the TradingPair entity.
func (eu *ExchangeUpdate) ClearTradingPairs() *ExchangeUpdate {
	eu.mutation.ClearTradingPairs()
	return eu
}

// RemoveTradingPairIDs removes the "trading_pairs" edge to TradingPair entities by IDs.
func (eu *ExchangeUpdate) RemoveTradingPairIDs(ids ...int) *ExchangeUpdate {
	eu.mutation.RemoveTradingPairIDs(ids...)
	return eu
}

// RemoveTradingPairs removes "trading_pairs" edges to TradingPair entities.
func (eu *ExchangeUpdate) RemoveTradingPairs(t ...*TradingPair) *ExchangeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveTradingPairIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExchangeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExchangeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("entities: uninitialized hook (forgotten import entities/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExchangeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExchangeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExchangeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eu *ExchangeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ExchangeUpdate {
	eu.modifiers = append(eu.modifiers, modifiers...)
	return eu
}

func (eu *ExchangeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   exchange.Table,
			Columns: exchange.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: exchange.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.ExchangeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldExchangeID,
		})
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldName,
		})
	}
	if eu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: exchange.FieldName,
		})
	}
	if value, ok := eu.mutation.YearEstablished(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exchange.FieldYearEstablished,
		})
	}
	if value, ok := eu.mutation.AddedYearEstablished(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exchange.FieldYearEstablished,
		})
	}
	if eu.mutation.YearEstablishedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: exchange.FieldYearEstablished,
		})
	}
	if value, ok := eu.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldCountry,
		})
	}
	if eu.mutation.CountryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: exchange.FieldCountry,
		})
	}
	if value, ok := eu.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldImage,
		})
	}
	if eu.mutation.ImageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: exchange.FieldImage,
		})
	}
	if value, ok := eu.mutation.Links(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: exchange.FieldLinks,
		})
	}
	if eu.mutation.LinksCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: exchange.FieldLinks,
		})
	}
	if value, ok := eu.mutation.HasTradingIncentive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: exchange.FieldHasTradingIncentive,
		})
	}
	if eu.mutation.HasTradingIncentiveCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: exchange.FieldHasTradingIncentive,
		})
	}
	if value, ok := eu.mutation.Centralized(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: exchange.FieldCentralized,
		})
	}
	if eu.mutation.CentralizedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: exchange.FieldCentralized,
		})
	}
	if value, ok := eu.mutation.PublicNotice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldPublicNotice,
		})
	}
	if eu.mutation.PublicNoticeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: exchange.FieldPublicNotice,
		})
	}
	if value, ok := eu.mutation.AlertNotice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldAlertNotice,
		})
	}
	if eu.mutation.AlertNoticeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: exchange.FieldAlertNotice,
		})
	}
	if value, ok := eu.mutation.TrustScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exchange.FieldTrustScore,
		})
	}
	if value, ok := eu.mutation.AddedTrustScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exchange.FieldTrustScore,
		})
	}
	if eu.mutation.TrustScoreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: exchange.FieldTrustScore,
		})
	}
	if value, ok := eu.mutation.TrustScoreRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exchange.FieldTrustScoreRank,
		})
	}
	if value, ok := eu.mutation.AddedTrustScoreRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exchange.FieldTrustScoreRank,
		})
	}
	if eu.mutation.TrustScoreRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: exchange.FieldTrustScoreRank,
		})
	}
	if value, ok := eu.mutation.TradeVolume24hBtc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldTradeVolume24hBtc,
		})
	}
	if value, ok := eu.mutation.AddedTradeVolume24hBtc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldTradeVolume24hBtc,
		})
	}
	if eu.mutation.TradeVolume24hBtcCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: exchange.FieldTradeVolume24hBtc,
		})
	}
	if value, ok := eu.mutation.TradeVolume24hBtcNormalized(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldTradeVolume24hBtcNormalized,
		})
	}
	if value, ok := eu.mutation.AddedTradeVolume24hBtcNormalized(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldTradeVolume24hBtcNormalized,
		})
	}
	if eu.mutation.TradeVolume24hBtcNormalizedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: exchange.FieldTradeVolume24hBtcNormalized,
		})
	}
	if value, ok := eu.mutation.MakerFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldMakerFee,
		})
	}
	if value, ok := eu.mutation.AddedMakerFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldMakerFee,
		})
	}
	if eu.mutation.MakerFeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: exchange.FieldMakerFee,
		})
	}
	if value, ok := eu.mutation.TakerFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldTakerFee,
		})
	}
	if value, ok := eu.mutation.AddedTakerFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldTakerFee,
		})
	}
	if eu.mutation.TakerFeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: exchange.FieldTakerFee,
		})
	}
	if value, ok := eu.mutation.SpreadFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: exchange.FieldSpreadFee,
		})
	}
	if eu.mutation.SpreadFeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: exchange.FieldSpreadFee,
		})
	}
	if value, ok := eu.mutation.SupportAPI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: exchange.FieldSupportAPI,
		})
	}
	if eu.mutation.SupportAPICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: exchange.FieldSupportAPI,
		})
	}
	if eu.mutation.TickerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TickerTable,
			Columns: []string{exchange.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticker.FieldID,
				},
			},
		}
		edge.Schema = eu.schemaConfig.Ticker
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedTickerIDs(); len(nodes) > 0 && !eu.mutation.TickerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TickerTable,
			Columns: []string{exchange.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticker.FieldID,
				},
			},
		}
		edge.Schema = eu.schemaConfig.Ticker
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TickerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TickerTable,
			Columns: []string{exchange.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticker.FieldID,
				},
			},
		}
		edge.Schema = eu.schemaConfig.Ticker
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.TradingPairsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TradingPairsTable,
			Columns: []string{exchange.TradingPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradingpair.FieldID,
				},
			},
		}
		edge.Schema = eu.schemaConfig.TradingPair
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedTradingPairsIDs(); len(nodes) > 0 && !eu.mutation.TradingPairsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TradingPairsTable,
			Columns: []string{exchange.TradingPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradingpair.FieldID,
				},
			},
		}
		edge.Schema = eu.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TradingPairsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TradingPairsTable,
			Columns: []string{exchange.TradingPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradingpair.FieldID,
				},
			},
		}
		edge.Schema = eu.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = eu.schemaConfig.Exchange
	ctx = internal.NewSchemaConfigContext(ctx, eu.schemaConfig)
	_spec.Modifiers = eu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ExchangeUpdateOne is the builder for updating a single Exchange entity.
type ExchangeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ExchangeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetExchangeID sets the "exchange_id" field.
func (euo *ExchangeUpdateOne) SetExchangeID(s string) *ExchangeUpdateOne {
	euo.mutation.SetExchangeID(s)
	return euo
}

// SetName sets the "name" field.
func (euo *ExchangeUpdateOne) SetName(s string) *ExchangeUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableName(s *string) *ExchangeUpdateOne {
	if s != nil {
		euo.SetName(*s)
	}
	return euo
}

// ClearName clears the value of the "name" field.
func (euo *ExchangeUpdateOne) ClearName() *ExchangeUpdateOne {
	euo.mutation.ClearName()
	return euo
}

// SetYearEstablished sets the "year_established" field.
func (euo *ExchangeUpdateOne) SetYearEstablished(i int) *ExchangeUpdateOne {
	euo.mutation.ResetYearEstablished()
	euo.mutation.SetYearEstablished(i)
	return euo
}

// SetNillableYearEstablished sets the "year_established" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableYearEstablished(i *int) *ExchangeUpdateOne {
	if i != nil {
		euo.SetYearEstablished(*i)
	}
	return euo
}

// AddYearEstablished adds i to the "year_established" field.
func (euo *ExchangeUpdateOne) AddYearEstablished(i int) *ExchangeUpdateOne {
	euo.mutation.AddYearEstablished(i)
	return euo
}

// ClearYearEstablished clears the value of the "year_established" field.
func (euo *ExchangeUpdateOne) ClearYearEstablished() *ExchangeUpdateOne {
	euo.mutation.ClearYearEstablished()
	return euo
}

// SetCountry sets the "country" field.
func (euo *ExchangeUpdateOne) SetCountry(s string) *ExchangeUpdateOne {
	euo.mutation.SetCountry(s)
	return euo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableCountry(s *string) *ExchangeUpdateOne {
	if s != nil {
		euo.SetCountry(*s)
	}
	return euo
}

// ClearCountry clears the value of the "country" field.
func (euo *ExchangeUpdateOne) ClearCountry() *ExchangeUpdateOne {
	euo.mutation.ClearCountry()
	return euo
}

// SetImage sets the "image" field.
func (euo *ExchangeUpdateOne) SetImage(s string) *ExchangeUpdateOne {
	euo.mutation.SetImage(s)
	return euo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableImage(s *string) *ExchangeUpdateOne {
	if s != nil {
		euo.SetImage(*s)
	}
	return euo
}

// ClearImage clears the value of the "image" field.
func (euo *ExchangeUpdateOne) ClearImage() *ExchangeUpdateOne {
	euo.mutation.ClearImage()
	return euo
}

// SetLinks sets the "links" field.
func (euo *ExchangeUpdateOne) SetLinks(m map[string]string) *ExchangeUpdateOne {
	euo.mutation.SetLinks(m)
	return euo
}

// ClearLinks clears the value of the "links" field.
func (euo *ExchangeUpdateOne) ClearLinks() *ExchangeUpdateOne {
	euo.mutation.ClearLinks()
	return euo
}

// SetHasTradingIncentive sets the "has_trading_incentive" field.
func (euo *ExchangeUpdateOne) SetHasTradingIncentive(b bool) *ExchangeUpdateOne {
	euo.mutation.SetHasTradingIncentive(b)
	return euo
}

// SetNillableHasTradingIncentive sets the "has_trading_incentive" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableHasTradingIncentive(b *bool) *ExchangeUpdateOne {
	if b != nil {
		euo.SetHasTradingIncentive(*b)
	}
	return euo
}

// ClearHasTradingIncentive clears the value of the "has_trading_incentive" field.
func (euo *ExchangeUpdateOne) ClearHasTradingIncentive() *ExchangeUpdateOne {
	euo.mutation.ClearHasTradingIncentive()
	return euo
}

// SetCentralized sets the "centralized" field.
func (euo *ExchangeUpdateOne) SetCentralized(b bool) *ExchangeUpdateOne {
	euo.mutation.SetCentralized(b)
	return euo
}

// SetNillableCentralized sets the "centralized" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableCentralized(b *bool) *ExchangeUpdateOne {
	if b != nil {
		euo.SetCentralized(*b)
	}
	return euo
}

// ClearCentralized clears the value of the "centralized" field.
func (euo *ExchangeUpdateOne) ClearCentralized() *ExchangeUpdateOne {
	euo.mutation.ClearCentralized()
	return euo
}

// SetPublicNotice sets the "public_notice" field.
func (euo *ExchangeUpdateOne) SetPublicNotice(s string) *ExchangeUpdateOne {
	euo.mutation.SetPublicNotice(s)
	return euo
}

// SetNillablePublicNotice sets the "public_notice" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillablePublicNotice(s *string) *ExchangeUpdateOne {
	if s != nil {
		euo.SetPublicNotice(*s)
	}
	return euo
}

// ClearPublicNotice clears the value of the "public_notice" field.
func (euo *ExchangeUpdateOne) ClearPublicNotice() *ExchangeUpdateOne {
	euo.mutation.ClearPublicNotice()
	return euo
}

// SetAlertNotice sets the "alert_notice" field.
func (euo *ExchangeUpdateOne) SetAlertNotice(s string) *ExchangeUpdateOne {
	euo.mutation.SetAlertNotice(s)
	return euo
}

// SetNillableAlertNotice sets the "alert_notice" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableAlertNotice(s *string) *ExchangeUpdateOne {
	if s != nil {
		euo.SetAlertNotice(*s)
	}
	return euo
}

// ClearAlertNotice clears the value of the "alert_notice" field.
func (euo *ExchangeUpdateOne) ClearAlertNotice() *ExchangeUpdateOne {
	euo.mutation.ClearAlertNotice()
	return euo
}

// SetTrustScore sets the "trust_score" field.
func (euo *ExchangeUpdateOne) SetTrustScore(i int) *ExchangeUpdateOne {
	euo.mutation.ResetTrustScore()
	euo.mutation.SetTrustScore(i)
	return euo
}

// SetNillableTrustScore sets the "trust_score" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableTrustScore(i *int) *ExchangeUpdateOne {
	if i != nil {
		euo.SetTrustScore(*i)
	}
	return euo
}

// AddTrustScore adds i to the "trust_score" field.
func (euo *ExchangeUpdateOne) AddTrustScore(i int) *ExchangeUpdateOne {
	euo.mutation.AddTrustScore(i)
	return euo
}

// ClearTrustScore clears the value of the "trust_score" field.
func (euo *ExchangeUpdateOne) ClearTrustScore() *ExchangeUpdateOne {
	euo.mutation.ClearTrustScore()
	return euo
}

// SetTrustScoreRank sets the "trust_score_rank" field.
func (euo *ExchangeUpdateOne) SetTrustScoreRank(i int) *ExchangeUpdateOne {
	euo.mutation.ResetTrustScoreRank()
	euo.mutation.SetTrustScoreRank(i)
	return euo
}

// SetNillableTrustScoreRank sets the "trust_score_rank" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableTrustScoreRank(i *int) *ExchangeUpdateOne {
	if i != nil {
		euo.SetTrustScoreRank(*i)
	}
	return euo
}

// AddTrustScoreRank adds i to the "trust_score_rank" field.
func (euo *ExchangeUpdateOne) AddTrustScoreRank(i int) *ExchangeUpdateOne {
	euo.mutation.AddTrustScoreRank(i)
	return euo
}

// ClearTrustScoreRank clears the value of the "trust_score_rank" field.
func (euo *ExchangeUpdateOne) ClearTrustScoreRank() *ExchangeUpdateOne {
	euo.mutation.ClearTrustScoreRank()
	return euo
}

// SetTradeVolume24hBtc sets the "trade_volume_24h_btc" field.
func (euo *ExchangeUpdateOne) SetTradeVolume24hBtc(f float64) *ExchangeUpdateOne {
	euo.mutation.ResetTradeVolume24hBtc()
	euo.mutation.SetTradeVolume24hBtc(f)
	return euo
}

// SetNillableTradeVolume24hBtc sets the "trade_volume_24h_btc" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableTradeVolume24hBtc(f *float64) *ExchangeUpdateOne {
	if f != nil {
		euo.SetTradeVolume24hBtc(*f)
	}
	return euo
}

// AddTradeVolume24hBtc adds f to the "trade_volume_24h_btc" field.
func (euo *ExchangeUpdateOne) AddTradeVolume24hBtc(f float64) *ExchangeUpdateOne {
	euo.mutation.AddTradeVolume24hBtc(f)
	return euo
}

// ClearTradeVolume24hBtc clears the value of the "trade_volume_24h_btc" field.
func (euo *ExchangeUpdateOne) ClearTradeVolume24hBtc() *ExchangeUpdateOne {
	euo.mutation.ClearTradeVolume24hBtc()
	return euo
}

// SetTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field.
func (euo *ExchangeUpdateOne) SetTradeVolume24hBtcNormalized(f float64) *ExchangeUpdateOne {
	euo.mutation.ResetTradeVolume24hBtcNormalized()
	euo.mutation.SetTradeVolume24hBtcNormalized(f)
	return euo
}

// SetNillableTradeVolume24hBtcNormalized sets the "trade_volume_24h_btc_normalized" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableTradeVolume24hBtcNormalized(f *float64) *ExchangeUpdateOne {
	if f != nil {
		euo.SetTradeVolume24hBtcNormalized(*f)
	}
	return euo
}

// AddTradeVolume24hBtcNormalized adds f to the "trade_volume_24h_btc_normalized" field.
func (euo *ExchangeUpdateOne) AddTradeVolume24hBtcNormalized(f float64) *ExchangeUpdateOne {
	euo.mutation.AddTradeVolume24hBtcNormalized(f)
	return euo
}

// ClearTradeVolume24hBtcNormalized clears the value of the "trade_volume_24h_btc_normalized" field.
func (euo *ExchangeUpdateOne) ClearTradeVolume24hBtcNormalized() *ExchangeUpdateOne {
	euo.mutation.ClearTradeVolume24hBtcNormalized()
	return euo
}

// SetMakerFee sets the "maker_fee" field.
func (euo *ExchangeUpdateOne) SetMakerFee(f float64) *ExchangeUpdateOne {
	euo.mutation.ResetMakerFee()
	euo.mutation.SetMakerFee(f)
	return euo
}

// SetNillableMakerFee sets the "maker_fee" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableMakerFee(f *float64) *ExchangeUpdateOne {
	if f != nil {
		euo.SetMakerFee(*f)
	}
	return euo
}

// AddMakerFee adds f to the "maker_fee" field.
func (euo *ExchangeUpdateOne) AddMakerFee(f float64) *ExchangeUpdateOne {
	euo.mutation.AddMakerFee(f)
	return euo
}

// ClearMakerFee clears the value of the "maker_fee" field.
func (euo *ExchangeUpdateOne) ClearMakerFee() *ExchangeUpdateOne {
	euo.mutation.ClearMakerFee()
	return euo
}

// SetTakerFee sets the "taker_fee" field.
func (euo *ExchangeUpdateOne) SetTakerFee(f float64) *ExchangeUpdateOne {
	euo.mutation.ResetTakerFee()
	euo.mutation.SetTakerFee(f)
	return euo
}

// SetNillableTakerFee sets the "taker_fee" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableTakerFee(f *float64) *ExchangeUpdateOne {
	if f != nil {
		euo.SetTakerFee(*f)
	}
	return euo
}

// AddTakerFee adds f to the "taker_fee" field.
func (euo *ExchangeUpdateOne) AddTakerFee(f float64) *ExchangeUpdateOne {
	euo.mutation.AddTakerFee(f)
	return euo
}

// ClearTakerFee clears the value of the "taker_fee" field.
func (euo *ExchangeUpdateOne) ClearTakerFee() *ExchangeUpdateOne {
	euo.mutation.ClearTakerFee()
	return euo
}

// SetSpreadFee sets the "spread_fee" field.
func (euo *ExchangeUpdateOne) SetSpreadFee(b bool) *ExchangeUpdateOne {
	euo.mutation.SetSpreadFee(b)
	return euo
}

// SetNillableSpreadFee sets the "spread_fee" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableSpreadFee(b *bool) *ExchangeUpdateOne {
	if b != nil {
		euo.SetSpreadFee(*b)
	}
	return euo
}

// ClearSpreadFee clears the value of the "spread_fee" field.
func (euo *ExchangeUpdateOne) ClearSpreadFee() *ExchangeUpdateOne {
	euo.mutation.ClearSpreadFee()
	return euo
}

// SetSupportAPI sets the "support_api" field.
func (euo *ExchangeUpdateOne) SetSupportAPI(b bool) *ExchangeUpdateOne {
	euo.mutation.SetSupportAPI(b)
	return euo
}

// SetNillableSupportAPI sets the "support_api" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableSupportAPI(b *bool) *ExchangeUpdateOne {
	if b != nil {
		euo.SetSupportAPI(*b)
	}
	return euo
}

// ClearSupportAPI clears the value of the "support_api" field.
func (euo *ExchangeUpdateOne) ClearSupportAPI() *ExchangeUpdateOne {
	euo.mutation.ClearSupportAPI()
	return euo
}

// AddTickerIDs adds the "ticker" edge to the Ticker entity by IDs.
func (euo *ExchangeUpdateOne) AddTickerIDs(ids ...int) *ExchangeUpdateOne {
	euo.mutation.AddTickerIDs(ids...)
	return euo
}

// AddTicker adds the "ticker" edges to the Ticker entity.
func (euo *ExchangeUpdateOne) AddTicker(t ...*Ticker) *ExchangeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddTickerIDs(ids...)
}

// AddTradingPairIDs adds the "trading_pairs" edge to the TradingPair entity by IDs.
func (euo *ExchangeUpdateOne) AddTradingPairIDs(ids ...int) *ExchangeUpdateOne {
	euo.mutation.AddTradingPairIDs(ids...)
	return euo
}

// AddTradingPairs adds the "trading_pairs" edges to the TradingPair entity.
func (euo *ExchangeUpdateOne) AddTradingPairs(t ...*TradingPair) *ExchangeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddTradingPairIDs(ids...)
}

// Mutation returns the ExchangeMutation object of the builder.
func (euo *ExchangeUpdateOne) Mutation() *ExchangeMutation {
	return euo.mutation
}

// ClearTicker clears all "ticker" edges to the Ticker entity.
func (euo *ExchangeUpdateOne) ClearTicker() *ExchangeUpdateOne {
	euo.mutation.ClearTicker()
	return euo
}

// RemoveTickerIDs removes the "ticker" edge to Ticker entities by IDs.
func (euo *ExchangeUpdateOne) RemoveTickerIDs(ids ...int) *ExchangeUpdateOne {
	euo.mutation.RemoveTickerIDs(ids...)
	return euo
}

// RemoveTicker removes "ticker" edges to Ticker entities.
func (euo *ExchangeUpdateOne) RemoveTicker(t ...*Ticker) *ExchangeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveTickerIDs(ids...)
}

// ClearTradingPairs clears all "trading_pairs" edges to the TradingPair entity.
func (euo *ExchangeUpdateOne) ClearTradingPairs() *ExchangeUpdateOne {
	euo.mutation.ClearTradingPairs()
	return euo
}

// RemoveTradingPairIDs removes the "trading_pairs" edge to TradingPair entities by IDs.
func (euo *ExchangeUpdateOne) RemoveTradingPairIDs(ids ...int) *ExchangeUpdateOne {
	euo.mutation.RemoveTradingPairIDs(ids...)
	return euo
}

// RemoveTradingPairs removes "trading_pairs" edges to TradingPair entities.
func (euo *ExchangeUpdateOne) RemoveTradingPairs(t ...*TradingPair) *ExchangeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveTradingPairIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExchangeUpdateOne) Select(field string, fields ...string) *ExchangeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Exchange entity.
func (euo *ExchangeUpdateOne) Save(ctx context.Context) (*Exchange, error) {
	var (
		err  error
		node *Exchange
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExchangeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("entities: uninitialized hook (forgotten import entities/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Exchange)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ExchangeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExchangeUpdateOne) SaveX(ctx context.Context) *Exchange {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExchangeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExchangeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euo *ExchangeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ExchangeUpdateOne {
	euo.modifiers = append(euo.modifiers, modifiers...)
	return euo
}

func (euo *ExchangeUpdateOne) sqlSave(ctx context.Context) (_node *Exchange, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   exchange.Table,
			Columns: exchange.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: exchange.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entities: missing "Exchange.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exchange.FieldID)
		for _, f := range fields {
			if !exchange.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
			}
			if f != exchange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.ExchangeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldExchangeID,
		})
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldName,
		})
	}
	if euo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: exchange.FieldName,
		})
	}
	if value, ok := euo.mutation.YearEstablished(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exchange.FieldYearEstablished,
		})
	}
	if value, ok := euo.mutation.AddedYearEstablished(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exchange.FieldYearEstablished,
		})
	}
	if euo.mutation.YearEstablishedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: exchange.FieldYearEstablished,
		})
	}
	if value, ok := euo.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldCountry,
		})
	}
	if euo.mutation.CountryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: exchange.FieldCountry,
		})
	}
	if value, ok := euo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldImage,
		})
	}
	if euo.mutation.ImageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: exchange.FieldImage,
		})
	}
	if value, ok := euo.mutation.Links(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: exchange.FieldLinks,
		})
	}
	if euo.mutation.LinksCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: exchange.FieldLinks,
		})
	}
	if value, ok := euo.mutation.HasTradingIncentive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: exchange.FieldHasTradingIncentive,
		})
	}
	if euo.mutation.HasTradingIncentiveCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: exchange.FieldHasTradingIncentive,
		})
	}
	if value, ok := euo.mutation.Centralized(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: exchange.FieldCentralized,
		})
	}
	if euo.mutation.CentralizedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: exchange.FieldCentralized,
		})
	}
	if value, ok := euo.mutation.PublicNotice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldPublicNotice,
		})
	}
	if euo.mutation.PublicNoticeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: exchange.FieldPublicNotice,
		})
	}
	if value, ok := euo.mutation.AlertNotice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldAlertNotice,
		})
	}
	if euo.mutation.AlertNoticeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: exchange.FieldAlertNotice,
		})
	}
	if value, ok := euo.mutation.TrustScore(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exchange.FieldTrustScore,
		})
	}
	if value, ok := euo.mutation.AddedTrustScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exchange.FieldTrustScore,
		})
	}
	if euo.mutation.TrustScoreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: exchange.FieldTrustScore,
		})
	}
	if value, ok := euo.mutation.TrustScoreRank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exchange.FieldTrustScoreRank,
		})
	}
	if value, ok := euo.mutation.AddedTrustScoreRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exchange.FieldTrustScoreRank,
		})
	}
	if euo.mutation.TrustScoreRankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: exchange.FieldTrustScoreRank,
		})
	}
	if value, ok := euo.mutation.TradeVolume24hBtc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldTradeVolume24hBtc,
		})
	}
	if value, ok := euo.mutation.AddedTradeVolume24hBtc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldTradeVolume24hBtc,
		})
	}
	if euo.mutation.TradeVolume24hBtcCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: exchange.FieldTradeVolume24hBtc,
		})
	}
	if value, ok := euo.mutation.TradeVolume24hBtcNormalized(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldTradeVolume24hBtcNormalized,
		})
	}
	if value, ok := euo.mutation.AddedTradeVolume24hBtcNormalized(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldTradeVolume24hBtcNormalized,
		})
	}
	if euo.mutation.TradeVolume24hBtcNormalizedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: exchange.FieldTradeVolume24hBtcNormalized,
		})
	}
	if value, ok := euo.mutation.MakerFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldMakerFee,
		})
	}
	if value, ok := euo.mutation.AddedMakerFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldMakerFee,
		})
	}
	if euo.mutation.MakerFeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: exchange.FieldMakerFee,
		})
	}
	if value, ok := euo.mutation.TakerFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldTakerFee,
		})
	}
	if value, ok := euo.mutation.AddedTakerFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exchange.FieldTakerFee,
		})
	}
	if euo.mutation.TakerFeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: exchange.FieldTakerFee,
		})
	}
	if value, ok := euo.mutation.SpreadFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: exchange.FieldSpreadFee,
		})
	}
	if euo.mutation.SpreadFeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: exchange.FieldSpreadFee,
		})
	}
	if value, ok := euo.mutation.SupportAPI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: exchange.FieldSupportAPI,
		})
	}
	if euo.mutation.SupportAPICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: exchange.FieldSupportAPI,
		})
	}
	if euo.mutation.TickerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TickerTable,
			Columns: []string{exchange.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticker.FieldID,
				},
			},
		}
		edge.Schema = euo.schemaConfig.Ticker
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedTickerIDs(); len(nodes) > 0 && !euo.mutation.TickerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TickerTable,
			Columns: []string{exchange.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticker.FieldID,
				},
			},
		}
		edge.Schema = euo.schemaConfig.Ticker
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TickerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TickerTable,
			Columns: []string{exchange.TickerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticker.FieldID,
				},
			},
		}
		edge.Schema = euo.schemaConfig.Ticker
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.TradingPairsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TradingPairsTable,
			Columns: []string{exchange.TradingPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradingpair.FieldID,
				},
			},
		}
		edge.Schema = euo.schemaConfig.TradingPair
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedTradingPairsIDs(); len(nodes) > 0 && !euo.mutation.TradingPairsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TradingPairsTable,
			Columns: []string{exchange.TradingPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradingpair.FieldID,
				},
			},
		}
		edge.Schema = euo.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TradingPairsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TradingPairsTable,
			Columns: []string{exchange.TradingPairsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradingpair.FieldID,
				},
			},
		}
		edge.Schema = euo.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = euo.schemaConfig.Exchange
	ctx = internal.NewSchemaConfigContext(ctx, euo.schemaConfig)
	_spec.Modifiers = euo.modifiers
	_node = &Exchange{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
