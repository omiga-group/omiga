// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/coin"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/exchange"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/tradingpair"
)

// TradingPairCreate is the builder for creating a TradingPair entity.
type TradingPairCreate struct {
	config
	mutation *TradingPairMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSymbol sets the "symbol" field.
func (tpc *TradingPairCreate) SetSymbol(s string) *TradingPairCreate {
	tpc.mutation.SetSymbol(s)
	return tpc
}

// SetBasePriceMinPrecision sets the "base_price_min_precision" field.
func (tpc *TradingPairCreate) SetBasePriceMinPrecision(i int) *TradingPairCreate {
	tpc.mutation.SetBasePriceMinPrecision(i)
	return tpc
}

// SetNillableBasePriceMinPrecision sets the "base_price_min_precision" field if the given value is not nil.
func (tpc *TradingPairCreate) SetNillableBasePriceMinPrecision(i *int) *TradingPairCreate {
	if i != nil {
		tpc.SetBasePriceMinPrecision(*i)
	}
	return tpc
}

// SetBasePriceMaxPrecision sets the "base_price_max_precision" field.
func (tpc *TradingPairCreate) SetBasePriceMaxPrecision(i int) *TradingPairCreate {
	tpc.mutation.SetBasePriceMaxPrecision(i)
	return tpc
}

// SetNillableBasePriceMaxPrecision sets the "base_price_max_precision" field if the given value is not nil.
func (tpc *TradingPairCreate) SetNillableBasePriceMaxPrecision(i *int) *TradingPairCreate {
	if i != nil {
		tpc.SetBasePriceMaxPrecision(*i)
	}
	return tpc
}

// SetBaseQuantityMinPrecision sets the "base_quantity_min_precision" field.
func (tpc *TradingPairCreate) SetBaseQuantityMinPrecision(i int) *TradingPairCreate {
	tpc.mutation.SetBaseQuantityMinPrecision(i)
	return tpc
}

// SetNillableBaseQuantityMinPrecision sets the "base_quantity_min_precision" field if the given value is not nil.
func (tpc *TradingPairCreate) SetNillableBaseQuantityMinPrecision(i *int) *TradingPairCreate {
	if i != nil {
		tpc.SetBaseQuantityMinPrecision(*i)
	}
	return tpc
}

// SetBaseQuantityMaxPrecision sets the "base_quantity_max_precision" field.
func (tpc *TradingPairCreate) SetBaseQuantityMaxPrecision(i int) *TradingPairCreate {
	tpc.mutation.SetBaseQuantityMaxPrecision(i)
	return tpc
}

// SetNillableBaseQuantityMaxPrecision sets the "base_quantity_max_precision" field if the given value is not nil.
func (tpc *TradingPairCreate) SetNillableBaseQuantityMaxPrecision(i *int) *TradingPairCreate {
	if i != nil {
		tpc.SetBaseQuantityMaxPrecision(*i)
	}
	return tpc
}

// SetCounterPriceMinPrecision sets the "counter_price_min_precision" field.
func (tpc *TradingPairCreate) SetCounterPriceMinPrecision(i int) *TradingPairCreate {
	tpc.mutation.SetCounterPriceMinPrecision(i)
	return tpc
}

// SetNillableCounterPriceMinPrecision sets the "counter_price_min_precision" field if the given value is not nil.
func (tpc *TradingPairCreate) SetNillableCounterPriceMinPrecision(i *int) *TradingPairCreate {
	if i != nil {
		tpc.SetCounterPriceMinPrecision(*i)
	}
	return tpc
}

// SetCounterPriceMaxPrecision sets the "counter_price_max_precision" field.
func (tpc *TradingPairCreate) SetCounterPriceMaxPrecision(i int) *TradingPairCreate {
	tpc.mutation.SetCounterPriceMaxPrecision(i)
	return tpc
}

// SetNillableCounterPriceMaxPrecision sets the "counter_price_max_precision" field if the given value is not nil.
func (tpc *TradingPairCreate) SetNillableCounterPriceMaxPrecision(i *int) *TradingPairCreate {
	if i != nil {
		tpc.SetCounterPriceMaxPrecision(*i)
	}
	return tpc
}

// SetCounterQuantityMinPrecision sets the "counter_quantity_min_precision" field.
func (tpc *TradingPairCreate) SetCounterQuantityMinPrecision(i int) *TradingPairCreate {
	tpc.mutation.SetCounterQuantityMinPrecision(i)
	return tpc
}

// SetNillableCounterQuantityMinPrecision sets the "counter_quantity_min_precision" field if the given value is not nil.
func (tpc *TradingPairCreate) SetNillableCounterQuantityMinPrecision(i *int) *TradingPairCreate {
	if i != nil {
		tpc.SetCounterQuantityMinPrecision(*i)
	}
	return tpc
}

// SetCounterQuantityMaxPrecision sets the "counter_quantity_max_precision" field.
func (tpc *TradingPairCreate) SetCounterQuantityMaxPrecision(i int) *TradingPairCreate {
	tpc.mutation.SetCounterQuantityMaxPrecision(i)
	return tpc
}

// SetNillableCounterQuantityMaxPrecision sets the "counter_quantity_max_precision" field if the given value is not nil.
func (tpc *TradingPairCreate) SetNillableCounterQuantityMaxPrecision(i *int) *TradingPairCreate {
	if i != nil {
		tpc.SetCounterQuantityMaxPrecision(*i)
	}
	return tpc
}

// SetExchangeID sets the "exchange" edge to the Exchange entity by ID.
func (tpc *TradingPairCreate) SetExchangeID(id int) *TradingPairCreate {
	tpc.mutation.SetExchangeID(id)
	return tpc
}

// SetExchange sets the "exchange" edge to the Exchange entity.
func (tpc *TradingPairCreate) SetExchange(e *Exchange) *TradingPairCreate {
	return tpc.SetExchangeID(e.ID)
}

// SetBaseID sets the "base" edge to the Coin entity by ID.
func (tpc *TradingPairCreate) SetBaseID(id int) *TradingPairCreate {
	tpc.mutation.SetBaseID(id)
	return tpc
}

// SetBase sets the "base" edge to the Coin entity.
func (tpc *TradingPairCreate) SetBase(c *Coin) *TradingPairCreate {
	return tpc.SetBaseID(c.ID)
}

// SetCounterID sets the "counter" edge to the Coin entity by ID.
func (tpc *TradingPairCreate) SetCounterID(id int) *TradingPairCreate {
	tpc.mutation.SetCounterID(id)
	return tpc
}

// SetCounter sets the "counter" edge to the Coin entity.
func (tpc *TradingPairCreate) SetCounter(c *Coin) *TradingPairCreate {
	return tpc.SetCounterID(c.ID)
}

// Mutation returns the TradingPairMutation object of the builder.
func (tpc *TradingPairCreate) Mutation() *TradingPairMutation {
	return tpc.mutation
}

// Save creates the TradingPair in the database.
func (tpc *TradingPairCreate) Save(ctx context.Context) (*TradingPair, error) {
	var (
		err  error
		node *TradingPair
	)
	if len(tpc.hooks) == 0 {
		if err = tpc.check(); err != nil {
			return nil, err
		}
		node, err = tpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TradingPairMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tpc.check(); err != nil {
				return nil, err
			}
			tpc.mutation = mutation
			if node, err = tpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tpc.hooks) - 1; i >= 0; i-- {
			if tpc.hooks[i] == nil {
				return nil, fmt.Errorf("entities: uninitialized hook (forgotten import entities/runtime?)")
			}
			mut = tpc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tpc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TradingPair)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TradingPairMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tpc *TradingPairCreate) SaveX(ctx context.Context) *TradingPair {
	v, err := tpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpc *TradingPairCreate) Exec(ctx context.Context) error {
	_, err := tpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpc *TradingPairCreate) ExecX(ctx context.Context) {
	if err := tpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpc *TradingPairCreate) check() error {
	if _, ok := tpc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`entities: missing required field "TradingPair.symbol"`)}
	}
	if _, ok := tpc.mutation.ExchangeID(); !ok {
		return &ValidationError{Name: "exchange", err: errors.New(`entities: missing required edge "TradingPair.exchange"`)}
	}
	if _, ok := tpc.mutation.BaseID(); !ok {
		return &ValidationError{Name: "base", err: errors.New(`entities: missing required edge "TradingPair.base"`)}
	}
	if _, ok := tpc.mutation.CounterID(); !ok {
		return &ValidationError{Name: "counter", err: errors.New(`entities: missing required edge "TradingPair.counter"`)}
	}
	return nil
}

func (tpc *TradingPairCreate) sqlSave(ctx context.Context) (*TradingPair, error) {
	_node, _spec := tpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tpc *TradingPairCreate) createSpec() (*TradingPair, *sqlgraph.CreateSpec) {
	var (
		_node = &TradingPair{config: tpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tradingpair.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tradingpair.FieldID,
			},
		}
	)
	_spec.Schema = tpc.schemaConfig.TradingPair
	_spec.OnConflict = tpc.conflict
	if value, ok := tpc.mutation.Symbol(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tradingpair.FieldSymbol,
		})
		_node.Symbol = value
	}
	if value, ok := tpc.mutation.BasePriceMinPrecision(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBasePriceMinPrecision,
		})
		_node.BasePriceMinPrecision = value
	}
	if value, ok := tpc.mutation.BasePriceMaxPrecision(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBasePriceMaxPrecision,
		})
		_node.BasePriceMaxPrecision = value
	}
	if value, ok := tpc.mutation.BaseQuantityMinPrecision(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBaseQuantityMinPrecision,
		})
		_node.BaseQuantityMinPrecision = value
	}
	if value, ok := tpc.mutation.BaseQuantityMaxPrecision(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldBaseQuantityMaxPrecision,
		})
		_node.BaseQuantityMaxPrecision = value
	}
	if value, ok := tpc.mutation.CounterPriceMinPrecision(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterPriceMinPrecision,
		})
		_node.CounterPriceMinPrecision = value
	}
	if value, ok := tpc.mutation.CounterPriceMaxPrecision(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterPriceMaxPrecision,
		})
		_node.CounterPriceMaxPrecision = value
	}
	if value, ok := tpc.mutation.CounterQuantityMinPrecision(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterQuantityMinPrecision,
		})
		_node.CounterQuantityMinPrecision = value
	}
	if value, ok := tpc.mutation.CounterQuantityMaxPrecision(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tradingpair.FieldCounterQuantityMaxPrecision,
		})
		_node.CounterQuantityMaxPrecision = value
	}
	if nodes := tpc.mutation.ExchangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.ExchangeTable,
			Columns: []string{tradingpair.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exchange.FieldID,
				},
			},
		}
		edge.Schema = tpc.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.exchange_trading_pair = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tpc.mutation.BaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.BaseTable,
			Columns: []string{tradingpair.BaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coin.FieldID,
				},
			},
		}
		edge.Schema = tpc.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.coin_coin_base = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tpc.mutation.CounterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradingpair.CounterTable,
			Columns: []string{tradingpair.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coin.FieldID,
				},
			},
		}
		edge.Schema = tpc.schemaConfig.TradingPair
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.coin_coin_counter = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TradingPair.Create().
//		SetSymbol(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TradingPairUpsert) {
//			SetSymbol(v+v).
//		}).
//		Exec(ctx)
func (tpc *TradingPairCreate) OnConflict(opts ...sql.ConflictOption) *TradingPairUpsertOne {
	tpc.conflict = opts
	return &TradingPairUpsertOne{
		create: tpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TradingPair.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tpc *TradingPairCreate) OnConflictColumns(columns ...string) *TradingPairUpsertOne {
	tpc.conflict = append(tpc.conflict, sql.ConflictColumns(columns...))
	return &TradingPairUpsertOne{
		create: tpc,
	}
}

type (
	// TradingPairUpsertOne is the builder for "upsert"-ing
	//  one TradingPair node.
	TradingPairUpsertOne struct {
		create *TradingPairCreate
	}

	// TradingPairUpsert is the "OnConflict" setter.
	TradingPairUpsert struct {
		*sql.UpdateSet
	}
)

// SetSymbol sets the "symbol" field.
func (u *TradingPairUpsert) SetSymbol(v string) *TradingPairUpsert {
	u.Set(tradingpair.FieldSymbol, v)
	return u
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *TradingPairUpsert) UpdateSymbol() *TradingPairUpsert {
	u.SetExcluded(tradingpair.FieldSymbol)
	return u
}

// SetBasePriceMinPrecision sets the "base_price_min_precision" field.
func (u *TradingPairUpsert) SetBasePriceMinPrecision(v int) *TradingPairUpsert {
	u.Set(tradingpair.FieldBasePriceMinPrecision, v)
	return u
}

// UpdateBasePriceMinPrecision sets the "base_price_min_precision" field to the value that was provided on create.
func (u *TradingPairUpsert) UpdateBasePriceMinPrecision() *TradingPairUpsert {
	u.SetExcluded(tradingpair.FieldBasePriceMinPrecision)
	return u
}

// AddBasePriceMinPrecision adds v to the "base_price_min_precision" field.
func (u *TradingPairUpsert) AddBasePriceMinPrecision(v int) *TradingPairUpsert {
	u.Add(tradingpair.FieldBasePriceMinPrecision, v)
	return u
}

// ClearBasePriceMinPrecision clears the value of the "base_price_min_precision" field.
func (u *TradingPairUpsert) ClearBasePriceMinPrecision() *TradingPairUpsert {
	u.SetNull(tradingpair.FieldBasePriceMinPrecision)
	return u
}

// SetBasePriceMaxPrecision sets the "base_price_max_precision" field.
func (u *TradingPairUpsert) SetBasePriceMaxPrecision(v int) *TradingPairUpsert {
	u.Set(tradingpair.FieldBasePriceMaxPrecision, v)
	return u
}

// UpdateBasePriceMaxPrecision sets the "base_price_max_precision" field to the value that was provided on create.
func (u *TradingPairUpsert) UpdateBasePriceMaxPrecision() *TradingPairUpsert {
	u.SetExcluded(tradingpair.FieldBasePriceMaxPrecision)
	return u
}

// AddBasePriceMaxPrecision adds v to the "base_price_max_precision" field.
func (u *TradingPairUpsert) AddBasePriceMaxPrecision(v int) *TradingPairUpsert {
	u.Add(tradingpair.FieldBasePriceMaxPrecision, v)
	return u
}

// ClearBasePriceMaxPrecision clears the value of the "base_price_max_precision" field.
func (u *TradingPairUpsert) ClearBasePriceMaxPrecision() *TradingPairUpsert {
	u.SetNull(tradingpair.FieldBasePriceMaxPrecision)
	return u
}

// SetBaseQuantityMinPrecision sets the "base_quantity_min_precision" field.
func (u *TradingPairUpsert) SetBaseQuantityMinPrecision(v int) *TradingPairUpsert {
	u.Set(tradingpair.FieldBaseQuantityMinPrecision, v)
	return u
}

// UpdateBaseQuantityMinPrecision sets the "base_quantity_min_precision" field to the value that was provided on create.
func (u *TradingPairUpsert) UpdateBaseQuantityMinPrecision() *TradingPairUpsert {
	u.SetExcluded(tradingpair.FieldBaseQuantityMinPrecision)
	return u
}

// AddBaseQuantityMinPrecision adds v to the "base_quantity_min_precision" field.
func (u *TradingPairUpsert) AddBaseQuantityMinPrecision(v int) *TradingPairUpsert {
	u.Add(tradingpair.FieldBaseQuantityMinPrecision, v)
	return u
}

// ClearBaseQuantityMinPrecision clears the value of the "base_quantity_min_precision" field.
func (u *TradingPairUpsert) ClearBaseQuantityMinPrecision() *TradingPairUpsert {
	u.SetNull(tradingpair.FieldBaseQuantityMinPrecision)
	return u
}

// SetBaseQuantityMaxPrecision sets the "base_quantity_max_precision" field.
func (u *TradingPairUpsert) SetBaseQuantityMaxPrecision(v int) *TradingPairUpsert {
	u.Set(tradingpair.FieldBaseQuantityMaxPrecision, v)
	return u
}

// UpdateBaseQuantityMaxPrecision sets the "base_quantity_max_precision" field to the value that was provided on create.
func (u *TradingPairUpsert) UpdateBaseQuantityMaxPrecision() *TradingPairUpsert {
	u.SetExcluded(tradingpair.FieldBaseQuantityMaxPrecision)
	return u
}

// AddBaseQuantityMaxPrecision adds v to the "base_quantity_max_precision" field.
func (u *TradingPairUpsert) AddBaseQuantityMaxPrecision(v int) *TradingPairUpsert {
	u.Add(tradingpair.FieldBaseQuantityMaxPrecision, v)
	return u
}

// ClearBaseQuantityMaxPrecision clears the value of the "base_quantity_max_precision" field.
func (u *TradingPairUpsert) ClearBaseQuantityMaxPrecision() *TradingPairUpsert {
	u.SetNull(tradingpair.FieldBaseQuantityMaxPrecision)
	return u
}

// SetCounterPriceMinPrecision sets the "counter_price_min_precision" field.
func (u *TradingPairUpsert) SetCounterPriceMinPrecision(v int) *TradingPairUpsert {
	u.Set(tradingpair.FieldCounterPriceMinPrecision, v)
	return u
}

// UpdateCounterPriceMinPrecision sets the "counter_price_min_precision" field to the value that was provided on create.
func (u *TradingPairUpsert) UpdateCounterPriceMinPrecision() *TradingPairUpsert {
	u.SetExcluded(tradingpair.FieldCounterPriceMinPrecision)
	return u
}

// AddCounterPriceMinPrecision adds v to the "counter_price_min_precision" field.
func (u *TradingPairUpsert) AddCounterPriceMinPrecision(v int) *TradingPairUpsert {
	u.Add(tradingpair.FieldCounterPriceMinPrecision, v)
	return u
}

// ClearCounterPriceMinPrecision clears the value of the "counter_price_min_precision" field.
func (u *TradingPairUpsert) ClearCounterPriceMinPrecision() *TradingPairUpsert {
	u.SetNull(tradingpair.FieldCounterPriceMinPrecision)
	return u
}

// SetCounterPriceMaxPrecision sets the "counter_price_max_precision" field.
func (u *TradingPairUpsert) SetCounterPriceMaxPrecision(v int) *TradingPairUpsert {
	u.Set(tradingpair.FieldCounterPriceMaxPrecision, v)
	return u
}

// UpdateCounterPriceMaxPrecision sets the "counter_price_max_precision" field to the value that was provided on create.
func (u *TradingPairUpsert) UpdateCounterPriceMaxPrecision() *TradingPairUpsert {
	u.SetExcluded(tradingpair.FieldCounterPriceMaxPrecision)
	return u
}

// AddCounterPriceMaxPrecision adds v to the "counter_price_max_precision" field.
func (u *TradingPairUpsert) AddCounterPriceMaxPrecision(v int) *TradingPairUpsert {
	u.Add(tradingpair.FieldCounterPriceMaxPrecision, v)
	return u
}

// ClearCounterPriceMaxPrecision clears the value of the "counter_price_max_precision" field.
func (u *TradingPairUpsert) ClearCounterPriceMaxPrecision() *TradingPairUpsert {
	u.SetNull(tradingpair.FieldCounterPriceMaxPrecision)
	return u
}

// SetCounterQuantityMinPrecision sets the "counter_quantity_min_precision" field.
func (u *TradingPairUpsert) SetCounterQuantityMinPrecision(v int) *TradingPairUpsert {
	u.Set(tradingpair.FieldCounterQuantityMinPrecision, v)
	return u
}

// UpdateCounterQuantityMinPrecision sets the "counter_quantity_min_precision" field to the value that was provided on create.
func (u *TradingPairUpsert) UpdateCounterQuantityMinPrecision() *TradingPairUpsert {
	u.SetExcluded(tradingpair.FieldCounterQuantityMinPrecision)
	return u
}

// AddCounterQuantityMinPrecision adds v to the "counter_quantity_min_precision" field.
func (u *TradingPairUpsert) AddCounterQuantityMinPrecision(v int) *TradingPairUpsert {
	u.Add(tradingpair.FieldCounterQuantityMinPrecision, v)
	return u
}

// ClearCounterQuantityMinPrecision clears the value of the "counter_quantity_min_precision" field.
func (u *TradingPairUpsert) ClearCounterQuantityMinPrecision() *TradingPairUpsert {
	u.SetNull(tradingpair.FieldCounterQuantityMinPrecision)
	return u
}

// SetCounterQuantityMaxPrecision sets the "counter_quantity_max_precision" field.
func (u *TradingPairUpsert) SetCounterQuantityMaxPrecision(v int) *TradingPairUpsert {
	u.Set(tradingpair.FieldCounterQuantityMaxPrecision, v)
	return u
}

// UpdateCounterQuantityMaxPrecision sets the "counter_quantity_max_precision" field to the value that was provided on create.
func (u *TradingPairUpsert) UpdateCounterQuantityMaxPrecision() *TradingPairUpsert {
	u.SetExcluded(tradingpair.FieldCounterQuantityMaxPrecision)
	return u
}

// AddCounterQuantityMaxPrecision adds v to the "counter_quantity_max_precision" field.
func (u *TradingPairUpsert) AddCounterQuantityMaxPrecision(v int) *TradingPairUpsert {
	u.Add(tradingpair.FieldCounterQuantityMaxPrecision, v)
	return u
}

// ClearCounterQuantityMaxPrecision clears the value of the "counter_quantity_max_precision" field.
func (u *TradingPairUpsert) ClearCounterQuantityMaxPrecision() *TradingPairUpsert {
	u.SetNull(tradingpair.FieldCounterQuantityMaxPrecision)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TradingPair.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TradingPairUpsertOne) UpdateNewValues() *TradingPairUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TradingPair.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TradingPairUpsertOne) Ignore() *TradingPairUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TradingPairUpsertOne) DoNothing() *TradingPairUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TradingPairCreate.OnConflict
// documentation for more info.
func (u *TradingPairUpsertOne) Update(set func(*TradingPairUpsert)) *TradingPairUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TradingPairUpsert{UpdateSet: update})
	}))
	return u
}

// SetSymbol sets the "symbol" field.
func (u *TradingPairUpsertOne) SetSymbol(v string) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *TradingPairUpsertOne) UpdateSymbol() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateSymbol()
	})
}

// SetBasePriceMinPrecision sets the "base_price_min_precision" field.
func (u *TradingPairUpsertOne) SetBasePriceMinPrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetBasePriceMinPrecision(v)
	})
}

// AddBasePriceMinPrecision adds v to the "base_price_min_precision" field.
func (u *TradingPairUpsertOne) AddBasePriceMinPrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddBasePriceMinPrecision(v)
	})
}

// UpdateBasePriceMinPrecision sets the "base_price_min_precision" field to the value that was provided on create.
func (u *TradingPairUpsertOne) UpdateBasePriceMinPrecision() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateBasePriceMinPrecision()
	})
}

// ClearBasePriceMinPrecision clears the value of the "base_price_min_precision" field.
func (u *TradingPairUpsertOne) ClearBasePriceMinPrecision() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.ClearBasePriceMinPrecision()
	})
}

// SetBasePriceMaxPrecision sets the "base_price_max_precision" field.
func (u *TradingPairUpsertOne) SetBasePriceMaxPrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetBasePriceMaxPrecision(v)
	})
}

// AddBasePriceMaxPrecision adds v to the "base_price_max_precision" field.
func (u *TradingPairUpsertOne) AddBasePriceMaxPrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddBasePriceMaxPrecision(v)
	})
}

// UpdateBasePriceMaxPrecision sets the "base_price_max_precision" field to the value that was provided on create.
func (u *TradingPairUpsertOne) UpdateBasePriceMaxPrecision() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateBasePriceMaxPrecision()
	})
}

// ClearBasePriceMaxPrecision clears the value of the "base_price_max_precision" field.
func (u *TradingPairUpsertOne) ClearBasePriceMaxPrecision() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.ClearBasePriceMaxPrecision()
	})
}

// SetBaseQuantityMinPrecision sets the "base_quantity_min_precision" field.
func (u *TradingPairUpsertOne) SetBaseQuantityMinPrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetBaseQuantityMinPrecision(v)
	})
}

// AddBaseQuantityMinPrecision adds v to the "base_quantity_min_precision" field.
func (u *TradingPairUpsertOne) AddBaseQuantityMinPrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddBaseQuantityMinPrecision(v)
	})
}

// UpdateBaseQuantityMinPrecision sets the "base_quantity_min_precision" field to the value that was provided on create.
func (u *TradingPairUpsertOne) UpdateBaseQuantityMinPrecision() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateBaseQuantityMinPrecision()
	})
}

// ClearBaseQuantityMinPrecision clears the value of the "base_quantity_min_precision" field.
func (u *TradingPairUpsertOne) ClearBaseQuantityMinPrecision() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.ClearBaseQuantityMinPrecision()
	})
}

// SetBaseQuantityMaxPrecision sets the "base_quantity_max_precision" field.
func (u *TradingPairUpsertOne) SetBaseQuantityMaxPrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetBaseQuantityMaxPrecision(v)
	})
}

// AddBaseQuantityMaxPrecision adds v to the "base_quantity_max_precision" field.
func (u *TradingPairUpsertOne) AddBaseQuantityMaxPrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddBaseQuantityMaxPrecision(v)
	})
}

// UpdateBaseQuantityMaxPrecision sets the "base_quantity_max_precision" field to the value that was provided on create.
func (u *TradingPairUpsertOne) UpdateBaseQuantityMaxPrecision() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateBaseQuantityMaxPrecision()
	})
}

// ClearBaseQuantityMaxPrecision clears the value of the "base_quantity_max_precision" field.
func (u *TradingPairUpsertOne) ClearBaseQuantityMaxPrecision() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.ClearBaseQuantityMaxPrecision()
	})
}

// SetCounterPriceMinPrecision sets the "counter_price_min_precision" field.
func (u *TradingPairUpsertOne) SetCounterPriceMinPrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetCounterPriceMinPrecision(v)
	})
}

// AddCounterPriceMinPrecision adds v to the "counter_price_min_precision" field.
func (u *TradingPairUpsertOne) AddCounterPriceMinPrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddCounterPriceMinPrecision(v)
	})
}

// UpdateCounterPriceMinPrecision sets the "counter_price_min_precision" field to the value that was provided on create.
func (u *TradingPairUpsertOne) UpdateCounterPriceMinPrecision() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateCounterPriceMinPrecision()
	})
}

// ClearCounterPriceMinPrecision clears the value of the "counter_price_min_precision" field.
func (u *TradingPairUpsertOne) ClearCounterPriceMinPrecision() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.ClearCounterPriceMinPrecision()
	})
}

// SetCounterPriceMaxPrecision sets the "counter_price_max_precision" field.
func (u *TradingPairUpsertOne) SetCounterPriceMaxPrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetCounterPriceMaxPrecision(v)
	})
}

// AddCounterPriceMaxPrecision adds v to the "counter_price_max_precision" field.
func (u *TradingPairUpsertOne) AddCounterPriceMaxPrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddCounterPriceMaxPrecision(v)
	})
}

// UpdateCounterPriceMaxPrecision sets the "counter_price_max_precision" field to the value that was provided on create.
func (u *TradingPairUpsertOne) UpdateCounterPriceMaxPrecision() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateCounterPriceMaxPrecision()
	})
}

// ClearCounterPriceMaxPrecision clears the value of the "counter_price_max_precision" field.
func (u *TradingPairUpsertOne) ClearCounterPriceMaxPrecision() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.ClearCounterPriceMaxPrecision()
	})
}

// SetCounterQuantityMinPrecision sets the "counter_quantity_min_precision" field.
func (u *TradingPairUpsertOne) SetCounterQuantityMinPrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetCounterQuantityMinPrecision(v)
	})
}

// AddCounterQuantityMinPrecision adds v to the "counter_quantity_min_precision" field.
func (u *TradingPairUpsertOne) AddCounterQuantityMinPrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddCounterQuantityMinPrecision(v)
	})
}

// UpdateCounterQuantityMinPrecision sets the "counter_quantity_min_precision" field to the value that was provided on create.
func (u *TradingPairUpsertOne) UpdateCounterQuantityMinPrecision() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateCounterQuantityMinPrecision()
	})
}

// ClearCounterQuantityMinPrecision clears the value of the "counter_quantity_min_precision" field.
func (u *TradingPairUpsertOne) ClearCounterQuantityMinPrecision() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.ClearCounterQuantityMinPrecision()
	})
}

// SetCounterQuantityMaxPrecision sets the "counter_quantity_max_precision" field.
func (u *TradingPairUpsertOne) SetCounterQuantityMaxPrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetCounterQuantityMaxPrecision(v)
	})
}

// AddCounterQuantityMaxPrecision adds v to the "counter_quantity_max_precision" field.
func (u *TradingPairUpsertOne) AddCounterQuantityMaxPrecision(v int) *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddCounterQuantityMaxPrecision(v)
	})
}

// UpdateCounterQuantityMaxPrecision sets the "counter_quantity_max_precision" field to the value that was provided on create.
func (u *TradingPairUpsertOne) UpdateCounterQuantityMaxPrecision() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateCounterQuantityMaxPrecision()
	})
}

// ClearCounterQuantityMaxPrecision clears the value of the "counter_quantity_max_precision" field.
func (u *TradingPairUpsertOne) ClearCounterQuantityMaxPrecision() *TradingPairUpsertOne {
	return u.Update(func(s *TradingPairUpsert) {
		s.ClearCounterQuantityMaxPrecision()
	})
}

// Exec executes the query.
func (u *TradingPairUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for TradingPairCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TradingPairUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TradingPairUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TradingPairUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TradingPairCreateBulk is the builder for creating many TradingPair entities in bulk.
type TradingPairCreateBulk struct {
	config
	builders []*TradingPairCreate
	conflict []sql.ConflictOption
}

// Save creates the TradingPair entities in the database.
func (tpcb *TradingPairCreateBulk) Save(ctx context.Context) ([]*TradingPair, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tpcb.builders))
	nodes := make([]*TradingPair, len(tpcb.builders))
	mutators := make([]Mutator, len(tpcb.builders))
	for i := range tpcb.builders {
		func(i int, root context.Context) {
			builder := tpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TradingPairMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tpcb *TradingPairCreateBulk) SaveX(ctx context.Context) []*TradingPair {
	v, err := tpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpcb *TradingPairCreateBulk) Exec(ctx context.Context) error {
	_, err := tpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpcb *TradingPairCreateBulk) ExecX(ctx context.Context) {
	if err := tpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TradingPair.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TradingPairUpsert) {
//			SetSymbol(v+v).
//		}).
//		Exec(ctx)
func (tpcb *TradingPairCreateBulk) OnConflict(opts ...sql.ConflictOption) *TradingPairUpsertBulk {
	tpcb.conflict = opts
	return &TradingPairUpsertBulk{
		create: tpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TradingPair.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tpcb *TradingPairCreateBulk) OnConflictColumns(columns ...string) *TradingPairUpsertBulk {
	tpcb.conflict = append(tpcb.conflict, sql.ConflictColumns(columns...))
	return &TradingPairUpsertBulk{
		create: tpcb,
	}
}

// TradingPairUpsertBulk is the builder for "upsert"-ing
// a bulk of TradingPair nodes.
type TradingPairUpsertBulk struct {
	create *TradingPairCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TradingPair.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TradingPairUpsertBulk) UpdateNewValues() *TradingPairUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TradingPair.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TradingPairUpsertBulk) Ignore() *TradingPairUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TradingPairUpsertBulk) DoNothing() *TradingPairUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TradingPairCreateBulk.OnConflict
// documentation for more info.
func (u *TradingPairUpsertBulk) Update(set func(*TradingPairUpsert)) *TradingPairUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TradingPairUpsert{UpdateSet: update})
	}))
	return u
}

// SetSymbol sets the "symbol" field.
func (u *TradingPairUpsertBulk) SetSymbol(v string) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *TradingPairUpsertBulk) UpdateSymbol() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateSymbol()
	})
}

// SetBasePriceMinPrecision sets the "base_price_min_precision" field.
func (u *TradingPairUpsertBulk) SetBasePriceMinPrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetBasePriceMinPrecision(v)
	})
}

// AddBasePriceMinPrecision adds v to the "base_price_min_precision" field.
func (u *TradingPairUpsertBulk) AddBasePriceMinPrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddBasePriceMinPrecision(v)
	})
}

// UpdateBasePriceMinPrecision sets the "base_price_min_precision" field to the value that was provided on create.
func (u *TradingPairUpsertBulk) UpdateBasePriceMinPrecision() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateBasePriceMinPrecision()
	})
}

// ClearBasePriceMinPrecision clears the value of the "base_price_min_precision" field.
func (u *TradingPairUpsertBulk) ClearBasePriceMinPrecision() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.ClearBasePriceMinPrecision()
	})
}

// SetBasePriceMaxPrecision sets the "base_price_max_precision" field.
func (u *TradingPairUpsertBulk) SetBasePriceMaxPrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetBasePriceMaxPrecision(v)
	})
}

// AddBasePriceMaxPrecision adds v to the "base_price_max_precision" field.
func (u *TradingPairUpsertBulk) AddBasePriceMaxPrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddBasePriceMaxPrecision(v)
	})
}

// UpdateBasePriceMaxPrecision sets the "base_price_max_precision" field to the value that was provided on create.
func (u *TradingPairUpsertBulk) UpdateBasePriceMaxPrecision() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateBasePriceMaxPrecision()
	})
}

// ClearBasePriceMaxPrecision clears the value of the "base_price_max_precision" field.
func (u *TradingPairUpsertBulk) ClearBasePriceMaxPrecision() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.ClearBasePriceMaxPrecision()
	})
}

// SetBaseQuantityMinPrecision sets the "base_quantity_min_precision" field.
func (u *TradingPairUpsertBulk) SetBaseQuantityMinPrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetBaseQuantityMinPrecision(v)
	})
}

// AddBaseQuantityMinPrecision adds v to the "base_quantity_min_precision" field.
func (u *TradingPairUpsertBulk) AddBaseQuantityMinPrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddBaseQuantityMinPrecision(v)
	})
}

// UpdateBaseQuantityMinPrecision sets the "base_quantity_min_precision" field to the value that was provided on create.
func (u *TradingPairUpsertBulk) UpdateBaseQuantityMinPrecision() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateBaseQuantityMinPrecision()
	})
}

// ClearBaseQuantityMinPrecision clears the value of the "base_quantity_min_precision" field.
func (u *TradingPairUpsertBulk) ClearBaseQuantityMinPrecision() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.ClearBaseQuantityMinPrecision()
	})
}

// SetBaseQuantityMaxPrecision sets the "base_quantity_max_precision" field.
func (u *TradingPairUpsertBulk) SetBaseQuantityMaxPrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetBaseQuantityMaxPrecision(v)
	})
}

// AddBaseQuantityMaxPrecision adds v to the "base_quantity_max_precision" field.
func (u *TradingPairUpsertBulk) AddBaseQuantityMaxPrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddBaseQuantityMaxPrecision(v)
	})
}

// UpdateBaseQuantityMaxPrecision sets the "base_quantity_max_precision" field to the value that was provided on create.
func (u *TradingPairUpsertBulk) UpdateBaseQuantityMaxPrecision() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateBaseQuantityMaxPrecision()
	})
}

// ClearBaseQuantityMaxPrecision clears the value of the "base_quantity_max_precision" field.
func (u *TradingPairUpsertBulk) ClearBaseQuantityMaxPrecision() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.ClearBaseQuantityMaxPrecision()
	})
}

// SetCounterPriceMinPrecision sets the "counter_price_min_precision" field.
func (u *TradingPairUpsertBulk) SetCounterPriceMinPrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetCounterPriceMinPrecision(v)
	})
}

// AddCounterPriceMinPrecision adds v to the "counter_price_min_precision" field.
func (u *TradingPairUpsertBulk) AddCounterPriceMinPrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddCounterPriceMinPrecision(v)
	})
}

// UpdateCounterPriceMinPrecision sets the "counter_price_min_precision" field to the value that was provided on create.
func (u *TradingPairUpsertBulk) UpdateCounterPriceMinPrecision() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateCounterPriceMinPrecision()
	})
}

// ClearCounterPriceMinPrecision clears the value of the "counter_price_min_precision" field.
func (u *TradingPairUpsertBulk) ClearCounterPriceMinPrecision() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.ClearCounterPriceMinPrecision()
	})
}

// SetCounterPriceMaxPrecision sets the "counter_price_max_precision" field.
func (u *TradingPairUpsertBulk) SetCounterPriceMaxPrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetCounterPriceMaxPrecision(v)
	})
}

// AddCounterPriceMaxPrecision adds v to the "counter_price_max_precision" field.
func (u *TradingPairUpsertBulk) AddCounterPriceMaxPrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddCounterPriceMaxPrecision(v)
	})
}

// UpdateCounterPriceMaxPrecision sets the "counter_price_max_precision" field to the value that was provided on create.
func (u *TradingPairUpsertBulk) UpdateCounterPriceMaxPrecision() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateCounterPriceMaxPrecision()
	})
}

// ClearCounterPriceMaxPrecision clears the value of the "counter_price_max_precision" field.
func (u *TradingPairUpsertBulk) ClearCounterPriceMaxPrecision() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.ClearCounterPriceMaxPrecision()
	})
}

// SetCounterQuantityMinPrecision sets the "counter_quantity_min_precision" field.
func (u *TradingPairUpsertBulk) SetCounterQuantityMinPrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetCounterQuantityMinPrecision(v)
	})
}

// AddCounterQuantityMinPrecision adds v to the "counter_quantity_min_precision" field.
func (u *TradingPairUpsertBulk) AddCounterQuantityMinPrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddCounterQuantityMinPrecision(v)
	})
}

// UpdateCounterQuantityMinPrecision sets the "counter_quantity_min_precision" field to the value that was provided on create.
func (u *TradingPairUpsertBulk) UpdateCounterQuantityMinPrecision() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateCounterQuantityMinPrecision()
	})
}

// ClearCounterQuantityMinPrecision clears the value of the "counter_quantity_min_precision" field.
func (u *TradingPairUpsertBulk) ClearCounterQuantityMinPrecision() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.ClearCounterQuantityMinPrecision()
	})
}

// SetCounterQuantityMaxPrecision sets the "counter_quantity_max_precision" field.
func (u *TradingPairUpsertBulk) SetCounterQuantityMaxPrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.SetCounterQuantityMaxPrecision(v)
	})
}

// AddCounterQuantityMaxPrecision adds v to the "counter_quantity_max_precision" field.
func (u *TradingPairUpsertBulk) AddCounterQuantityMaxPrecision(v int) *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.AddCounterQuantityMaxPrecision(v)
	})
}

// UpdateCounterQuantityMaxPrecision sets the "counter_quantity_max_precision" field to the value that was provided on create.
func (u *TradingPairUpsertBulk) UpdateCounterQuantityMaxPrecision() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.UpdateCounterQuantityMaxPrecision()
	})
}

// ClearCounterQuantityMaxPrecision clears the value of the "counter_quantity_max_precision" field.
func (u *TradingPairUpsertBulk) ClearCounterQuantityMaxPrecision() *TradingPairUpsertBulk {
	return u.Update(func(s *TradingPairUpsert) {
		s.ClearCounterQuantityMaxPrecision()
	})
}

// Exec executes the query.
func (u *TradingPairUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entities: OnConflict was set for builder %d. Set it on the TradingPairCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for TradingPairCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TradingPairUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
