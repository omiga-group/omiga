
// Code generated by go-omiga-template, DO NOT EDIT.

package syntheticorderv1

import (
	"strings"
	"time"

	"github.com/google/uuid"
)

type ID struct {
  UUID uuid.UUID
}

    
    // SyntheticOrderEvent represents a SyntheticOrderEvent model.
type SyntheticOrderEvent struct {
  Metadata Metadata `json:"metadata"`
  Data Data `json:"data"`
}
    
    
    // Metadata represents a Metadata model.
type Metadata struct {
  Id ID `json:"id"` // The unique message ID
  Source string `json:"source"` // undefined
  Type AnonymousSchema3 `json:"type"`
  Subject string `json:"subject"` // undefined
  Time time.Time `json:"time"` // undefined
  CorrelationId ID `json:"correlationId"` // undefined
  Actor string `json:"actor"` // undefined
}
    
    
    // AnonymousSchema3 represents an enum of string.
type AnonymousSchema3 string

const (
  AnonymousSchema3OrderSubmitted AnonymousSchema3 = "orderSubmitted"
  AnonymousSchema3OrderCancel = "orderCancel"
)
    
    
    // Data represents a Data model.
type Data struct {
  BeforeState *Order `json:"beforeState",omitempty`
  AfterState Order `json:"afterState"`
}
    
    
    // Order represents a Order model.
type Order struct {
  Id ID `json:"id"` // The unique synthetic order ID
  Exchange *AnonymousSchema9 `json:"exchange",omitempty`
  OrderDetails OrderDetails `json:"orderDetails"`
  AdditionalProperties *[]interface{} `json:"additionalProperties",omitempty` // undefined
}
    
    
    // AnonymousSchema9 represents a AnonymousSchema9 model.
type AnonymousSchema9 struct {
  Id *string `json:"id",omitempty` // The unique ID of the supported exchange
}
    
    
    // OrderDetails represents a OrderDetails model.
type OrderDetails struct {
  Id ID `json:"id"` // The unique order ID
  BaseCurrency *AnonymousSchema12 `json:"baseCurrency",omitempty`
  CounterCurrency *AnonymousSchema12 `json:"counterCurrency",omitempty`
  Type *AnonymousSchema17 `json:"type",omitempty`
  Side *AnonymousSchema18 `json:"side",omitempty`
  Quantity *AnonymousSchema19 `json:"quantity",omitempty`
  Price *AnonymousSchema19 `json:"price",omitempty`
  AdditionalProperties *[]interface{} `json:"additionalProperties",omitempty` // undefined
}
    
    
    // AnonymousSchema12 represents a AnonymousSchema12 model.
type AnonymousSchema12 struct {
  Name string `json:"name"` // undefined
  Code string `json:"code"` // undefined
  MaxPrecision int `json:"maxPrecision"` // undefined
  Digital bool `json:"digital"` // undefined
}
    
    
    // AnonymousSchema17 represents an enum of string.
type AnonymousSchema17 string

const (
  AnonymousSchema17Instant AnonymousSchema17 = "instant"
  AnonymousSchema17Market = "market"
  AnonymousSchema17Limit = "limit"
  AnonymousSchema17Stop = "stop"
  AnonymousSchema17TrailingStop = "trailing_stop"
)
    
    
    // AnonymousSchema18 represents an enum of string.
type AnonymousSchema18 string

const (
  AnonymousSchema18Bid AnonymousSchema18 = "bid"
  AnonymousSchema18Ask = "ask"
)
    
    
    // AnonymousSchema19 represents a AnonymousSchema19 model.
type AnonymousSchema19 struct {
  Amount int `json:"amount"` // undefined
  Scale int `json:"scale"` // undefined
  Currency AnonymousSchema12 `json:"currency"`
}
    
func (i *ID) UnmarshalJSON(b []byte) error {
  if parsedUuid, err := uuid.Parse(strings.Trim(string(b), "\"")); err == nil {
    i.UUID = parsedUuid
  } else {
    return err
  }

  return nil
}
