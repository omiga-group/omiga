// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package appsetup

import (
	"context"
	"github.com/go-co-op/gocron"
	"github.com/omiga-group/omiga/src/shared/enterprise/database/postgres"
	"github.com/omiga-group/omiga/src/shared/enterprise/messaging/pulsar"
	"github.com/omiga-group/omiga/src/shared/enterprise/outbox"
	"github.com/omiga-group/omiga/src/venue/shared/entities"
	outbox2 "github.com/omiga-group/omiga/src/venue/shared/outbox"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func NewEntgoClient(logger *zap.SugaredLogger, postgresConfig postgres.PostgresConfig) (entities.EntgoClient, error) {
	database, err := postgres.NewPostgres(logger, postgresConfig)
	if err != nil {
		return nil, err
	}
	entgoClient, err := entities.NewEntgoClient(logger, database)
	if err != nil {
		return nil, err
	}
	return entgoClient, nil
}

func NewOutboxBackgroundService(ctx context.Context, logger *zap.SugaredLogger, pulsarClient pulsar.PulsarClient, pulsarConfig pulsar.PulsarConfig, outboxConfig outbox.OutboxConfig, entgoClient entities.EntgoClient, jobScheduler *gocron.Scheduler) (outbox2.OutboxBackgroundService, error) {
	messageProducer, err := pulsar.NewPulsarMessageProducer(logger, pulsarClient, pulsarConfig)
	if err != nil {
		return nil, err
	}
	outboxBackgroundService, err := outbox2.NewOutboxBackgroundService(ctx, logger, outboxConfig, messageProducer, entgoClient, jobScheduler)
	if err != nil {
		return nil, err
	}
	return outboxBackgroundService, nil
}
