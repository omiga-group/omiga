// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/currency"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/market"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/outbox"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/ticker"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/tradingpair"
	"github.com/omiga-group/omiga/src/exchange/shared/entities/venue"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// CurrencyEdge is the edge representation of Currency.
type CurrencyEdge struct {
	Node   *Currency `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// CurrencyConnection is the connection containing edges to Currency.
type CurrencyConnection struct {
	Edges      []*CurrencyEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *CurrencyConnection) build(nodes []*Currency, pager *currencyPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Currency
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Currency {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Currency {
			return nodes[i]
		}
	}
	c.Edges = make([]*CurrencyEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CurrencyEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CurrencyPaginateOption enables pagination customization.
type CurrencyPaginateOption func(*currencyPager) error

// WithCurrencyOrder configures pagination ordering.
func WithCurrencyOrder(order *CurrencyOrder) CurrencyPaginateOption {
	if order == nil {
		order = DefaultCurrencyOrder
	}
	o := *order
	return func(pager *currencyPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCurrencyOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCurrencyFilter configures pagination filter.
func WithCurrencyFilter(filter func(*CurrencyQuery) (*CurrencyQuery, error)) CurrencyPaginateOption {
	return func(pager *currencyPager) error {
		if filter == nil {
			return errors.New("CurrencyQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type currencyPager struct {
	order  *CurrencyOrder
	filter func(*CurrencyQuery) (*CurrencyQuery, error)
}

func newCurrencyPager(opts []CurrencyPaginateOption) (*currencyPager, error) {
	pager := &currencyPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCurrencyOrder
	}
	return pager, nil
}

func (p *currencyPager) applyFilter(query *CurrencyQuery) (*CurrencyQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *currencyPager) toCursor(c *Currency) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *currencyPager) applyCursors(query *CurrencyQuery, after, before *Cursor) *CurrencyQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultCurrencyOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *currencyPager) applyOrder(query *CurrencyQuery, reverse bool) *CurrencyQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultCurrencyOrder.Field {
		query = query.Order(direction.orderFunc(DefaultCurrencyOrder.Field.field))
	}
	return query
}

func (p *currencyPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCurrencyOrder.Field {
			b.Comma().Ident(DefaultCurrencyOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Currency.
func (c *CurrencyQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CurrencyPaginateOption,
) (*CurrencyConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCurrencyPager(opts)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CurrencyConnection{Edges: []*CurrencyEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	c = pager.applyCursors(c, after, before)
	c = pager.applyOrder(c, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CurrencyOrderFieldSymbol orders Currency by symbol.
	CurrencyOrderFieldSymbol = &CurrencyOrderField{
		field: currency.FieldSymbol,
		toCursor: func(c *Currency) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Symbol,
			}
		},
	}
	// CurrencyOrderFieldName orders Currency by name.
	CurrencyOrderFieldName = &CurrencyOrderField{
		field: currency.FieldName,
		toCursor: func(c *Currency) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Name,
			}
		},
	}
	// CurrencyOrderFieldType orders Currency by type.
	CurrencyOrderFieldType = &CurrencyOrderField{
		field: currency.FieldType,
		toCursor: func(c *Currency) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Type,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CurrencyOrderField) String() string {
	var str string
	switch f.field {
	case currency.FieldSymbol:
		str = "symbol"
	case currency.FieldName:
		str = "name"
	case currency.FieldType:
		str = "type"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CurrencyOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CurrencyOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CurrencyOrderField %T must be a string", v)
	}
	switch str {
	case "symbol":
		*f = *CurrencyOrderFieldSymbol
	case "name":
		*f = *CurrencyOrderFieldName
	case "type":
		*f = *CurrencyOrderFieldType
	default:
		return fmt.Errorf("%s is not a valid CurrencyOrderField", str)
	}
	return nil
}

// CurrencyOrderField defines the ordering field of Currency.
type CurrencyOrderField struct {
	field    string
	toCursor func(*Currency) Cursor
}

// CurrencyOrder defines the ordering of Currency.
type CurrencyOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *CurrencyOrderField `json:"field"`
}

// DefaultCurrencyOrder is the default ordering of Currency.
var DefaultCurrencyOrder = &CurrencyOrder{
	Direction: OrderDirectionAsc,
	Field: &CurrencyOrderField{
		field: currency.FieldID,
		toCursor: func(c *Currency) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Currency into CurrencyEdge.
func (c *Currency) ToEdge(order *CurrencyOrder) *CurrencyEdge {
	if order == nil {
		order = DefaultCurrencyOrder
	}
	return &CurrencyEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// MarketEdge is the edge representation of Market.
type MarketEdge struct {
	Node   *Market `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// MarketConnection is the connection containing edges to Market.
type MarketConnection struct {
	Edges      []*MarketEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *MarketConnection) build(nodes []*Market, pager *marketPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Market
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Market {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Market {
			return nodes[i]
		}
	}
	c.Edges = make([]*MarketEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MarketEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MarketPaginateOption enables pagination customization.
type MarketPaginateOption func(*marketPager) error

// WithMarketOrder configures pagination ordering.
func WithMarketOrder(order *MarketOrder) MarketPaginateOption {
	if order == nil {
		order = DefaultMarketOrder
	}
	o := *order
	return func(pager *marketPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMarketOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMarketFilter configures pagination filter.
func WithMarketFilter(filter func(*MarketQuery) (*MarketQuery, error)) MarketPaginateOption {
	return func(pager *marketPager) error {
		if filter == nil {
			return errors.New("MarketQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type marketPager struct {
	order  *MarketOrder
	filter func(*MarketQuery) (*MarketQuery, error)
}

func newMarketPager(opts []MarketPaginateOption) (*marketPager, error) {
	pager := &marketPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMarketOrder
	}
	return pager, nil
}

func (p *marketPager) applyFilter(query *MarketQuery) (*MarketQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *marketPager) toCursor(m *Market) Cursor {
	return p.order.Field.toCursor(m)
}

func (p *marketPager) applyCursors(query *MarketQuery, after, before *Cursor) *MarketQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultMarketOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *marketPager) applyOrder(query *MarketQuery, reverse bool) *MarketQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultMarketOrder.Field {
		query = query.Order(direction.orderFunc(DefaultMarketOrder.Field.field))
	}
	return query
}

func (p *marketPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultMarketOrder.Field {
			b.Comma().Ident(DefaultMarketOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Market.
func (m *MarketQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MarketPaginateOption,
) (*MarketConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMarketPager(opts)
	if err != nil {
		return nil, err
	}
	if m, err = pager.applyFilter(m); err != nil {
		return nil, err
	}
	conn := &MarketConnection{Edges: []*MarketEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = m.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	m = pager.applyCursors(m, after, before)
	m = pager.applyOrder(m, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := m.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// MarketOrderFieldName orders Market by name.
	MarketOrderFieldName = &MarketOrderField{
		field: market.FieldName,
		toCursor: func(m *Market) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.Name,
			}
		},
	}
	// MarketOrderFieldType orders Market by type.
	MarketOrderFieldType = &MarketOrderField{
		field: market.FieldType,
		toCursor: func(m *Market) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.Type,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MarketOrderField) String() string {
	var str string
	switch f.field {
	case market.FieldName:
		str = "name"
	case market.FieldType:
		str = "type"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MarketOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MarketOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MarketOrderField %T must be a string", v)
	}
	switch str {
	case "name":
		*f = *MarketOrderFieldName
	case "type":
		*f = *MarketOrderFieldType
	default:
		return fmt.Errorf("%s is not a valid MarketOrderField", str)
	}
	return nil
}

// MarketOrderField defines the ordering field of Market.
type MarketOrderField struct {
	field    string
	toCursor func(*Market) Cursor
}

// MarketOrder defines the ordering of Market.
type MarketOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *MarketOrderField `json:"field"`
}

// DefaultMarketOrder is the default ordering of Market.
var DefaultMarketOrder = &MarketOrder{
	Direction: OrderDirectionAsc,
	Field: &MarketOrderField{
		field: market.FieldID,
		toCursor: func(m *Market) Cursor {
			return Cursor{ID: m.ID}
		},
	},
}

// ToEdge converts Market into MarketEdge.
func (m *Market) ToEdge(order *MarketOrder) *MarketEdge {
	if order == nil {
		order = DefaultMarketOrder
	}
	return &MarketEdge{
		Node:   m,
		Cursor: order.Field.toCursor(m),
	}
}

// OutboxEdge is the edge representation of Outbox.
type OutboxEdge struct {
	Node   *Outbox `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// OutboxConnection is the connection containing edges to Outbox.
type OutboxConnection struct {
	Edges      []*OutboxEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *OutboxConnection) build(nodes []*Outbox, pager *outboxPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Outbox
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Outbox {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Outbox {
			return nodes[i]
		}
	}
	c.Edges = make([]*OutboxEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OutboxEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OutboxPaginateOption enables pagination customization.
type OutboxPaginateOption func(*outboxPager) error

// WithOutboxOrder configures pagination ordering.
func WithOutboxOrder(order *OutboxOrder) OutboxPaginateOption {
	if order == nil {
		order = DefaultOutboxOrder
	}
	o := *order
	return func(pager *outboxPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOutboxOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOutboxFilter configures pagination filter.
func WithOutboxFilter(filter func(*OutboxQuery) (*OutboxQuery, error)) OutboxPaginateOption {
	return func(pager *outboxPager) error {
		if filter == nil {
			return errors.New("OutboxQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type outboxPager struct {
	order  *OutboxOrder
	filter func(*OutboxQuery) (*OutboxQuery, error)
}

func newOutboxPager(opts []OutboxPaginateOption) (*outboxPager, error) {
	pager := &outboxPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOutboxOrder
	}
	return pager, nil
}

func (p *outboxPager) applyFilter(query *OutboxQuery) (*OutboxQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *outboxPager) toCursor(o *Outbox) Cursor {
	return p.order.Field.toCursor(o)
}

func (p *outboxPager) applyCursors(query *OutboxQuery, after, before *Cursor) *OutboxQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOutboxOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *outboxPager) applyOrder(query *OutboxQuery, reverse bool) *OutboxQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOutboxOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOutboxOrder.Field.field))
	}
	return query
}

func (p *outboxPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOutboxOrder.Field {
			b.Comma().Ident(DefaultOutboxOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Outbox.
func (o *OutboxQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OutboxPaginateOption,
) (*OutboxConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOutboxPager(opts)
	if err != nil {
		return nil, err
	}
	if o, err = pager.applyFilter(o); err != nil {
		return nil, err
	}
	conn := &OutboxConnection{Edges: []*OutboxEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = o.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	o = pager.applyCursors(o, after, before)
	o = pager.applyOrder(o, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		o.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := o.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := o.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// OutboxOrderField defines the ordering field of Outbox.
type OutboxOrderField struct {
	field    string
	toCursor func(*Outbox) Cursor
}

// OutboxOrder defines the ordering of Outbox.
type OutboxOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *OutboxOrderField `json:"field"`
}

// DefaultOutboxOrder is the default ordering of Outbox.
var DefaultOutboxOrder = &OutboxOrder{
	Direction: OrderDirectionAsc,
	Field: &OutboxOrderField{
		field: outbox.FieldID,
		toCursor: func(o *Outbox) Cursor {
			return Cursor{ID: o.ID}
		},
	},
}

// ToEdge converts Outbox into OutboxEdge.
func (o *Outbox) ToEdge(order *OutboxOrder) *OutboxEdge {
	if order == nil {
		order = DefaultOutboxOrder
	}
	return &OutboxEdge{
		Node:   o,
		Cursor: order.Field.toCursor(o),
	}
}

// TickerEdge is the edge representation of Ticker.
type TickerEdge struct {
	Node   *Ticker `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// TickerConnection is the connection containing edges to Ticker.
type TickerConnection struct {
	Edges      []*TickerEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *TickerConnection) build(nodes []*Ticker, pager *tickerPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Ticker
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Ticker {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Ticker {
			return nodes[i]
		}
	}
	c.Edges = make([]*TickerEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TickerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TickerPaginateOption enables pagination customization.
type TickerPaginateOption func(*tickerPager) error

// WithTickerOrder configures pagination ordering.
func WithTickerOrder(order *TickerOrder) TickerPaginateOption {
	if order == nil {
		order = DefaultTickerOrder
	}
	o := *order
	return func(pager *tickerPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTickerOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTickerFilter configures pagination filter.
func WithTickerFilter(filter func(*TickerQuery) (*TickerQuery, error)) TickerPaginateOption {
	return func(pager *tickerPager) error {
		if filter == nil {
			return errors.New("TickerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tickerPager struct {
	order  *TickerOrder
	filter func(*TickerQuery) (*TickerQuery, error)
}

func newTickerPager(opts []TickerPaginateOption) (*tickerPager, error) {
	pager := &tickerPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTickerOrder
	}
	return pager, nil
}

func (p *tickerPager) applyFilter(query *TickerQuery) (*TickerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tickerPager) toCursor(t *Ticker) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *tickerPager) applyCursors(query *TickerQuery, after, before *Cursor) *TickerQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTickerOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *tickerPager) applyOrder(query *TickerQuery, reverse bool) *TickerQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTickerOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTickerOrder.Field.field))
	}
	return query
}

func (p *tickerPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTickerOrder.Field {
			b.Comma().Ident(DefaultTickerOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Ticker.
func (t *TickerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TickerPaginateOption,
) (*TickerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTickerPager(opts)
	if err != nil {
		return nil, err
	}
	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &TickerConnection{Edges: []*TickerEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = t.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	t = pager.applyCursors(t, after, before)
	t = pager.applyOrder(t, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		t.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := t.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TickerOrderFieldBase orders Ticker by base.
	TickerOrderFieldBase = &TickerOrderField{
		field: ticker.FieldBase,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Base,
			}
		},
	}
	// TickerOrderFieldBaseCoinID orders Ticker by base_coin_id.
	TickerOrderFieldBaseCoinID = &TickerOrderField{
		field: ticker.FieldBaseCoinID,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.BaseCoinID,
			}
		},
	}
	// TickerOrderFieldCounter orders Ticker by counter.
	TickerOrderFieldCounter = &TickerOrderField{
		field: ticker.FieldCounter,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Counter,
			}
		},
	}
	// TickerOrderFieldCounterCoinID orders Ticker by counter_coin_id.
	TickerOrderFieldCounterCoinID = &TickerOrderField{
		field: ticker.FieldCounterCoinID,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.CounterCoinID,
			}
		},
	}
	// TickerOrderFieldLast orders Ticker by last.
	TickerOrderFieldLast = &TickerOrderField{
		field: ticker.FieldLast,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Last,
			}
		},
	}
	// TickerOrderFieldVolume orders Ticker by volume.
	TickerOrderFieldVolume = &TickerOrderField{
		field: ticker.FieldVolume,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Volume,
			}
		},
	}
	// TickerOrderFieldTrustScore orders Ticker by trust_score.
	TickerOrderFieldTrustScore = &TickerOrderField{
		field: ticker.FieldTrustScore,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.TrustScore,
			}
		},
	}
	// TickerOrderFieldBidAskSpreadPercentage orders Ticker by bid_ask_spread_percentage.
	TickerOrderFieldBidAskSpreadPercentage = &TickerOrderField{
		field: ticker.FieldBidAskSpreadPercentage,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.BidAskSpreadPercentage,
			}
		},
	}
	// TickerOrderFieldTimestamp orders Ticker by timestamp.
	TickerOrderFieldTimestamp = &TickerOrderField{
		field: ticker.FieldTimestamp,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Timestamp,
			}
		},
	}
	// TickerOrderFieldLastTradedAt orders Ticker by last_traded_at.
	TickerOrderFieldLastTradedAt = &TickerOrderField{
		field: ticker.FieldLastTradedAt,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.LastTradedAt,
			}
		},
	}
	// TickerOrderFieldLastFetchAt orders Ticker by last_fetch_at.
	TickerOrderFieldLastFetchAt = &TickerOrderField{
		field: ticker.FieldLastFetchAt,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.LastFetchAt,
			}
		},
	}
	// TickerOrderFieldIsAnomaly orders Ticker by is_anomaly.
	TickerOrderFieldIsAnomaly = &TickerOrderField{
		field: ticker.FieldIsAnomaly,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.IsAnomaly,
			}
		},
	}
	// TickerOrderFieldIsStale orders Ticker by is_stale.
	TickerOrderFieldIsStale = &TickerOrderField{
		field: ticker.FieldIsStale,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.IsStale,
			}
		},
	}
	// TickerOrderFieldTradeURL orders Ticker by trade_url.
	TickerOrderFieldTradeURL = &TickerOrderField{
		field: ticker.FieldTradeURL,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.TradeURL,
			}
		},
	}
	// TickerOrderFieldTokenInfoURL orders Ticker by token_info_url.
	TickerOrderFieldTokenInfoURL = &TickerOrderField{
		field: ticker.FieldTokenInfoURL,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.TokenInfoURL,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TickerOrderField) String() string {
	var str string
	switch f.field {
	case ticker.FieldBase:
		str = "base"
	case ticker.FieldBaseCoinID:
		str = "baseCoinId"
	case ticker.FieldCounter:
		str = "counter"
	case ticker.FieldCounterCoinID:
		str = "counterCoinId"
	case ticker.FieldLast:
		str = "last"
	case ticker.FieldVolume:
		str = "volume"
	case ticker.FieldTrustScore:
		str = "trustScore"
	case ticker.FieldBidAskSpreadPercentage:
		str = "bidAskSpreadPercentage"
	case ticker.FieldTimestamp:
		str = "timestamp"
	case ticker.FieldLastTradedAt:
		str = "lastTradedAt"
	case ticker.FieldLastFetchAt:
		str = "lastFetchAt"
	case ticker.FieldIsAnomaly:
		str = "isAnomaly"
	case ticker.FieldIsStale:
		str = "isStale"
	case ticker.FieldTradeURL:
		str = "tradeUrl"
	case ticker.FieldTokenInfoURL:
		str = "tokenInfoUrl"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TickerOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TickerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TickerOrderField %T must be a string", v)
	}
	switch str {
	case "base":
		*f = *TickerOrderFieldBase
	case "baseCoinId":
		*f = *TickerOrderFieldBaseCoinID
	case "counter":
		*f = *TickerOrderFieldCounter
	case "counterCoinId":
		*f = *TickerOrderFieldCounterCoinID
	case "last":
		*f = *TickerOrderFieldLast
	case "volume":
		*f = *TickerOrderFieldVolume
	case "trustScore":
		*f = *TickerOrderFieldTrustScore
	case "bidAskSpreadPercentage":
		*f = *TickerOrderFieldBidAskSpreadPercentage
	case "timestamp":
		*f = *TickerOrderFieldTimestamp
	case "lastTradedAt":
		*f = *TickerOrderFieldLastTradedAt
	case "lastFetchAt":
		*f = *TickerOrderFieldLastFetchAt
	case "isAnomaly":
		*f = *TickerOrderFieldIsAnomaly
	case "isStale":
		*f = *TickerOrderFieldIsStale
	case "tradeUrl":
		*f = *TickerOrderFieldTradeURL
	case "tokenInfoUrl":
		*f = *TickerOrderFieldTokenInfoURL
	default:
		return fmt.Errorf("%s is not a valid TickerOrderField", str)
	}
	return nil
}

// TickerOrderField defines the ordering field of Ticker.
type TickerOrderField struct {
	field    string
	toCursor func(*Ticker) Cursor
}

// TickerOrder defines the ordering of Ticker.
type TickerOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *TickerOrderField `json:"field"`
}

// DefaultTickerOrder is the default ordering of Ticker.
var DefaultTickerOrder = &TickerOrder{
	Direction: OrderDirectionAsc,
	Field: &TickerOrderField{
		field: ticker.FieldID,
		toCursor: func(t *Ticker) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Ticker into TickerEdge.
func (t *Ticker) ToEdge(order *TickerOrder) *TickerEdge {
	if order == nil {
		order = DefaultTickerOrder
	}
	return &TickerEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// TradingPairEdge is the edge representation of TradingPair.
type TradingPairEdge struct {
	Node   *TradingPair `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// TradingPairConnection is the connection containing edges to TradingPair.
type TradingPairConnection struct {
	Edges      []*TradingPairEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *TradingPairConnection) build(nodes []*TradingPair, pager *tradingpairPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *TradingPair
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TradingPair {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TradingPair {
			return nodes[i]
		}
	}
	c.Edges = make([]*TradingPairEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TradingPairEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TradingPairPaginateOption enables pagination customization.
type TradingPairPaginateOption func(*tradingpairPager) error

// WithTradingPairOrder configures pagination ordering.
func WithTradingPairOrder(order *TradingPairOrder) TradingPairPaginateOption {
	if order == nil {
		order = DefaultTradingPairOrder
	}
	o := *order
	return func(pager *tradingpairPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTradingPairOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTradingPairFilter configures pagination filter.
func WithTradingPairFilter(filter func(*TradingPairQuery) (*TradingPairQuery, error)) TradingPairPaginateOption {
	return func(pager *tradingpairPager) error {
		if filter == nil {
			return errors.New("TradingPairQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tradingpairPager struct {
	order  *TradingPairOrder
	filter func(*TradingPairQuery) (*TradingPairQuery, error)
}

func newTradingPairPager(opts []TradingPairPaginateOption) (*tradingpairPager, error) {
	pager := &tradingpairPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTradingPairOrder
	}
	return pager, nil
}

func (p *tradingpairPager) applyFilter(query *TradingPairQuery) (*TradingPairQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tradingpairPager) toCursor(tp *TradingPair) Cursor {
	return p.order.Field.toCursor(tp)
}

func (p *tradingpairPager) applyCursors(query *TradingPairQuery, after, before *Cursor) *TradingPairQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTradingPairOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *tradingpairPager) applyOrder(query *TradingPairQuery, reverse bool) *TradingPairQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTradingPairOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTradingPairOrder.Field.field))
	}
	return query
}

func (p *tradingpairPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTradingPairOrder.Field {
			b.Comma().Ident(DefaultTradingPairOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to TradingPair.
func (tp *TradingPairQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TradingPairPaginateOption,
) (*TradingPairConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTradingPairPager(opts)
	if err != nil {
		return nil, err
	}
	if tp, err = pager.applyFilter(tp); err != nil {
		return nil, err
	}
	conn := &TradingPairConnection{Edges: []*TradingPairEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = tp.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	tp = pager.applyCursors(tp, after, before)
	tp = pager.applyOrder(tp, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		tp.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := tp.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := tp.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TradingPairOrderFieldSymbol orders TradingPair by symbol.
	TradingPairOrderFieldSymbol = &TradingPairOrderField{
		field: tradingpair.FieldSymbol,
		toCursor: func(tp *TradingPair) Cursor {
			return Cursor{
				ID:    tp.ID,
				Value: tp.Symbol,
			}
		},
	}
	// TradingPairOrderFieldBasePriceMinPrecision orders TradingPair by base_price_min_precision.
	TradingPairOrderFieldBasePriceMinPrecision = &TradingPairOrderField{
		field: tradingpair.FieldBasePriceMinPrecision,
		toCursor: func(tp *TradingPair) Cursor {
			return Cursor{
				ID:    tp.ID,
				Value: tp.BasePriceMinPrecision,
			}
		},
	}
	// TradingPairOrderFieldBasePriceMaxPrecision orders TradingPair by base_price_max_precision.
	TradingPairOrderFieldBasePriceMaxPrecision = &TradingPairOrderField{
		field: tradingpair.FieldBasePriceMaxPrecision,
		toCursor: func(tp *TradingPair) Cursor {
			return Cursor{
				ID:    tp.ID,
				Value: tp.BasePriceMaxPrecision,
			}
		},
	}
	// TradingPairOrderFieldBaseQuantityMinPrecision orders TradingPair by base_quantity_min_precision.
	TradingPairOrderFieldBaseQuantityMinPrecision = &TradingPairOrderField{
		field: tradingpair.FieldBaseQuantityMinPrecision,
		toCursor: func(tp *TradingPair) Cursor {
			return Cursor{
				ID:    tp.ID,
				Value: tp.BaseQuantityMinPrecision,
			}
		},
	}
	// TradingPairOrderFieldBaseQuantityMaxPrecision orders TradingPair by base_quantity_max_precision.
	TradingPairOrderFieldBaseQuantityMaxPrecision = &TradingPairOrderField{
		field: tradingpair.FieldBaseQuantityMaxPrecision,
		toCursor: func(tp *TradingPair) Cursor {
			return Cursor{
				ID:    tp.ID,
				Value: tp.BaseQuantityMaxPrecision,
			}
		},
	}
	// TradingPairOrderFieldCounterPriceMinPrecision orders TradingPair by counter_price_min_precision.
	TradingPairOrderFieldCounterPriceMinPrecision = &TradingPairOrderField{
		field: tradingpair.FieldCounterPriceMinPrecision,
		toCursor: func(tp *TradingPair) Cursor {
			return Cursor{
				ID:    tp.ID,
				Value: tp.CounterPriceMinPrecision,
			}
		},
	}
	// TradingPairOrderFieldCounterPriceMaxPrecision orders TradingPair by counter_price_max_precision.
	TradingPairOrderFieldCounterPriceMaxPrecision = &TradingPairOrderField{
		field: tradingpair.FieldCounterPriceMaxPrecision,
		toCursor: func(tp *TradingPair) Cursor {
			return Cursor{
				ID:    tp.ID,
				Value: tp.CounterPriceMaxPrecision,
			}
		},
	}
	// TradingPairOrderFieldCounterQuantityMinPrecision orders TradingPair by counter_quantity_min_precision.
	TradingPairOrderFieldCounterQuantityMinPrecision = &TradingPairOrderField{
		field: tradingpair.FieldCounterQuantityMinPrecision,
		toCursor: func(tp *TradingPair) Cursor {
			return Cursor{
				ID:    tp.ID,
				Value: tp.CounterQuantityMinPrecision,
			}
		},
	}
	// TradingPairOrderFieldCounterQuantityMaxPrecision orders TradingPair by counter_quantity_max_precision.
	TradingPairOrderFieldCounterQuantityMaxPrecision = &TradingPairOrderField{
		field: tradingpair.FieldCounterQuantityMaxPrecision,
		toCursor: func(tp *TradingPair) Cursor {
			return Cursor{
				ID:    tp.ID,
				Value: tp.CounterQuantityMaxPrecision,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TradingPairOrderField) String() string {
	var str string
	switch f.field {
	case tradingpair.FieldSymbol:
		str = "symbol"
	case tradingpair.FieldBasePriceMinPrecision:
		str = "basePriceMinPrecision"
	case tradingpair.FieldBasePriceMaxPrecision:
		str = "basePriceMaxPrecision"
	case tradingpair.FieldBaseQuantityMinPrecision:
		str = "baseQuantityMinPrecision"
	case tradingpair.FieldBaseQuantityMaxPrecision:
		str = "baseQuantityMaxPrecision"
	case tradingpair.FieldCounterPriceMinPrecision:
		str = "counterPriceMinPrecision"
	case tradingpair.FieldCounterPriceMaxPrecision:
		str = "counterPriceMaxPrecision"
	case tradingpair.FieldCounterQuantityMinPrecision:
		str = "counterQuantityMinPrecision"
	case tradingpair.FieldCounterQuantityMaxPrecision:
		str = "counterQuantityMaxPrecision"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TradingPairOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TradingPairOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TradingPairOrderField %T must be a string", v)
	}
	switch str {
	case "symbol":
		*f = *TradingPairOrderFieldSymbol
	case "basePriceMinPrecision":
		*f = *TradingPairOrderFieldBasePriceMinPrecision
	case "basePriceMaxPrecision":
		*f = *TradingPairOrderFieldBasePriceMaxPrecision
	case "baseQuantityMinPrecision":
		*f = *TradingPairOrderFieldBaseQuantityMinPrecision
	case "baseQuantityMaxPrecision":
		*f = *TradingPairOrderFieldBaseQuantityMaxPrecision
	case "counterPriceMinPrecision":
		*f = *TradingPairOrderFieldCounterPriceMinPrecision
	case "counterPriceMaxPrecision":
		*f = *TradingPairOrderFieldCounterPriceMaxPrecision
	case "counterQuantityMinPrecision":
		*f = *TradingPairOrderFieldCounterQuantityMinPrecision
	case "counterQuantityMaxPrecision":
		*f = *TradingPairOrderFieldCounterQuantityMaxPrecision
	default:
		return fmt.Errorf("%s is not a valid TradingPairOrderField", str)
	}
	return nil
}

// TradingPairOrderField defines the ordering field of TradingPair.
type TradingPairOrderField struct {
	field    string
	toCursor func(*TradingPair) Cursor
}

// TradingPairOrder defines the ordering of TradingPair.
type TradingPairOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *TradingPairOrderField `json:"field"`
}

// DefaultTradingPairOrder is the default ordering of TradingPair.
var DefaultTradingPairOrder = &TradingPairOrder{
	Direction: OrderDirectionAsc,
	Field: &TradingPairOrderField{
		field: tradingpair.FieldID,
		toCursor: func(tp *TradingPair) Cursor {
			return Cursor{ID: tp.ID}
		},
	},
}

// ToEdge converts TradingPair into TradingPairEdge.
func (tp *TradingPair) ToEdge(order *TradingPairOrder) *TradingPairEdge {
	if order == nil {
		order = DefaultTradingPairOrder
	}
	return &TradingPairEdge{
		Node:   tp,
		Cursor: order.Field.toCursor(tp),
	}
}

// VenueEdge is the edge representation of Venue.
type VenueEdge struct {
	Node   *Venue `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// VenueConnection is the connection containing edges to Venue.
type VenueConnection struct {
	Edges      []*VenueEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *VenueConnection) build(nodes []*Venue, pager *venuePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Venue
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Venue {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Venue {
			return nodes[i]
		}
	}
	c.Edges = make([]*VenueEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &VenueEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// VenuePaginateOption enables pagination customization.
type VenuePaginateOption func(*venuePager) error

// WithVenueOrder configures pagination ordering.
func WithVenueOrder(order *VenueOrder) VenuePaginateOption {
	if order == nil {
		order = DefaultVenueOrder
	}
	o := *order
	return func(pager *venuePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultVenueOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithVenueFilter configures pagination filter.
func WithVenueFilter(filter func(*VenueQuery) (*VenueQuery, error)) VenuePaginateOption {
	return func(pager *venuePager) error {
		if filter == nil {
			return errors.New("VenueQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type venuePager struct {
	order  *VenueOrder
	filter func(*VenueQuery) (*VenueQuery, error)
}

func newVenuePager(opts []VenuePaginateOption) (*venuePager, error) {
	pager := &venuePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultVenueOrder
	}
	return pager, nil
}

func (p *venuePager) applyFilter(query *VenueQuery) (*VenueQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *venuePager) toCursor(v *Venue) Cursor {
	return p.order.Field.toCursor(v)
}

func (p *venuePager) applyCursors(query *VenueQuery, after, before *Cursor) *VenueQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultVenueOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *venuePager) applyOrder(query *VenueQuery, reverse bool) *VenueQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultVenueOrder.Field {
		query = query.Order(direction.orderFunc(DefaultVenueOrder.Field.field))
	}
	return query
}

func (p *venuePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultVenueOrder.Field {
			b.Comma().Ident(DefaultVenueOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Venue.
func (v *VenueQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...VenuePaginateOption,
) (*VenueConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newVenuePager(opts)
	if err != nil {
		return nil, err
	}
	if v, err = pager.applyFilter(v); err != nil {
		return nil, err
	}
	conn := &VenueConnection{Edges: []*VenueEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = v.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	v = pager.applyCursors(v, after, before)
	v = pager.applyOrder(v, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		v.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := v.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := v.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// VenueOrderFieldVenueID orders Venue by venue_id.
	VenueOrderFieldVenueID = &VenueOrderField{
		field: venue.FieldVenueID,
		toCursor: func(v *Venue) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.VenueID,
			}
		},
	}
	// VenueOrderFieldType orders Venue by type.
	VenueOrderFieldType = &VenueOrderField{
		field: venue.FieldType,
		toCursor: func(v *Venue) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.Type,
			}
		},
	}
	// VenueOrderFieldName orders Venue by name.
	VenueOrderFieldName = &VenueOrderField{
		field: venue.FieldName,
		toCursor: func(v *Venue) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.Name,
			}
		},
	}
	// VenueOrderFieldYearEstablished orders Venue by year_established.
	VenueOrderFieldYearEstablished = &VenueOrderField{
		field: venue.FieldYearEstablished,
		toCursor: func(v *Venue) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.YearEstablished,
			}
		},
	}
	// VenueOrderFieldCountry orders Venue by country.
	VenueOrderFieldCountry = &VenueOrderField{
		field: venue.FieldCountry,
		toCursor: func(v *Venue) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.Country,
			}
		},
	}
	// VenueOrderFieldImage orders Venue by image.
	VenueOrderFieldImage = &VenueOrderField{
		field: venue.FieldImage,
		toCursor: func(v *Venue) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.Image,
			}
		},
	}
	// VenueOrderFieldHasTradingIncentive orders Venue by has_trading_incentive.
	VenueOrderFieldHasTradingIncentive = &VenueOrderField{
		field: venue.FieldHasTradingIncentive,
		toCursor: func(v *Venue) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.HasTradingIncentive,
			}
		},
	}
	// VenueOrderFieldCentralized orders Venue by centralized.
	VenueOrderFieldCentralized = &VenueOrderField{
		field: venue.FieldCentralized,
		toCursor: func(v *Venue) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.Centralized,
			}
		},
	}
	// VenueOrderFieldPublicNotice orders Venue by public_notice.
	VenueOrderFieldPublicNotice = &VenueOrderField{
		field: venue.FieldPublicNotice,
		toCursor: func(v *Venue) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.PublicNotice,
			}
		},
	}
	// VenueOrderFieldAlertNotice orders Venue by alert_notice.
	VenueOrderFieldAlertNotice = &VenueOrderField{
		field: venue.FieldAlertNotice,
		toCursor: func(v *Venue) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.AlertNotice,
			}
		},
	}
	// VenueOrderFieldTrustScore orders Venue by trust_score.
	VenueOrderFieldTrustScore = &VenueOrderField{
		field: venue.FieldTrustScore,
		toCursor: func(v *Venue) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.TrustScore,
			}
		},
	}
	// VenueOrderFieldTrustScoreRank orders Venue by trust_score_rank.
	VenueOrderFieldTrustScoreRank = &VenueOrderField{
		field: venue.FieldTrustScoreRank,
		toCursor: func(v *Venue) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.TrustScoreRank,
			}
		},
	}
	// VenueOrderFieldTradeVolume24hBtc orders Venue by trade_volume_24h_btc.
	VenueOrderFieldTradeVolume24hBtc = &VenueOrderField{
		field: venue.FieldTradeVolume24hBtc,
		toCursor: func(v *Venue) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.TradeVolume24hBtc,
			}
		},
	}
	// VenueOrderFieldTradeVolume24hBtcNormalized orders Venue by trade_volume_24h_btc_normalized.
	VenueOrderFieldTradeVolume24hBtcNormalized = &VenueOrderField{
		field: venue.FieldTradeVolume24hBtcNormalized,
		toCursor: func(v *Venue) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.TradeVolume24hBtcNormalized,
			}
		},
	}
	// VenueOrderFieldMakerFee orders Venue by maker_fee.
	VenueOrderFieldMakerFee = &VenueOrderField{
		field: venue.FieldMakerFee,
		toCursor: func(v *Venue) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.MakerFee,
			}
		},
	}
	// VenueOrderFieldTakerFee orders Venue by taker_fee.
	VenueOrderFieldTakerFee = &VenueOrderField{
		field: venue.FieldTakerFee,
		toCursor: func(v *Venue) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.TakerFee,
			}
		},
	}
	// VenueOrderFieldSpreadFee orders Venue by spread_fee.
	VenueOrderFieldSpreadFee = &VenueOrderField{
		field: venue.FieldSpreadFee,
		toCursor: func(v *Venue) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.SpreadFee,
			}
		},
	}
	// VenueOrderFieldSupportAPI orders Venue by support_api.
	VenueOrderFieldSupportAPI = &VenueOrderField{
		field: venue.FieldSupportAPI,
		toCursor: func(v *Venue) Cursor {
			return Cursor{
				ID:    v.ID,
				Value: v.SupportAPI,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f VenueOrderField) String() string {
	var str string
	switch f.field {
	case venue.FieldVenueID:
		str = "venueId"
	case venue.FieldType:
		str = "type"
	case venue.FieldName:
		str = "name"
	case venue.FieldYearEstablished:
		str = "yearEstablished"
	case venue.FieldCountry:
		str = "country"
	case venue.FieldImage:
		str = "image"
	case venue.FieldHasTradingIncentive:
		str = "hasTradingIncentive"
	case venue.FieldCentralized:
		str = "centralized"
	case venue.FieldPublicNotice:
		str = "publicNotice"
	case venue.FieldAlertNotice:
		str = "alertNotice"
	case venue.FieldTrustScore:
		str = "trustScore"
	case venue.FieldTrustScoreRank:
		str = "trustScoreRank"
	case venue.FieldTradeVolume24hBtc:
		str = "tradeVolume24hBtc"
	case venue.FieldTradeVolume24hBtcNormalized:
		str = "tradeVolume24hBtcNormalized"
	case venue.FieldMakerFee:
		str = "makerFee"
	case venue.FieldTakerFee:
		str = "takerFee"
	case venue.FieldSpreadFee:
		str = "spreadFee"
	case venue.FieldSupportAPI:
		str = "supportAPI"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f VenueOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *VenueOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("VenueOrderField %T must be a string", v)
	}
	switch str {
	case "venueId":
		*f = *VenueOrderFieldVenueID
	case "type":
		*f = *VenueOrderFieldType
	case "name":
		*f = *VenueOrderFieldName
	case "yearEstablished":
		*f = *VenueOrderFieldYearEstablished
	case "country":
		*f = *VenueOrderFieldCountry
	case "image":
		*f = *VenueOrderFieldImage
	case "hasTradingIncentive":
		*f = *VenueOrderFieldHasTradingIncentive
	case "centralized":
		*f = *VenueOrderFieldCentralized
	case "publicNotice":
		*f = *VenueOrderFieldPublicNotice
	case "alertNotice":
		*f = *VenueOrderFieldAlertNotice
	case "trustScore":
		*f = *VenueOrderFieldTrustScore
	case "trustScoreRank":
		*f = *VenueOrderFieldTrustScoreRank
	case "tradeVolume24hBtc":
		*f = *VenueOrderFieldTradeVolume24hBtc
	case "tradeVolume24hBtcNormalized":
		*f = *VenueOrderFieldTradeVolume24hBtcNormalized
	case "makerFee":
		*f = *VenueOrderFieldMakerFee
	case "takerFee":
		*f = *VenueOrderFieldTakerFee
	case "spreadFee":
		*f = *VenueOrderFieldSpreadFee
	case "supportAPI":
		*f = *VenueOrderFieldSupportAPI
	default:
		return fmt.Errorf("%s is not a valid VenueOrderField", str)
	}
	return nil
}

// VenueOrderField defines the ordering field of Venue.
type VenueOrderField struct {
	field    string
	toCursor func(*Venue) Cursor
}

// VenueOrder defines the ordering of Venue.
type VenueOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *VenueOrderField `json:"field"`
}

// DefaultVenueOrder is the default ordering of Venue.
var DefaultVenueOrder = &VenueOrder{
	Direction: OrderDirectionAsc,
	Field: &VenueOrderField{
		field: venue.FieldID,
		toCursor: func(v *Venue) Cursor {
			return Cursor{ID: v.ID}
		},
	},
}

// ToEdge converts Venue into VenueEdge.
func (v *Venue) ToEdge(order *VenueOrder) *VenueEdge {
	if order == nil {
		order = DefaultVenueOrder
	}
	return &VenueEdge{
		Node:   v,
		Cursor: order.Field.toCursor(v),
	}
}
