// Code generated by ent, DO NOT EDIT.

package repositories

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/omiga-group/omiga/src/order/shared/models"
	"github.com/omiga-group/omiga/src/order/shared/repositories/orderbook"
)

// OrderBook is the model entity for the OrderBook schema.
type OrderBook struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ExchangeID holds the value of the "exchange_id" field.
	ExchangeID string `json:"exchange_id,omitempty"`
	// LastUpdated holds the value of the "last_updated" field.
	LastUpdated time.Time `json:"last_updated,omitempty"`
	// OrderBook holds the value of the "order_book" field.
	OrderBook models.OrderBook `json:"order_book,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderBook) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderbook.FieldOrderBook:
			values[i] = new([]byte)
		case orderbook.FieldID:
			values[i] = new(sql.NullInt64)
		case orderbook.FieldExchangeID:
			values[i] = new(sql.NullString)
		case orderbook.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderBook", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderBook fields.
func (ob *OrderBook) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderbook.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ob.ID = int(value.Int64)
		case orderbook.FieldExchangeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field exchange_id", values[i])
			} else if value.Valid {
				ob.ExchangeID = value.String
			}
		case orderbook.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_updated", values[i])
			} else if value.Valid {
				ob.LastUpdated = value.Time
			}
		case orderbook.FieldOrderBook:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field order_book", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ob.OrderBook); err != nil {
					return fmt.Errorf("unmarshal field order_book: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this OrderBook.
// Note that you need to call OrderBook.Unwrap() before calling this method if this OrderBook
// was returned from a transaction, and the transaction was committed or rolled back.
func (ob *OrderBook) Update() *OrderBookUpdateOne {
	return (&OrderBookClient{config: ob.config}).UpdateOne(ob)
}

// Unwrap unwraps the OrderBook entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ob *OrderBook) Unwrap() *OrderBook {
	_tx, ok := ob.config.driver.(*txDriver)
	if !ok {
		panic("repositories: OrderBook is not a transactional entity")
	}
	ob.config.driver = _tx.drv
	return ob
}

// String implements the fmt.Stringer.
func (ob *OrderBook) String() string {
	var builder strings.Builder
	builder.WriteString("OrderBook(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ob.ID))
	builder.WriteString("exchange_id=")
	builder.WriteString(ob.ExchangeID)
	builder.WriteString(", ")
	builder.WriteString("last_updated=")
	builder.WriteString(ob.LastUpdated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("order_book=")
	builder.WriteString(fmt.Sprintf("%v", ob.OrderBook))
	builder.WriteByte(')')
	return builder.String()
}

// OrderBooks is a parsable slice of OrderBook.
type OrderBooks []*OrderBook

func (ob OrderBooks) config(cfg config) {
	for _i := range ob {
		ob[_i].config = cfg
	}
}
