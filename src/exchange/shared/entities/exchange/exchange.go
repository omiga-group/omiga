// Code generated by ent, DO NOT EDIT.

package exchange

const (
	// Label holds the string label denoting the exchange type in the database.
	Label = "exchange"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldExchangeID holds the string denoting the exchange_id field in the database.
	FieldExchangeID = "exchange_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldYearEstablished holds the string denoting the year_established field in the database.
	FieldYearEstablished = "year_established"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldLinks holds the string denoting the links field in the database.
	FieldLinks = "links"
	// FieldHasTradingIncentive holds the string denoting the has_trading_incentive field in the database.
	FieldHasTradingIncentive = "has_trading_incentive"
	// FieldCentralized holds the string denoting the centralized field in the database.
	FieldCentralized = "centralized"
	// FieldPublicNotice holds the string denoting the public_notice field in the database.
	FieldPublicNotice = "public_notice"
	// FieldAlertNotice holds the string denoting the alert_notice field in the database.
	FieldAlertNotice = "alert_notice"
	// FieldTrustScore holds the string denoting the trust_score field in the database.
	FieldTrustScore = "trust_score"
	// FieldTrustScoreRank holds the string denoting the trust_score_rank field in the database.
	FieldTrustScoreRank = "trust_score_rank"
	// FieldTradeVolume24hBtc holds the string denoting the trade_volume_24h_btc field in the database.
	FieldTradeVolume24hBtc = "trade_volume_24h_btc"
	// FieldTradeVolume24hBtcNormalized holds the string denoting the trade_volume_24h_btc_normalized field in the database.
	FieldTradeVolume24hBtcNormalized = "trade_volume_24h_btc_normalized"
	// FieldMakerFee holds the string denoting the maker_fee field in the database.
	FieldMakerFee = "maker_fee"
	// FieldTakerFee holds the string denoting the taker_fee field in the database.
	FieldTakerFee = "taker_fee"
	// FieldSpreadFee holds the string denoting the spread_fee field in the database.
	FieldSpreadFee = "spread_fee"
	// FieldSupportAPI holds the string denoting the support_api field in the database.
	FieldSupportAPI = "support_api"
	// EdgeTicker holds the string denoting the ticker edge name in mutations.
	EdgeTicker = "ticker"
	// EdgeTradingPairs holds the string denoting the trading_pairs edge name in mutations.
	EdgeTradingPairs = "trading_pairs"
	// Table holds the table name of the exchange in the database.
	Table = "exchanges"
	// TickerTable is the table that holds the ticker relation/edge.
	TickerTable = "tickers"
	// TickerInverseTable is the table name for the Ticker entity.
	// It exists in this package in order to avoid circular dependency with the "ticker" package.
	TickerInverseTable = "tickers"
	// TickerColumn is the table column denoting the ticker relation/edge.
	TickerColumn = "exchange_ticker"
	// TradingPairsTable is the table that holds the trading_pairs relation/edge.
	TradingPairsTable = "trading_pairs"
	// TradingPairsInverseTable is the table name for the TradingPair entity.
	// It exists in this package in order to avoid circular dependency with the "tradingpair" package.
	TradingPairsInverseTable = "trading_pairs"
	// TradingPairsColumn is the table column denoting the trading_pairs relation/edge.
	TradingPairsColumn = "exchange_trading_pairs"
)

// Columns holds all SQL columns for exchange fields.
var Columns = []string{
	FieldID,
	FieldExchangeID,
	FieldName,
	FieldYearEstablished,
	FieldCountry,
	FieldImage,
	FieldLinks,
	FieldHasTradingIncentive,
	FieldCentralized,
	FieldPublicNotice,
	FieldAlertNotice,
	FieldTrustScore,
	FieldTrustScoreRank,
	FieldTradeVolume24hBtc,
	FieldTradeVolume24hBtcNormalized,
	FieldMakerFee,
	FieldTakerFee,
	FieldSpreadFee,
	FieldSupportAPI,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
